#include "lua_cocos2dx_if_auto.hpp"
#include "EquipInfo.h"
#include "GeneralInfo.h"
#include "ToolInfo.h"
#include "PlayerInfo.h"
#include "AllianceInfo.h"
#include "UserPlatformInfo.h"
#include "GlobalData.h"
#include "ActivityEventObj.h"
#include "ActivityInfo.h"
#include "ActivityEventInfo.h"
#include "FunBuildInfo.h"
#include "IFAllianceHelpReportInfo.hpp"
#include "CCIFTouchNode.h"
#include "CCProgressAppear.h"
#include "CCLabelIF.h"
#include "CCLabelIFTTF.h"
#include "CCLabelBatch.h"
#include "CCFloatingText.h"
#include "CCModelLayer.h"
#include "CCClipNode.h"
#include "CCCommonUtils.h"
#include "CCLoadSprite.h"
#include "CCINIParser.h"
#include "CCAniNode.h"
#include "CCTableViewTouchIFCell.h"
#include "CCRapidXMLParser.h"
#include "PopupBaseView.h"
#include "TipsView.h"
#include "YesNoDialog.h"
#include "HFHeadImgNode.h"
#include "PlayerInfoBtnPopUpView.h"
#include "TipsWithPicView.h"
#include "WaitInterface.h"
#include "ActivityController.h"
#include "LuaController.h"
#include "PopupViewController.h"
#include "LocalController.h"
#include "ToolController.h"
#include "FunBuildController.h"
#include "WorldController.h"
#include "NewBaseTileInfo.h"
#include "WorldMapView.h"
#include "CCSafeNotificationCenter.h"
#include "SceneController.h"
#include "GuideController.h"
#include "ImperialScene.h"
#include "KingBattleRankView.hpp"
#include "tolua_fix.h"
#include "LuaBasicConversions.h"
void PICMaptoLua(lua_State* tolua_S,PICMap info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"pic");
	lua_pushstring(tolua_S, info.pic.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"x");
	lua_pushinteger(tolua_S, info.x);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"y");
	lua_pushinteger(tolua_S, info.y);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"config");
	lua_pushstring(tolua_S, info.config.c_str());
	lua_settable(tolua_S, -3);
	
}
void DragonTileInfotoLua(lua_State* tolua_S,DragonTileInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"allianceUid");
	lua_pushstring(tolua_S, info.allianceUid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"uid");
	lua_pushstring(tolua_S, info.uid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"endTime");
	lua_pushnumber(tolua_S, info.endTime);
	lua_settable(tolua_S, -3);
	
}
void AllianceAreaOwnerInfotoLua(lua_State* tolua_S,AllianceAreaOwnerInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"ownerId");
	lua_pushstring(tolua_S, info.ownerId.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"ownerName");
	lua_pushstring(tolua_S, info.ownerName.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"allianceId");
	lua_pushstring(tolua_S, info.allianceId.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"allianceAbbr");
	lua_pushstring(tolua_S, info.allianceAbbr.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"ownerMarchUuid");
	lua_pushstring(tolua_S, info.ownerMarchUuid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"team");
	tolua_pushboolean(tolua_S, info.team);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"ownerPic");
	lua_pushstring(tolua_S, info.ownerPic.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"true");
	lua_pushstring(tolua_S,"res");
	
}
void KingActivityBuildInfotoLua(lua_State* tolua_S,KingActivityBuildInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"allianceUid");
	lua_pushstring(tolua_S, info.allianceUid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"uid");
	lua_pushstring(tolua_S, info.uid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"openTime");
	lua_pushnumber(tolua_S, info.openTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"endTime");
	lua_pushnumber(tolua_S, info.endTime);
	lua_settable(tolua_S, -3);
	
}
void TrebuchetInfotoLua(lua_State* tolua_S,TrebuchetInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"direction");
	lua_pushinteger(tolua_S, info.direction);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"allianceUid");
	lua_pushstring(tolua_S, info.allianceUid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"state");
	lua_pushinteger(tolua_S, info.state);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"uid");
	lua_pushstring(tolua_S, info.uid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"openTime");
	lua_pushnumber(tolua_S, info.openTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"endTime");
	lua_pushnumber(tolua_S, info.endTime);
	lua_settable(tolua_S, -3);
	
}
void WarehouseInfotoLua(lua_State* tolua_S,WarehouseInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"uid");
	lua_pushstring(tolua_S, info.uid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"updateTime");
	lua_pushnumber(tolua_S, info.updateTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"buildSpeed");
	lua_pushnumber(tolua_S, info.buildSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defence");
	lua_pushinteger(tolua_S, info.defence);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defenceMax");
	lua_pushinteger(tolua_S, info.defenceMax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"state");
	lua_pushinteger(tolua_S, info.state);
	lua_settable(tolua_S, -3);
	
}
void BannerInfotoLua(lua_State* tolua_S,BannerInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"uid");
	lua_pushstring(tolua_S, info.uid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"updateTime");
	lua_pushnumber(tolua_S, info.updateTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"buildSpeed");
	lua_pushnumber(tolua_S, info.buildSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defence");
	lua_pushinteger(tolua_S, info.defence);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defenceMax");
	lua_pushinteger(tolua_S, info.defenceMax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"state");
	lua_pushinteger(tolua_S, info.state);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"banner");
	lua_pushstring(tolua_S, info.banner.c_str());
	lua_settable(tolua_S, -3);
	
}
void TowerInfotoLua(lua_State* tolua_S,TowerInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"uid");
	lua_pushstring(tolua_S, info.uid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"updateTime");
	lua_pushnumber(tolua_S, info.updateTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"buildSpeed");
	lua_pushnumber(tolua_S, info.buildSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defence");
	lua_pushinteger(tolua_S, info.defence);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defenceMax");
	lua_pushinteger(tolua_S, info.defenceMax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"state");
	lua_pushinteger(tolua_S, info.state);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"dialog");
	lua_pushinteger(tolua_S, info.dialog);
	lua_settable(tolua_S, -3);
	
}
void SuperMineInfotoLua(lua_State* tolua_S,SuperMineInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"truid");
	lua_pushstring(tolua_S, info.truid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"trutime");
	lua_pushnumber(tolua_S, info.trutime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"trstime");
	lua_pushnumber(tolua_S, info.trstime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"trdef");
	lua_pushinteger(tolua_S, info.trdef);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"trdefmax");
	lua_pushinteger(tolua_S, info.trdefmax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"trstat");
	lua_pushinteger(tolua_S, info.trstat);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"buildSpeed");
	lua_pushnumber(tolua_S, info.buildSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"digSpeed");
	lua_pushnumber(tolua_S, info.digSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"troopMax");
	lua_pushnumber(tolua_S, info.troopMax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"digStartTime");
	lua_pushnumber(tolua_S, info.digStartTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"sum");
	lua_pushnumber(tolua_S, info.sum);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"type");
	lua_pushnumber(tolua_S, info.type);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"changeCollectSpdTime");
	lua_pushnumber(tolua_S, info.changeCollectSpdTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"digStartNum");
	lua_pushinteger(tolua_S, info.digStartNum);
	lua_settable(tolua_S, -3);
	
}
void AllianceAreaInfotoLua(lua_State* tolua_S,AllianceAreaInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"tuid");
	lua_pushstring(tolua_S, info.tuid.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"state");
	lua_pushinteger(tolua_S, info.state);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"updateTime");
	lua_pushnumber(tolua_S, info.updateTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startTime");
	lua_pushnumber(tolua_S, info.startTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defence");
	lua_pushinteger(tolua_S, info.defence);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"defenceMax");
	lua_pushinteger(tolua_S, info.defenceMax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"buildSpeed");
	lua_pushnumber(tolua_S, info.buildSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"range");
	lua_pushinteger(tolua_S, info.range);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"dialogId");
	lua_pushinteger(tolua_S, info.dialogId);
	lua_settable(tolua_S, -3);
	
}
void FieldMonsterInfotoLua(lua_State* tolua_S,FieldMonsterInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"monsterId");
	lua_pushstring(tolua_S, info.monsterId.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"totalHp");
	lua_pushinteger(tolua_S, info.totalHp);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"currentHp");
	lua_pushinteger(tolua_S, info.currentHp);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"isAppear");
	tolua_pushboolean(tolua_S, info.isAppear);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"isHpChange");
	tolua_pushboolean(tolua_S, info.isHpChange);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"christmasNum");
	lua_pushinteger(tolua_S, info.christmasNum);
	lua_settable(tolua_S, -3);
	
}
void BattleTileInfotoLua(lua_State* tolua_S,BattleTileInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"type");
	lua_pushinteger(tolua_S, info.type);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"icon");
	lua_pushstring(tolua_S, info.icon.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"name");
	lua_pushstring(tolua_S, info.name.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"desc");
	lua_pushstring(tolua_S, info.desc.c_str());
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"startStamp");
	lua_pushnumber(tolua_S, info.startStamp);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"refreshStamp");
	lua_pushnumber(tolua_S, info.refreshStamp);
	lua_settable(tolua_S, -3);
	
}
void ResourceTileInfotoLua(lua_State* tolua_S,ResourceTileInfo info){
	lua_newtable(tolua_S);
	lua_pushstring(tolua_S,"type");
	lua_pushnumber(tolua_S, info.type);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"lv");
	lua_pushnumber(tolua_S, info.lv);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"sum");
	lua_pushnumber(tolua_S, info.sum);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"digSpeed");
	lua_pushnumber(tolua_S, info.digSpeed);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"troopMax");
	lua_pushnumber(tolua_S, info.troopMax);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"digStartTime");
	lua_pushnumber(tolua_S, info.digStartTime);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"refreshStamp");
	lua_pushnumber(tolua_S, info.refreshStamp);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"digStartNum");
	lua_pushinteger(tolua_S, info.digStartNum);
	lua_settable(tolua_S, -3);
	lua_pushstring(tolua_S,"changeCollectSpdTime");
	lua_pushnumber(tolua_S, info.changeCollectSpdTime);
	lua_settable(tolua_S, -3);
	
}


static int lua_cocos2dx_if_EquipInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EquipInfo)");
    return 0;
}

static int lua_cocos2dx_if_EquipInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	EquipInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"EquipInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_EquipInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (EquipInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "uid") == 0){
		lua_pushstring(tolua_S, cobj->uid.c_str());
	}else if (strcmp(property.c_str(), "itemId") == 0){
		lua_pushstring(tolua_S, cobj->itemId.c_str());
	}else if (strcmp(property.c_str(), "count") == 0){
		lua_pushinteger(tolua_S, cobj->count);
	}else if (strcmp(property.c_str(), "general") == 0){
		lua_pushstring(tolua_S, cobj->general.c_str());
	}else if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "star") == 0){
		lua_pushinteger(tolua_S, cobj->star);
	}else if (strcmp(property.c_str(), "priceBuy") == 0){
		lua_pushinteger(tolua_S, cobj->priceBuy);
	}else if (strcmp(property.c_str(), "priceSell") == 0){
		lua_pushinteger(tolua_S, cobj->priceSell);
	}else if (strcmp(property.c_str(), "effect") == 0){
		lua_pushstring(tolua_S, cobj->effect.c_str());
	}else if (strcmp(property.c_str(), "value") == 0){
		lua_pushinteger(tolua_S, cobj->value);
	}else if (strcmp(property.c_str(), "attr1") == 0){
		lua_pushstring(tolua_S, cobj->attr1.c_str());
	}else if (strcmp(property.c_str(), "attr2") == 0){
		lua_pushstring(tolua_S, cobj->attr2.c_str());
	}else if (strcmp(property.c_str(), "attr3") == 0){
		lua_pushstring(tolua_S, cobj->attr3.c_str());
	}else if (strcmp(property.c_str(), "attr4") == 0){
		lua_pushstring(tolua_S, cobj->attr4.c_str());
	}else if (strcmp(property.c_str(), "attrLevel1") == 0){
		lua_pushinteger(tolua_S, cobj->attrLevel1);
	}else if (strcmp(property.c_str(), "attrLevel2") == 0){
		lua_pushinteger(tolua_S, cobj->attrLevel2);
	}else if (strcmp(property.c_str(), "attrLevel3") == 0){
		lua_pushinteger(tolua_S, cobj->attrLevel3);
	}else if (strcmp(property.c_str(), "attrLevel4") == 0){
		lua_pushinteger(tolua_S, cobj->attrLevel4);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_EquipInfo_newindex(lua_State* tolua_S)
{
	EquipInfo* cobj = *(EquipInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "uid") == 0){
		cobj->uid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "itemId") == 0){
		cobj->itemId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "count") == 0){
		cobj->count= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "general") == 0){
		cobj->general= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "star") == 0){
		cobj->star= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "priceBuy") == 0){
		cobj->priceBuy= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "priceSell") == 0){
		cobj->priceSell= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "effect") == 0){
		cobj->effect= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "value") == 0){
		cobj->value= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attr1") == 0){
		cobj->attr1= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attr2") == 0){
		cobj->attr2= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attr3") == 0){
		cobj->attr3= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attr4") == 0){
		cobj->attr4= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attrLevel1") == 0){
		cobj->attrLevel1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attrLevel2") == 0){
		cobj->attrLevel2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attrLevel3") == 0){
		cobj->attrLevel3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attrLevel4") == 0){
		cobj->attrLevel4= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_EquipInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"EquipInfo");
    tolua_cclass(tolua_S,"EquipInfo","EquipInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"EquipInfo");
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_EquipInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_EquipInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(EquipInfo).name();
    g_luaType[typeName] = "EquipInfo";
    g_typeCast["EquipInfo"] = "EquipInfo";
    return 1;
}

int lua_cocos2dx_if_GeneralSkillInfo_getUpgradeSkillPointNeed(lua_State* tolua_S)
{
    int argc = 0;
    GeneralSkillInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralSkillInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralSkillInfo_getUpgradeSkillPointNeed'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_getUpgradeSkillPointNeed'", nullptr);
            return 0;
        }
        int ret = cobj->getUpgradeSkillPointNeed();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralSkillInfo:getUpgradeSkillPointNeed",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_getUpgradeSkillPointNeed'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralSkillInfo_getTotalSkillPoint(lua_State* tolua_S)
{
    int argc = 0;
    GeneralSkillInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralSkillInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralSkillInfo_getTotalSkillPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_getTotalSkillPoint'", nullptr);
            return 0;
        }
        int ret = cobj->getTotalSkillPoint();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralSkillInfo:getTotalSkillPoint",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_getTotalSkillPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralSkillInfo_canConnect(lua_State* tolua_S)
{
    int argc = 0;
    GeneralSkillInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralSkillInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralSkillInfo_canConnect'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralSkillInfo:canConnect");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_canConnect'", nullptr);
            return 0;
        }
        bool ret = cobj->canConnect(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralSkillInfo:canConnect",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_canConnect'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralSkillInfo_isLocked(lua_State* tolua_S)
{
    int argc = 0;
    GeneralSkillInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralSkillInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralSkillInfo_isLocked'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_isLocked'", nullptr);
            return 0;
        }
        bool ret = cobj->isLocked();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralSkillInfo:isLocked",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_isLocked'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralSkillInfo_init(lua_State* tolua_S)
{
    int argc = 0;
    GeneralSkillInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralSkillInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralSkillInfo_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralSkillInfo:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralSkillInfo_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        std::string arg0;
        int arg1;
        std::string arg2;
        std::string arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralSkillInfo:create");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "GeneralSkillInfo:create");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "GeneralSkillInfo:create");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "GeneralSkillInfo:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_create'", nullptr);
            return 0;
        }
        GeneralSkillInfo* ret = GeneralSkillInfo::create(arg0, arg1, arg2, arg3);
        object_to_luaval<GeneralSkillInfo>(tolua_S, "GeneralSkillInfo",(GeneralSkillInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "GeneralSkillInfo:create",argc, 4);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_GeneralSkillInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    GeneralSkillInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        std::string arg0;
        int arg1;
        std::string arg2;
        std::string arg3;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralSkillInfo:GeneralSkillInfo");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "GeneralSkillInfo:GeneralSkillInfo");

        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "GeneralSkillInfo:GeneralSkillInfo");

        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "GeneralSkillInfo:GeneralSkillInfo");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralSkillInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new GeneralSkillInfo(arg0, arg1, arg2, arg3);
        tolua_pushusertype(tolua_S,(void*)cobj,"GeneralSkillInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralSkillInfo:GeneralSkillInfo",argc, 4);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralSkillInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_GeneralSkillInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GeneralSkillInfo)");
    return 0;
}

static int lua_cocos2dx_if_GeneralSkillInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	GeneralSkillInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"GeneralSkillInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralSkillInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (GeneralSkillInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "skillId") == 0){
		lua_pushstring(tolua_S, cobj->skillId.c_str());
	}else if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "generalUid") == 0){
		lua_pushstring(tolua_S, cobj->generalUid.c_str());
	}else if (strcmp(property.c_str(), "abilityId") == 0){
		lua_pushstring(tolua_S, cobj->abilityId.c_str());
	}else if (strcmp(property.c_str(), "x") == 0){
		lua_pushinteger(tolua_S, cobj->x);
	}else if (strcmp(property.c_str(), "y") == 0){
		lua_pushinteger(tolua_S, cobj->y);
	}else if (strcmp(property.c_str(), "maxLevel") == 0){
		lua_pushinteger(tolua_S, cobj->maxLevel);
	}else if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "showType") == 0){
		lua_pushinteger(tolua_S, cobj->showType);
	}else if(strcmp(property.c_str(), "base") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->base.begin();
		int idx = 1;
		while(iter!=cobj->base.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushnumber(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "add") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->add.begin();
		int idx = 1;
		while(iter!=cobj->add.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushnumber(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "des") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->des.begin();
		int idx = 1;
		while(iter!=cobj->des.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "param1") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->param1.begin();
		int idx = 1;
		while(iter!=cobj->param1.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushinteger(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "next") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->next.begin();
		int idx = 1;
		while(iter!=cobj->next.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_GeneralSkillInfo_newindex(lua_State* tolua_S)
{
	GeneralSkillInfo* cobj = *(GeneralSkillInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "skillId") == 0){
		cobj->skillId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "generalUid") == 0){
		cobj->generalUid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "abilityId") == 0){
		cobj->abilityId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "x") == 0){
		cobj->x= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "y") == 0){
		cobj->y= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "maxLevel") == 0){
		cobj->maxLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "showType") == 0){
		cobj->showType= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_GeneralSkillInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"GeneralSkillInfo");
    tolua_cclass(tolua_S,"GeneralSkillInfo","GeneralSkillInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"GeneralSkillInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_GeneralSkillInfo_constructor);
        tolua_function(tolua_S,"getUpgradeSkillPointNeed",lua_cocos2dx_if_GeneralSkillInfo_getUpgradeSkillPointNeed);
        tolua_function(tolua_S,"getTotalSkillPoint",lua_cocos2dx_if_GeneralSkillInfo_getTotalSkillPoint);
        tolua_function(tolua_S,"canConnect",lua_cocos2dx_if_GeneralSkillInfo_canConnect);
        tolua_function(tolua_S,"isLocked",lua_cocos2dx_if_GeneralSkillInfo_isLocked);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_GeneralSkillInfo_init);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_GeneralSkillInfo_create);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_GeneralSkillInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_GeneralSkillInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(GeneralSkillInfo).name();
    g_luaType[typeName] = "GeneralSkillInfo";
    g_typeCast["GeneralSkillInfo"] = "GeneralSkillInfo";
    return 1;
}

int lua_cocos2dx_if_SkillCDInfo_init(lua_State* tolua_S)
{
    int argc = 0;
    SkillCDInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SkillCDInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SkillCDInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SkillCDInfo_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SkillCDInfo_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SkillCDInfo:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SkillCDInfo_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SkillCDInfo_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"SkillCDInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SkillCDInfo_create'", nullptr);
            return 0;
        }
        SkillCDInfo* ret = SkillCDInfo::create();
        object_to_luaval<SkillCDInfo>(tolua_S, "SkillCDInfo",(SkillCDInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "SkillCDInfo:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SkillCDInfo_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_SkillCDInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    SkillCDInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SkillCDInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new SkillCDInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"SkillCDInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SkillCDInfo:SkillCDInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SkillCDInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_SkillCDInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SkillCDInfo)");
    return 0;
}

static int lua_cocos2dx_if_SkillCDInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	SkillCDInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"SkillCDInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SkillCDInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (SkillCDInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "uuid") == 0){
		lua_pushstring(tolua_S, cobj->uuid.c_str());
	}else if (strcmp(property.c_str(), "ownerId") == 0){
		lua_pushstring(tolua_S, cobj->ownerId.c_str());
	}else if (strcmp(property.c_str(), "skillId") == 0){
		lua_pushstring(tolua_S, cobj->skillId.c_str());
	}else if (strcmp(property.c_str(), "startTime") == 0){
		lua_pushnumber(tolua_S, cobj->startTime);
	}else if (strcmp(property.c_str(), "endTime") == 0){
		lua_pushnumber(tolua_S, cobj->endTime);
	}else if (strcmp(property.c_str(), "stat") == 0){
		lua_pushinteger(tolua_S, cobj->stat);
	}else if (strcmp(property.c_str(), "effectEndTime") == 0){
		lua_pushnumber(tolua_S, cobj->effectEndTime);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_SkillCDInfo_newindex(lua_State* tolua_S)
{
	SkillCDInfo* cobj = *(SkillCDInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "uuid") == 0){
		cobj->uuid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "ownerId") == 0){
		cobj->ownerId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "skillId") == 0){
		cobj->skillId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startTime") == 0){
		cobj->startTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "endTime") == 0){
		cobj->endTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "stat") == 0){
		cobj->stat= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "effectEndTime") == 0){
		cobj->effectEndTime= (double)lua_tonumber(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_SkillCDInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"SkillCDInfo");
    tolua_cclass(tolua_S,"SkillCDInfo","SkillCDInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"SkillCDInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_SkillCDInfo_constructor);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_SkillCDInfo_init);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_SkillCDInfo_create);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_SkillCDInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_SkillCDInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(SkillCDInfo).name();
    g_luaType[typeName] = "SkillCDInfo";
    g_typeCast["SkillCDInfo"] = "SkillCDInfo";
    return 1;
}

int lua_cocos2dx_if_GeneralInfo_getSkill(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getSkill'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        std::string arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralInfo:getSkill");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "GeneralInfo:getSkill");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getSkill'", nullptr);
            return 0;
        }
        GeneralSkillInfo* ret = cobj->getSkill(arg0, arg1);
        object_to_luaval<GeneralSkillInfo>(tolua_S, "GeneralSkillInfo",(GeneralSkillInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getSkill",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getSkill'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getAbilityIndex(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getAbilityIndex'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralInfo:getAbilityIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getAbilityIndex'", nullptr);
            return 0;
        }
        int ret = cobj->getAbilityIndex(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getAbilityIndex",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getAbilityIndex'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_checkHaveStudy(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_checkHaveStudy'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralInfo:checkHaveStudy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_checkHaveStudy'", nullptr);
            return 0;
        }
        bool ret = cobj->checkHaveStudy(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:checkHaveStudy",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_checkHaveStudy'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getName(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getName'", nullptr);
            return 0;
        }
        std::string ret = cobj->getName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getDesc(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getDesc'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getDesc'", nullptr);
            return 0;
        }
        std::string ret = cobj->getDesc();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getDesc",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getDesc'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getCostName(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getCostName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "GeneralInfo:getCostName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getCostName'", nullptr);
            return 0;
        }
        std::string ret = cobj->getCostName(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getCostName",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getCostName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getAbilityBySkillId(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getAbilityBySkillId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralInfo:getAbilityBySkillId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getAbilityBySkillId'", nullptr);
            return 0;
        }
        std::string ret = cobj->getAbilityBySkillId(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getAbilityBySkillId",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getAbilityBySkillId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getUsePoint(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getUsePoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GeneralInfo:getUsePoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getUsePoint'", nullptr);
            return 0;
        }
        int ret = cobj->getUsePoint(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getUsePoint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getUsePoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_getPower(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getPower'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GeneralInfo_getPower'", nullptr);
            return 0;
        }
        int ret = cobj->getPower();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GeneralInfo:getPower",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_getPower'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GeneralInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    GeneralInfo* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            cobj = new GeneralInfo();
            tolua_pushusertype(tolua_S,(void*)cobj,"GeneralInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            cocos2d::__Dictionary* arg0;
            ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "GeneralInfo:GeneralInfo");

            if (!ok) { break; }
            cobj = new GeneralInfo(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"GeneralInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "GeneralInfo:GeneralInfo",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GeneralInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_GeneralInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GeneralInfo)");
    return 0;
}

static int lua_cocos2dx_if_GeneralInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	GeneralInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"GeneralInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GeneralInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (GeneralInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "uuid") == 0){
		lua_pushstring(tolua_S, cobj->uuid.c_str());
	}else if (strcmp(property.c_str(), "generalId") == 0){
		lua_pushstring(tolua_S, cobj->generalId.c_str());
	}else if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "attack") == 0){
		lua_pushinteger(tolua_S, cobj->attack);
	}else if (strcmp(property.c_str(), "defense") == 0){
		lua_pushinteger(tolua_S, cobj->defense);
	}else if (strcmp(property.c_str(), "hp") == 0){
		lua_pushinteger(tolua_S, cobj->hp);
	}else if (strcmp(property.c_str(), "maxForces") == 0){
		lua_pushinteger(tolua_S, cobj->maxForces);
	}else if (strcmp(property.c_str(), "currExp") == 0){
		lua_pushinteger(tolua_S, cobj->currExp);
	}else if (strcmp(property.c_str(), "maxExp") == 0){
		lua_pushinteger(tolua_S, cobj->maxExp);
	}else if (strcmp(property.c_str(), "pos") == 0){
		lua_pushinteger(tolua_S, cobj->pos);
	}else if (strcmp(property.c_str(), "state") == 0){
		lua_pushinteger(tolua_S, cobj->state);
	}else if (strcmp(property.c_str(), "open") == 0){
		lua_pushinteger(tolua_S, cobj->open);
	}else if (strcmp(property.c_str(), "color") == 0){
		lua_pushinteger(tolua_S, cobj->color);
	}else if (strcmp(property.c_str(), "num") == 0){
		lua_pushinteger(tolua_S, cobj->num);
	}else if (strcmp(property.c_str(), "rank") == 0){
		lua_pushinteger(tolua_S, cobj->rank);
	}else if (strcmp(property.c_str(), "costType") == 0){
		lua_pushinteger(tolua_S, cobj->costType);
	}else if (strcmp(property.c_str(), "costValue") == 0){
		lua_pushinteger(tolua_S, cobj->costValue);
	}else if (strcmp(property.c_str(), "defaultSkill") == 0){
		lua_pushstring(tolua_S, cobj->defaultSkill.c_str());
	}else if (strcmp(property.c_str(), "isLock") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isLock);
	}else if (strcmp(property.c_str(), "name") == 0){
		lua_pushstring(tolua_S, cobj->name.c_str());
	}else if(strcmp(property.c_str(), "ability") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->ability.begin();
		int idx = 1;
		while(iter!=cobj->ability.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "abilityToChoose") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->abilityToChoose.begin();
		int idx = 1;
		while(iter!=cobj->abilityToChoose.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_GeneralInfo_newindex(lua_State* tolua_S)
{
	GeneralInfo* cobj = *(GeneralInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "uuid") == 0){
		cobj->uuid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "generalId") == 0){
		cobj->generalId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attack") == 0){
		cobj->attack= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "defense") == 0){
		cobj->defense= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "hp") == 0){
		cobj->hp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "maxForces") == 0){
		cobj->maxForces= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currExp") == 0){
		cobj->currExp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "maxExp") == 0){
		cobj->maxExp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pos") == 0){
		cobj->pos= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "state") == 0){
		cobj->state= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "open") == 0){
		cobj->open= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "color") == 0){
		cobj->color= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "num") == 0){
		cobj->num= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "rank") == 0){
		cobj->rank= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "costType") == 0){
		cobj->costType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "costValue") == 0){
		cobj->costValue= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "defaultSkill") == 0){
		cobj->defaultSkill= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isLock") == 0){
		cobj->isLock= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "name") == 0){
		cobj->name= (string)lua_tostring(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_GeneralInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"GeneralInfo");
    tolua_cclass(tolua_S,"GeneralInfo","GeneralInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"GeneralInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_GeneralInfo_constructor);
        tolua_function(tolua_S,"getSkill",lua_cocos2dx_if_GeneralInfo_getSkill);
        tolua_function(tolua_S,"getAbilityIndex",lua_cocos2dx_if_GeneralInfo_getAbilityIndex);
        tolua_function(tolua_S,"checkHaveStudy",lua_cocos2dx_if_GeneralInfo_checkHaveStudy);
        tolua_function(tolua_S,"getName",lua_cocos2dx_if_GeneralInfo_getName);
        tolua_function(tolua_S,"getDesc",lua_cocos2dx_if_GeneralInfo_getDesc);
        tolua_function(tolua_S,"getCostName",lua_cocos2dx_if_GeneralInfo_getCostName);
        tolua_function(tolua_S,"getAbilityBySkillId",lua_cocos2dx_if_GeneralInfo_getAbilityBySkillId);
        tolua_function(tolua_S,"getUsePoint",lua_cocos2dx_if_GeneralInfo_getUsePoint);
        tolua_function(tolua_S,"getPower",lua_cocos2dx_if_GeneralInfo_getPower);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_GeneralInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_GeneralInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(GeneralInfo).name();
    g_luaType[typeName] = "GeneralInfo";
    g_typeCast["GeneralInfo"] = "GeneralInfo";
    return 1;
}

int lua_cocos2dx_if_AttributeInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    AttributeInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_AttributeInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new AttributeInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"AttributeInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "AttributeInfo:AttributeInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_AttributeInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_AttributeInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (AttributeInfo)");
    return 0;
}

static int lua_cocos2dx_if_AttributeInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	AttributeInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"AttributeInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_AttributeInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (AttributeInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "aid") == 0){
		lua_pushinteger(tolua_S, cobj->aid);
	}else if (strcmp(property.c_str(), "area") == 0){
		lua_pushinteger(tolua_S, cobj->area);
	}else if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "effect") == 0){
		lua_pushstring(tolua_S, cobj->effect.c_str());
	}else if (strcmp(property.c_str(), "show") == 0){
		lua_pushinteger(tolua_S, cobj->show);
	}else if (strcmp(property.c_str(), "buff") == 0){
		lua_pushinteger(tolua_S, cobj->buff);
	}else if (strcmp(property.c_str(), "name") == 0){
		lua_pushstring(tolua_S, cobj->name.c_str());
	}else if (strcmp(property.c_str(), "icon") == 0){
		lua_pushstring(tolua_S, cobj->icon.c_str());
	}else if (strcmp(property.c_str(), "description") == 0){
		lua_pushstring(tolua_S, cobj->description.c_str());
	}else if (strcmp(property.c_str(), "bMail") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->bMail);
	}else if (strcmp(property.c_str(), "mail_order") == 0){
		lua_pushinteger(tolua_S, cobj->mail_order);
	}else if (strcmp(property.c_str(), "bAttack") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->bAttack);
	}else if (strcmp(property.c_str(), "bDefence") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->bDefence);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_AttributeInfo_newindex(lua_State* tolua_S)
{
	AttributeInfo* cobj = *(AttributeInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "aid") == 0){
		cobj->aid= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "area") == 0){
		cobj->area= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "effect") == 0){
		cobj->effect= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "show") == 0){
		cobj->show= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "buff") == 0){
		cobj->buff= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "name") == 0){
		cobj->name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "icon") == 0){
		cobj->icon= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "description") == 0){
		cobj->description= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bMail") == 0){
		cobj->bMail= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mail_order") == 0){
		cobj->mail_order= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bAttack") == 0){
		cobj->bAttack= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bDefence") == 0){
		cobj->bDefence= (bool)lua_toboolean(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_AttributeInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"AttributeInfo");
    tolua_cclass(tolua_S,"AttributeInfo","AttributeInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"AttributeInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_AttributeInfo_constructor);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_AttributeInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_AttributeInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(AttributeInfo).name();
    g_luaType[typeName] = "AttributeInfo";
    g_typeCast["AttributeInfo"] = "AttributeInfo";
    return 1;
}

int lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleY(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleY'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleY'", nullptr);
            return 0;
        }
        double ret = cobj->getOriginScaleY();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:getOriginScaleY",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleY'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleX(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleX'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleX'", nullptr);
            return 0;
        }
        double ret = cobj->getOriginScaleX();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:getOriginScaleX",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleX'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setColor(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "CCLabelIFTTF:setColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setColor'", nullptr);
            return 0;
        }
        cobj->setColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_getString(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_getString'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_getString'", nullptr);
            return 0;
        }
        const char* ret = cobj->getString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:getString",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_getString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_getTexture(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_getTexture'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_getTexture'", nullptr);
            return 0;
        }
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_luaval<cocos2d::Texture2D>(tolua_S, "cc.Texture2D",(cocos2d::Texture2D*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:getTexture",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_getTexture'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_enableStroke(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_enableStroke'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Color3B arg0;
        double arg1;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "CCLabelIFTTF:enableStroke");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "CCLabelIFTTF:enableStroke");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_enableStroke'", nullptr);
            return 0;
        }
        cobj->enableStroke(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        cocos2d::Color3B arg0;
        double arg1;
        bool arg2;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "CCLabelIFTTF:enableStroke");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "CCLabelIFTTF:enableStroke");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCLabelIFTTF:enableStroke");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_enableStroke'", nullptr);
            return 0;
        }
        cobj->enableStroke(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:enableStroke",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_enableStroke'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setString(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setString'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:setString"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setString'", nullptr);
            return 0;
        }
        cobj->setString(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setString",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setOpacity(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setOpacity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= luaval_to_uint16(tolua_S, 2,&arg0, "CCLabelIFTTF:setOpacity");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setOpacity'", nullptr);
            return 0;
        }
        cobj->setOpacity(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setOpacity",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setOpacity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setDimensions(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setDimensions'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        ok &= luaval_to_size(tolua_S, 2, &arg0, "CCLabelIFTTF:setDimensions");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setDimensions'", nullptr);
            return 0;
        }
        cobj->setDimensions(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setDimensions",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setDimensions'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setHorizontalAlignment(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setHorizontalAlignment'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::TextHAlignment arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLabelIFTTF:setHorizontalAlignment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setHorizontalAlignment'", nullptr);
            return 0;
        }
        cobj->setHorizontalAlignment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setHorizontalAlignment",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setHorizontalAlignment'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setVerticalAlignment(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setVerticalAlignment'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::TextVAlignment arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLabelIFTTF:setVerticalAlignment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setVerticalAlignment'", nullptr);
            return 0;
        }
        cobj->setVerticalAlignment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setVerticalAlignment",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setVerticalAlignment'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_init(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_getFontSize(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_getFontSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_getFontSize'", nullptr);
            return 0;
        }
        double ret = cobj->getFontSize();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:getFontSize",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_getFontSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setFontSize(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setFontSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCLabelIFTTF:setFontSize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setFontSize'", nullptr);
            return 0;
        }
        cobj->setFontSize(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setFontSize",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setFontSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setFntFile(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setFntFile'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:setFntFile"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setFntFile'", nullptr);
            return 0;
        }
        cobj->setFntFile(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setFntFile",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setFntFile'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_setAlignment(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_setAlignment'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::TextHAlignment arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLabelIFTTF:setAlignment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_setAlignment'", nullptr);
            return 0;
        }
        cobj->setAlignment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:setAlignment",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_setAlignment'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_getFontName(lua_State* tolua_S)
{
    int argc = 0;
    CCLabelIFTTF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCLabelIFTTF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIFTTF_getFontName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIFTTF_getFontName'", nullptr);
            return 0;
        }
        const char* ret = cobj->getFontName();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCLabelIFTTF:getFontName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_getFontName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIFTTF_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLabelIFTTF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 1)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            CCLabelIFTTF* ret = CCLabelIFTTF::create(arg0);
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 0)
        {
            CCLabelIFTTF* ret = CCLabelIFTTF::create();
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            double arg1;
            ok &= luaval_to_number(tolua_S, 3,&arg1, "CCLabelIFTTF:create");
            if (!ok) { break; }
            CCLabelIFTTF* ret = CCLabelIFTTF::create(arg0, arg1);
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 3)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCLabelIFTTF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "CCLabelIFTTF:create");
            if (!ok) { break; }
            CCLabelIFTTF* ret = CCLabelIFTTF::create(arg0, arg1, arg2);
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 6)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCLabelIFTTF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::Size arg3;
            ok &= luaval_to_size(tolua_S, 5, &arg3, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::TextVAlignment arg5;
            ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "CCLabelIFTTF:create");
            if (!ok) { break; }
            CCLabelIFTTF* ret = CCLabelIFTTF::create(arg0, arg1, arg2, arg3, arg4, arg5);
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 5)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            double arg1;
            ok &= luaval_to_number(tolua_S, 3,&arg1, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::Size arg2;
            ok &= luaval_to_size(tolua_S, 4, &arg2, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::TextVAlignment arg4;
            ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCLabelIFTTF:create");
            if (!ok) { break; }
            CCLabelIFTTF* ret = CCLabelIFTTF::create(arg0, arg1, arg2, arg3, arg4);
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 5)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLabelIFTTF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCLabelIFTTF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCLabelIFTTF:create");
            if (!ok) { break; }
            cocos2d::Vec2 arg4;
            ok &= luaval_to_vec2(tolua_S, 6, &arg4, "CCLabelIFTTF:create");
            if (!ok) { break; }
            CCLabelIFTTF* ret = CCLabelIFTTF::create(arg0, arg1, arg2, arg3, arg4);
            object_to_luaval<CCLabelIFTTF>(tolua_S, "CCLabelIFTTF",(CCLabelIFTTF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "CCLabelIFTTF:create",argc, 5);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIFTTF_create'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCLabelIFTTF_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCLabelIFTTF)");
    return 0;
}

int lua_register_cocos2dx_if_CCLabelIFTTF(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCLabelIFTTF");
    tolua_cclass(tolua_S,"CCLabelIFTTF","CCLabelIFTTF","cc.Label",nullptr);

    tolua_beginmodule(tolua_S,"CCLabelIFTTF");
        tolua_function(tolua_S,"getOriginScaleY",lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleY);
        tolua_function(tolua_S,"getOriginScaleX",lua_cocos2dx_if_CCLabelIFTTF_getOriginScaleX);
        tolua_function(tolua_S,"setColor",lua_cocos2dx_if_CCLabelIFTTF_setColor);
        tolua_function(tolua_S,"getString",lua_cocos2dx_if_CCLabelIFTTF_getString);
        tolua_function(tolua_S,"getTexture",lua_cocos2dx_if_CCLabelIFTTF_getTexture);
        tolua_function(tolua_S,"enableStroke",lua_cocos2dx_if_CCLabelIFTTF_enableStroke);
        tolua_function(tolua_S,"setString",lua_cocos2dx_if_CCLabelIFTTF_setString);
        tolua_function(tolua_S,"setOpacity",lua_cocos2dx_if_CCLabelIFTTF_setOpacity);
        tolua_function(tolua_S,"setDimensions",lua_cocos2dx_if_CCLabelIFTTF_setDimensions);
        tolua_function(tolua_S,"setHorizontalAlignment",lua_cocos2dx_if_CCLabelIFTTF_setHorizontalAlignment);
        tolua_function(tolua_S,"setVerticalAlignment",lua_cocos2dx_if_CCLabelIFTTF_setVerticalAlignment);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_CCLabelIFTTF_init);
        tolua_function(tolua_S,"getFontSize",lua_cocos2dx_if_CCLabelIFTTF_getFontSize);
        tolua_function(tolua_S,"setFontSize",lua_cocos2dx_if_CCLabelIFTTF_setFontSize);
        tolua_function(tolua_S,"setFntFile",lua_cocos2dx_if_CCLabelIFTTF_setFntFile);
        tolua_function(tolua_S,"setAlignment",lua_cocos2dx_if_CCLabelIFTTF_setAlignment);
        tolua_function(tolua_S,"getFontName",lua_cocos2dx_if_CCLabelIFTTF_getFontName);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCLabelIFTTF_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCLabelIFTTF).name();
    g_luaType[typeName] = "CCLabelIFTTF";
    g_typeCast["CCLabelIFTTF"] = "CCLabelIFTTF";
    return 1;
}

int lua_cocos2dx_if_CCLabelIF_setAnchorPoint(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setAnchorPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "cc.CCLabelIF:setAnchorPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setAnchorPoint'", nullptr);
            return 0;
        }
        cobj->setAnchorPoint(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setAnchorPoint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setAnchorPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setDimensions(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setDimensions'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        ok &= luaval_to_size(tolua_S, 2, &arg0, "cc.CCLabelIF:setDimensions");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setDimensions'", nullptr);
            return 0;
        }
        cobj->setDimensions(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setDimensions",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setDimensions'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getFontSize(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getFontSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getFontSize'", nullptr);
            return 0;
        }
        double ret = cobj->getFontSize();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getFontSize",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getFontSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getString(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getString'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getString'", nullptr);
            return 0;
        }
        const std::string& ret = cobj->getString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getString",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getTexture(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getTexture'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getTexture'", nullptr);
            return 0;
        }
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_luaval<cocos2d::Texture2D>(tolua_S, "cc.Texture2D",(cocos2d::Texture2D*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getTexture",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getTexture'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setScale(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setScale'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCLabelIF:setScale");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setScale'", nullptr);
            return 0;
        }
        cobj->setScale(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setScale",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setScale'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setOpacity(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setOpacity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= luaval_to_uint16(tolua_S, 2,&arg0, "cc.CCLabelIF:setOpacity");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setOpacity'", nullptr);
            return 0;
        }
        cobj->setOpacity(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setOpacity",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setOpacity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setCascadeOpacityEnabled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setCascadeOpacityEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCLabelIF:setCascadeOpacityEnabled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setCascadeOpacityEnabled'", nullptr);
            return 0;
        }
        cobj->setCascadeOpacityEnabled(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setCascadeOpacityEnabled",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setCascadeOpacityEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getOriginScaleY(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getOriginScaleY'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getOriginScaleY'", nullptr);
            return 0;
        }
        double ret = cobj->getOriginScaleY();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getOriginScaleY",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getOriginScaleY'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getOriginScaleX(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getOriginScaleX'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getOriginScaleX'", nullptr);
            return 0;
        }
        double ret = cobj->getOriginScaleX();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getOriginScaleX",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getOriginScaleX'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_isOpacityModifyRGB(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_isOpacityModifyRGB'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_isOpacityModifyRGB'", nullptr);
            return 0;
        }
        bool ret = cobj->isOpacityModifyRGB();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:isOpacityModifyRGB",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_isOpacityModifyRGB'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getScaleY(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getScaleY'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getScaleY'", nullptr);
            return 0;
        }
        double ret = cobj->getScaleY();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getScaleY",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getScaleY'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getScaleX(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getScaleX'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getScaleX'", nullptr);
            return 0;
        }
        double ret = cobj->getScaleX();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getScaleX",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getScaleX'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setString(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setString'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:setString"); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            cobj->setString(arg0);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            std::string arg0;
            ok &= luaval_to_std_string(tolua_S, 2,&arg0, "cc.CCLabelIF:setString");

            if (!ok) { break; }
            cobj->setString(arg0);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "cc.CCLabelIF:setString",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setCascadeColorEnabled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setCascadeColorEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCLabelIF:setCascadeColorEnabled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setCascadeColorEnabled'", nullptr);
            return 0;
        }
        cobj->setCascadeColorEnabled(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setCascadeColorEnabled",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setCascadeColorEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setOpacityModifyRGB(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setOpacityModifyRGB'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCLabelIF:setOpacityModifyRGB");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setOpacityModifyRGB'", nullptr);
            return 0;
        }
        cobj->setOpacityModifyRGB(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setOpacityModifyRGB",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setOpacityModifyRGB'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_updateDisplayedOpacity(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_updateDisplayedOpacity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= luaval_to_uint16(tolua_S, 2,&arg0, "cc.CCLabelIF:updateDisplayedOpacity");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_updateDisplayedOpacity'", nullptr);
            return 0;
        }
        cobj->updateDisplayedOpacity(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:updateDisplayedOpacity",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_updateDisplayedOpacity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_init(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getContentSize(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getContentSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getContentSize'", nullptr);
            return 0;
        }
        const cocos2d::Size& ret = cobj->getContentSize();
        size_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getContentSize",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getContentSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getColor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getColor'", nullptr);
            return 0;
        }
        const cocos2d::Color3B& ret = cobj->getColor();
        color3b_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getColor",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setFntFile(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setFntFile'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:setFntFile"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setFntFile'", nullptr);
            return 0;
        }
        cobj->setFntFile(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setFntFile",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setFntFile'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getOpacity(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getOpacity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getOpacity'", nullptr);
            return 0;
        }
        uint16_t ret = cobj->getOpacity();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getOpacity",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getOpacity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getFontControl(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getFontControl'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getFontControl'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getFontControl();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getFontControl",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getFontControl'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getFontName(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getFontName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getFontName'", nullptr);
            return 0;
        }
        const char* ret = cobj->getFontName();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getFontName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getFontName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setScaleY(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setScaleY'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCLabelIF:setScaleY");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setScaleY'", nullptr);
            return 0;
        }
        cobj->setScaleY(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setScaleY",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setScaleY'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setScaleX(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setScaleX'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCLabelIF:setScaleX");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setScaleX'", nullptr);
            return 0;
        }
        cobj->setScaleX(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setScaleX",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setScaleX'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_enableStroke(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_enableStroke'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Color3B arg0;
        double arg1;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "cc.CCLabelIF:enableStroke");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "cc.CCLabelIF:enableStroke");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_enableStroke'", nullptr);
            return 0;
        }
        cobj->enableStroke(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        cocos2d::Color3B arg0;
        double arg1;
        bool arg2;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "cc.CCLabelIF:enableStroke");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "cc.CCLabelIF:enableStroke");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "cc.CCLabelIF:enableStroke");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_enableStroke'", nullptr);
            return 0;
        }
        cobj->enableStroke(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:enableStroke",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_enableStroke'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getDisplayedOpacity(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getDisplayedOpacity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getDisplayedOpacity'", nullptr);
            return 0;
        }
        uint16_t ret = cobj->getDisplayedOpacity();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getDisplayedOpacity",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getDisplayedOpacity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setVerticalAlignment(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setVerticalAlignment'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::TextVAlignment arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCLabelIF:setVerticalAlignment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setVerticalAlignment'", nullptr);
            return 0;
        }
        cobj->setVerticalAlignment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setVerticalAlignment",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setVerticalAlignment'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setFontSize(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setFontSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCLabelIF:setFontSize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setFontSize'", nullptr);
            return 0;
        }
        cobj->setFontSize(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setFontSize",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setFontSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_boundingBox(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_boundingBox'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_boundingBox'", nullptr);
            return 0;
        }
        cocos2d::Rect ret = cobj->boundingBox();
        rect_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:boundingBox",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_boundingBox'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getScale(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getScale'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getScale'", nullptr);
            return 0;
        }
        double ret = cobj->getScale();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getScale",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getScale'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getParent(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getParent'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getParent'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getParent();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getParent",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getParent'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getIBMDescription(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getIBMDescription'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getIBMDescription'", nullptr);
            return 0;
        }
        std::string ret = cobj->getIBMDescription();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getIBMDescription",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getIBMDescription'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setColor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "cc.CCLabelIF:setColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setColor'", nullptr);
            return 0;
        }
        cobj->setColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_getDisplayedColor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_getDisplayedColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_getDisplayedColor'", nullptr);
            return 0;
        }
        const cocos2d::Color3B& ret = cobj->getDisplayedColor();
        color3b_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:getDisplayedColor",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_getDisplayedColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_isCascadeOpacityEnabled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_isCascadeOpacityEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_isCascadeOpacityEnabled'", nullptr);
            return 0;
        }
        bool ret = cobj->isCascadeOpacityEnabled();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:isCascadeOpacityEnabled",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_isCascadeOpacityEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setHorizontalAlignment(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setHorizontalAlignment'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::TextHAlignment arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCLabelIF:setHorizontalAlignment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setHorizontalAlignment'", nullptr);
            return 0;
        }
        cobj->setHorizontalAlignment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setHorizontalAlignment",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setHorizontalAlignment'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setMaxScaleXByWidth(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setMaxScaleXByWidth'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCLabelIF:setMaxScaleXByWidth");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setMaxScaleXByWidth'", nullptr);
            return 0;
        }
        cobj->setMaxScaleXByWidth(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setMaxScaleXByWidth",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setMaxScaleXByWidth'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_isCascadeColorEnabled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_isCascadeColorEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_isCascadeColorEnabled'", nullptr);
            return 0;
        }
        bool ret = cobj->isCascadeColorEnabled();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:isCascadeColorEnabled",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_isCascadeColorEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_updateDisplayedColor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_updateDisplayedColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "cc.CCLabelIF:updateDisplayedColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_updateDisplayedColor'", nullptr);
            return 0;
        }
        cobj->updateDisplayedColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:updateDisplayedColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_updateDisplayedColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_setAlignment(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelIF* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelIF*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelIF_setAlignment'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::TextHAlignment arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCLabelIF:setAlignment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_setAlignment'", nullptr);
            return 0;
        }
        cobj->setAlignment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelIF:setAlignment",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_setAlignment'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelIF_enableRichFont(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCLabelIF:enableRichFont");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_enableRichFont'", nullptr);
            return 0;
        }
        cocos2d::CCLabelIF::enableRichFont(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCLabelIF:enableRichFont",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_enableRichFont'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLabelIF_canUseRich(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "cc.CCLabelIF:canUseRich");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_canUseRich'", nullptr);
            return 0;
        }
        bool ret = cocos2d::CCLabelIF::canUseRich(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCLabelIF:canUseRich",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_canUseRich'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLabelIF_enableBmFont(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCLabelIF:enableBmFont");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_enableBmFont'", nullptr);
            return 0;
        }
        cocos2d::CCLabelIF::enableBmFont(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCLabelIF:enableBmFont",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_enableBmFont'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLabelIF_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 1)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 0)
        {
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create();
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            double arg1;
            ok &= luaval_to_number(tolua_S, 3,&arg1, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "cc.CCLabelIF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 3)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "cc.CCLabelIF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1, arg2);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 3)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            double arg1;
            ok &= luaval_to_number(tolua_S, 3,&arg1, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1, arg2);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 4)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "cc.CCLabelIF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1, arg2, arg3);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 5)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            const char* arg1;
            std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "cc.CCLabelIF:create"); arg1 = arg1_tmp.c_str();
            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::Vec2 arg4;
            ok &= luaval_to_vec2(tolua_S, 6, &arg4, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1, arg2, arg3, arg4);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 5)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelIF:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            double arg1;
            ok &= luaval_to_number(tolua_S, 3,&arg1, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::Size arg2;
            ok &= luaval_to_size(tolua_S, 4, &arg2, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::TextHAlignment arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::TextVAlignment arg4;
            ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "cc.CCLabelIF:create");
            if (!ok) { break; }
            cocos2d::CCLabelIF* ret = cocos2d::CCLabelIF::create(arg0, arg1, arg2, arg3, arg4);
            object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "cc.CCLabelIF:create",argc, 5);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLabelIF_canBeSupportedWithBmpFont(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "cc.CCLabelIF:canBeSupportedWithBmpFont");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_canBeSupportedWithBmpFont'", nullptr);
            return 0;
        }
        bool ret = cocos2d::CCLabelIF::canBeSupportedWithBmpFont(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCLabelIF:canBeSupportedWithBmpFont",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_canBeSupportedWithBmpFont'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLabelIF_initFont(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelIF",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelIF_initFont'", nullptr);
            return 0;
        }
        cocos2d::CCLabelIF::initFont();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCLabelIF:initFont",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelIF_initFont'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCLabelIF_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCLabelIF)");
    return 0;
}

int lua_register_cocos2dx_if_CCLabelIF(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCLabelIF");
    tolua_cclass(tolua_S,"CCLabelIF","cc.CCLabelIF","cc.CCNode",nullptr);

    tolua_beginmodule(tolua_S,"CCLabelIF");
        tolua_function(tolua_S,"setAnchorPoint",lua_cocos2dx_if_CCLabelIF_setAnchorPoint);
        tolua_function(tolua_S,"setDimensions",lua_cocos2dx_if_CCLabelIF_setDimensions);
        tolua_function(tolua_S,"getFontSize",lua_cocos2dx_if_CCLabelIF_getFontSize);
        tolua_function(tolua_S,"getString",lua_cocos2dx_if_CCLabelIF_getString);
        tolua_function(tolua_S,"getTexture",lua_cocos2dx_if_CCLabelIF_getTexture);
        tolua_function(tolua_S,"setScale",lua_cocos2dx_if_CCLabelIF_setScale);
        tolua_function(tolua_S,"setOpacity",lua_cocos2dx_if_CCLabelIF_setOpacity);
        tolua_function(tolua_S,"setCascadeOpacityEnabled",lua_cocos2dx_if_CCLabelIF_setCascadeOpacityEnabled);
        tolua_function(tolua_S,"getOriginScaleY",lua_cocos2dx_if_CCLabelIF_getOriginScaleY);
        tolua_function(tolua_S,"getOriginScaleX",lua_cocos2dx_if_CCLabelIF_getOriginScaleX);
        tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_if_CCLabelIF_isOpacityModifyRGB);
        tolua_function(tolua_S,"getScaleY",lua_cocos2dx_if_CCLabelIF_getScaleY);
        tolua_function(tolua_S,"getScaleX",lua_cocos2dx_if_CCLabelIF_getScaleX);
        tolua_function(tolua_S,"setString",lua_cocos2dx_if_CCLabelIF_setString);
        tolua_function(tolua_S,"setCascadeColorEnabled",lua_cocos2dx_if_CCLabelIF_setCascadeColorEnabled);
        tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_if_CCLabelIF_setOpacityModifyRGB);
        tolua_function(tolua_S,"updateDisplayedOpacity",lua_cocos2dx_if_CCLabelIF_updateDisplayedOpacity);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_CCLabelIF_init);
        tolua_function(tolua_S,"getContentSize",lua_cocos2dx_if_CCLabelIF_getContentSize);
        tolua_function(tolua_S,"getColor",lua_cocos2dx_if_CCLabelIF_getColor);
        tolua_function(tolua_S,"setFntFile",lua_cocos2dx_if_CCLabelIF_setFntFile);
        tolua_function(tolua_S,"getOpacity",lua_cocos2dx_if_CCLabelIF_getOpacity);
        tolua_function(tolua_S,"getFontControl",lua_cocos2dx_if_CCLabelIF_getFontControl);
        tolua_function(tolua_S,"getFontName",lua_cocos2dx_if_CCLabelIF_getFontName);
        tolua_function(tolua_S,"setScaleY",lua_cocos2dx_if_CCLabelIF_setScaleY);
        tolua_function(tolua_S,"setScaleX",lua_cocos2dx_if_CCLabelIF_setScaleX);
        tolua_function(tolua_S,"enableStroke",lua_cocos2dx_if_CCLabelIF_enableStroke);
        tolua_function(tolua_S,"getDisplayedOpacity",lua_cocos2dx_if_CCLabelIF_getDisplayedOpacity);
        tolua_function(tolua_S,"setVerticalAlignment",lua_cocos2dx_if_CCLabelIF_setVerticalAlignment);
        tolua_function(tolua_S,"setFontSize",lua_cocos2dx_if_CCLabelIF_setFontSize);
        tolua_function(tolua_S,"boundingBox",lua_cocos2dx_if_CCLabelIF_boundingBox);
        tolua_function(tolua_S,"getScale",lua_cocos2dx_if_CCLabelIF_getScale);
        tolua_function(tolua_S,"getParent",lua_cocos2dx_if_CCLabelIF_getParent);
        tolua_function(tolua_S,"getIBMDescription",lua_cocos2dx_if_CCLabelIF_getIBMDescription);
        tolua_function(tolua_S,"setColor",lua_cocos2dx_if_CCLabelIF_setColor);
        tolua_function(tolua_S,"getDisplayedColor",lua_cocos2dx_if_CCLabelIF_getDisplayedColor);
        tolua_function(tolua_S,"isCascadeOpacityEnabled",lua_cocos2dx_if_CCLabelIF_isCascadeOpacityEnabled);
        tolua_function(tolua_S,"setHorizontalAlignment",lua_cocos2dx_if_CCLabelIF_setHorizontalAlignment);
        tolua_function(tolua_S,"setMaxScaleXByWidth",lua_cocos2dx_if_CCLabelIF_setMaxScaleXByWidth);
        tolua_function(tolua_S,"isCascadeColorEnabled",lua_cocos2dx_if_CCLabelIF_isCascadeColorEnabled);
        tolua_function(tolua_S,"updateDisplayedColor",lua_cocos2dx_if_CCLabelIF_updateDisplayedColor);
        tolua_function(tolua_S,"setAlignment",lua_cocos2dx_if_CCLabelIF_setAlignment);
        tolua_function(tolua_S,"enableRichFont", lua_cocos2dx_if_CCLabelIF_enableRichFont);
        tolua_function(tolua_S,"canUseRich", lua_cocos2dx_if_CCLabelIF_canUseRich);
        tolua_function(tolua_S,"enableBmFont", lua_cocos2dx_if_CCLabelIF_enableBmFont);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCLabelIF_create);
        tolua_function(tolua_S,"canBeSupportedWithBmpFont", lua_cocos2dx_if_CCLabelIF_canBeSupportedWithBmpFont);
        tolua_function(tolua_S,"initFont", lua_cocos2dx_if_CCLabelIF_initFont);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::CCLabelIF).name();
    g_luaType[typeName] = "cc.CCLabelIF";
    g_typeCast["CCLabelIF"] = "cc.CCLabelIF";
    return 1;
}

int lua_cocos2dx_if_CCFloatingText_getFadeOut(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_getFadeOut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_getFadeOut'", nullptr);
            return 0;
        }
        double ret = cobj->getFadeOut();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:getFadeOut",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_getFadeOut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setFadeOut(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setFadeOut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCFloatingText:setFadeOut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setFadeOut'", nullptr);
            return 0;
        }
        cobj->setFadeOut(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setFadeOut",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setFadeOut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setColor(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "CCFloatingText:setColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setColor'", nullptr);
            return 0;
        }
        cobj->setColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_getDelay(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_getDelay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_getDelay'", nullptr);
            return 0;
        }
        double ret = cobj->getDelay();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:getDelay",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_getDelay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setCurValueStr(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setCurValueStr'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCFloatingText:setCurValueStr"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setCurValueStr'", nullptr);
            return 0;
        }
        cobj->setCurValueStr(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setCurValueStr",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setCurValueStr'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_getActionScale(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_getActionScale'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_getActionScale'", nullptr);
            return 0;
        }
        double ret = cobj->getActionScale();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:getActionScale",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_getActionScale'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_initWithString(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_initWithString'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCFloatingText:initWithString"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_initWithString'", nullptr);
            return 0;
        }
        bool ret = cobj->initWithString(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:initWithString",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_initWithString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_getFloatingType(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_getFloatingType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_getFloatingType'", nullptr);
            return 0;
        }
        int ret = (int)cobj->getFloatingType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:getFloatingType",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_getFloatingType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setFloatingType(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setFloatingType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        FloatingTypeEnum arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCFloatingText:setFloatingType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setFloatingType'", nullptr);
            return 0;
        }
        cobj->setFloatingType(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setFloatingType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setFloatingType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setActionScale(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setActionScale'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCFloatingText:setActionScale");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setActionScale'", nullptr);
            return 0;
        }
        cobj->setActionScale(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setActionScale",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setActionScale'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_startAnimation(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_startAnimation'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_startAnimation'", nullptr);
            return 0;
        }
        cobj->startAnimation();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:startAnimation",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_startAnimation'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_drawString(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_drawString'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCFloatingText:drawString"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_drawString'", nullptr);
            return 0;
        }
        cobj->drawString(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:drawString",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_drawString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setMoveByPos(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setMoveByPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "CCFloatingText:setMoveByPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setMoveByPos'", nullptr);
            return 0;
        }
        cobj->setMoveByPos(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setMoveByPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setMoveByPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_removeObject(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_removeObject'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_removeObject'", nullptr);
            return 0;
        }
        cobj->removeObject();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:removeObject",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_removeObject'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_getMoveByPos(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_getMoveByPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_getMoveByPos'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getMoveByPos();
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:getMoveByPos",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_getMoveByPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setDuration(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setDuration'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCFloatingText:setDuration");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setDuration'", nullptr);
            return 0;
        }
        cobj->setDuration(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setDuration",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setDuration'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_setDelay(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_setDelay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCFloatingText:setDelay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_setDelay'", nullptr);
            return 0;
        }
        cobj->setDelay(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:setDelay",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_setDelay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_getDuration(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCFloatingText*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCFloatingText_getDuration'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_getDuration'", nullptr);
            return 0;
        }
        double ret = cobj->getDuration();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:getDuration",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_getDuration'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCFloatingText_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCFloatingText",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 1)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCFloatingText:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            CCFloatingText* ret = CCFloatingText::create(arg0);
            object_to_luaval<CCFloatingText>(tolua_S, "CCFloatingText",(CCFloatingText*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCFloatingText:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCFloatingText:create");
            if (!ok) { break; }
            CCFloatingText* ret = CCFloatingText::create(arg0, arg1);
            object_to_luaval<CCFloatingText>(tolua_S, "CCFloatingText",(CCFloatingText*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCFloatingText:create");
            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCFloatingText:create");
            if (!ok) { break; }
            CCFloatingText* ret = CCFloatingText::create(arg0, arg1);
            object_to_luaval<CCFloatingText>(tolua_S, "CCFloatingText",(CCFloatingText*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 0)
        {
            CCFloatingText* ret = CCFloatingText::create();
            object_to_luaval<CCFloatingText>(tolua_S, "CCFloatingText",(CCFloatingText*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "CCFloatingText:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCFloatingText_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CCFloatingText* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCFloatingText_constructor'", nullptr);
            return 0;
        }
        cobj = new CCFloatingText();
        tolua_pushusertype(tolua_S,(void*)cobj,"CCFloatingText");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCFloatingText:CCFloatingText",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCFloatingText_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCFloatingText_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCFloatingText)");
    return 0;
}

int lua_register_cocos2dx_if_CCFloatingText(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCFloatingText");
    tolua_cclass(tolua_S,"CCFloatingText","CCFloatingText","cc.CCSprite",nullptr);

    tolua_beginmodule(tolua_S,"CCFloatingText");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCFloatingText_constructor);
        tolua_function(tolua_S,"getFadeOut",lua_cocos2dx_if_CCFloatingText_getFadeOut);
        tolua_function(tolua_S,"setFadeOut",lua_cocos2dx_if_CCFloatingText_setFadeOut);
        tolua_function(tolua_S,"setColor",lua_cocos2dx_if_CCFloatingText_setColor);
        tolua_function(tolua_S,"getDelay",lua_cocos2dx_if_CCFloatingText_getDelay);
        tolua_function(tolua_S,"setCurValueStr",lua_cocos2dx_if_CCFloatingText_setCurValueStr);
        tolua_function(tolua_S,"getActionScale",lua_cocos2dx_if_CCFloatingText_getActionScale);
        tolua_function(tolua_S,"initWithString",lua_cocos2dx_if_CCFloatingText_initWithString);
        tolua_function(tolua_S,"getFloatingType",lua_cocos2dx_if_CCFloatingText_getFloatingType);
        tolua_function(tolua_S,"setFloatingType",lua_cocos2dx_if_CCFloatingText_setFloatingType);
        tolua_function(tolua_S,"setActionScale",lua_cocos2dx_if_CCFloatingText_setActionScale);
        tolua_function(tolua_S,"startAnimation",lua_cocos2dx_if_CCFloatingText_startAnimation);
        tolua_function(tolua_S,"drawString",lua_cocos2dx_if_CCFloatingText_drawString);
        tolua_function(tolua_S,"setMoveByPos",lua_cocos2dx_if_CCFloatingText_setMoveByPos);
        tolua_function(tolua_S,"removeObject",lua_cocos2dx_if_CCFloatingText_removeObject);
        tolua_function(tolua_S,"getMoveByPos",lua_cocos2dx_if_CCFloatingText_getMoveByPos);
        tolua_function(tolua_S,"setDuration",lua_cocos2dx_if_CCFloatingText_setDuration);
        tolua_function(tolua_S,"setDelay",lua_cocos2dx_if_CCFloatingText_setDelay);
        tolua_function(tolua_S,"getDuration",lua_cocos2dx_if_CCFloatingText_getDuration);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCFloatingText_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCFloatingText).name();
    g_luaType[typeName] = "CCFloatingText";
    g_typeCast["CCFloatingText"] = "CCFloatingText";
    return 1;
}

int lua_cocos2dx_if_AllianceInfo_getSelfAllianceNum(lua_State* tolua_S)
{
    int argc = 0;
    AllianceInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"AllianceInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (AllianceInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_AllianceInfo_getSelfAllianceNum'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_AllianceInfo_getSelfAllianceNum'", nullptr);
            return 0;
        }
        int ret = cobj->getSelfAllianceNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "AllianceInfo:getSelfAllianceNum",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_AllianceInfo_getSelfAllianceNum'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_AllianceInfo_getAllianceIcon(lua_State* tolua_S)
{
    int argc = 0;
    AllianceInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"AllianceInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (AllianceInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_AllianceInfo_getAllianceIcon'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_AllianceInfo_getAllianceIcon'", nullptr);
            return 0;
        }
        std::string ret = cobj->getAllianceIcon();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "AllianceInfo:getAllianceIcon",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_AllianceInfo_getAllianceIcon'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_AllianceInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    AllianceInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_AllianceInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new AllianceInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"AllianceInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "AllianceInfo:AllianceInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_AllianceInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_AllianceInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (AllianceInfo)");
    return 0;
}

static int lua_cocos2dx_if_AllianceInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	AllianceInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"AllianceInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_AllianceInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (AllianceInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "name") == 0){
		lua_pushstring(tolua_S, cobj->name.c_str());
	}else if (strcmp(property.c_str(), "shortName") == 0){
		lua_pushstring(tolua_S, cobj->shortName.c_str());
	}else if (strcmp(property.c_str(), "currentNum") == 0){
		lua_pushinteger(tolua_S, cobj->currentNum);
	}else if (strcmp(property.c_str(), "maxNum") == 0){
		lua_pushinteger(tolua_S, cobj->maxNum);
	}else if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "language") == 0){
		lua_pushstring(tolua_S, cobj->language.c_str());
	}else if (strcmp(property.c_str(), "totalForce") == 0){
		lua_pushnumber(tolua_S, cobj->totalForce);
	}else if (strcmp(property.c_str(), "kills") == 0){
		lua_pushinteger(tolua_S, cobj->kills);
	}else if (strcmp(property.c_str(), "isApplied") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isApplied);
	}else if (strcmp(property.c_str(), "fightpower") == 0){
		lua_pushnumber(tolua_S, cobj->fightpower);
	}else if (strcmp(property.c_str(), "giftexp1") == 0){
		lua_pushinteger(tolua_S, cobj->giftexp1);
	}else if (strcmp(property.c_str(), "giftexp2") == 0){
		lua_pushinteger(tolua_S, cobj->giftexp2);
	}else if (strcmp(property.c_str(), "giftexp3") == 0){
		lua_pushinteger(tolua_S, cobj->giftexp3);
	}else if (strcmp(property.c_str(), "giftexp4") == 0){
		lua_pushinteger(tolua_S, cobj->giftexp4);
	}else if (strcmp(property.c_str(), "giftexp5") == 0){
		lua_pushinteger(tolua_S, cobj->giftexp5);
	}else if (strcmp(property.c_str(), "giftexp6") == 0){
		lua_pushinteger(tolua_S, cobj->giftexp6);
	}else if (strcmp(property.c_str(), "uid") == 0){
		lua_pushstring(tolua_S, cobj->uid.c_str());
	}else if (strcmp(property.c_str(), "icon") == 0){
		lua_pushstring(tolua_S, cobj->icon.c_str());
	}else if (strcmp(property.c_str(), "country") == 0){
		lua_pushstring(tolua_S, cobj->country.c_str());
	}else if (strcmp(property.c_str(), "recruit") == 0){
		lua_pushinteger(tolua_S, cobj->recruit);
	}else if (strcmp(property.c_str(), "leaderUid") == 0){
		lua_pushstring(tolua_S, cobj->leaderUid.c_str());
	}else if (strcmp(property.c_str(), "leader") == 0){
		lua_pushstring(tolua_S, cobj->leader.c_str());
	}else if (strcmp(property.c_str(), "join") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->join);
	}else if (strcmp(property.c_str(), "rank") == 0){
		lua_pushinteger(tolua_S, cobj->rank);
	}else if (strcmp(property.c_str(), "giftlevel") == 0){
		lua_pushinteger(tolua_S, cobj->giftlevel);
	}else if (strcmp(property.c_str(), "currentGiftExp") == 0){
		lua_pushinteger(tolua_S, cobj->currentGiftExp);
	}else if (strcmp(property.c_str(), "reicon") == 0){
		lua_pushinteger(tolua_S, cobj->reicon);
	}else if (strcmp(property.c_str(), "currentGiftLevel") == 0){
		lua_pushinteger(tolua_S, cobj->currentGiftLevel);
	}else if (strcmp(property.c_str(), "helpcount") == 0){
		lua_pushinteger(tolua_S, cobj->helpcount);
	}else if (strcmp(property.c_str(), "giftNextExp") == 0){
		lua_pushinteger(tolua_S, cobj->giftNextExp);
	}else if (strcmp(property.c_str(), "intro") == 0){
		lua_pushstring(tolua_S, cobj->intro.c_str());
	}else if (strcmp(property.c_str(), "powerRestriction") == 0){
		lua_pushnumber(tolua_S, cobj->powerRestriction);
	}else if (strcmp(property.c_str(), "castleRestriction") == 0){
		lua_pushinteger(tolua_S, cobj->castleRestriction);
	}else if (strcmp(property.c_str(), "announce") == 0){
		lua_pushstring(tolua_S, cobj->announce.c_str());
	}else if (strcmp(property.c_str(), "strRank1") == 0){
		lua_pushstring(tolua_S, cobj->strRank1.c_str());
	}else if (strcmp(property.c_str(), "strRank2") == 0){
		lua_pushstring(tolua_S, cobj->strRank2.c_str());
	}else if (strcmp(property.c_str(), "strRank3") == 0){
		lua_pushstring(tolua_S, cobj->strRank3.c_str());
	}else if (strcmp(property.c_str(), "strRank4") == 0){
		lua_pushstring(tolua_S, cobj->strRank4.c_str());
	}else if (strcmp(property.c_str(), "strRank5") == 0){
		lua_pushstring(tolua_S, cobj->strRank5.c_str());
	}else if (strcmp(property.c_str(), "militaryNum") == 0){
		lua_pushinteger(tolua_S, cobj->militaryNum);
	}else if (strcmp(property.c_str(), "serverId") == 0){
		lua_pushinteger(tolua_S, cobj->serverId);
	}else if (strcmp(property.c_str(), "applyNum") == 0){
		lua_pushinteger(tolua_S, cobj->applyNum);
	}else if (strcmp(property.c_str(), "point") == 0){
		lua_pushinteger(tolua_S, cobj->point);
	}else if (strcmp(property.c_str(), "accPoint") == 0){
		lua_pushinteger(tolua_S, cobj->accPoint);
	}else if (strcmp(property.c_str(), "donateAvailable") == 0){
		lua_pushinteger(tolua_S, cobj->donateAvailable);
	}else if (strcmp(property.c_str(), "donateCDTime") == 0){
		lua_pushinteger(tolua_S, cobj->donateCDTime);
	}else if (strcmp(property.c_str(), "joinTime") == 0){
		lua_pushinteger(tolua_S, cobj->joinTime);
	}else if (strcmp(property.c_str(), "alliancepoint") == 0){
		lua_pushinteger(tolua_S, cobj->alliancepoint);
	}else if (strcmp(property.c_str(), "abbrRename") == 0){
		lua_pushinteger(tolua_S, cobj->abbrRename);
	}else if (strcmp(property.c_str(), "createTime") == 0){
		lua_pushnumber(tolua_S, cobj->createTime);
	}else if (strcmp(property.c_str(), "leaderPoint") == 0){
		lua_pushinteger(tolua_S, cobj->leaderPoint);
	}else if (strcmp(property.c_str(), "rallyPoint") == 0){
		lua_pushinteger(tolua_S, cobj->rallyPoint);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_AllianceInfo_newindex(lua_State* tolua_S)
{
	AllianceInfo* cobj = *(AllianceInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "name") == 0){
		cobj->name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shortName") == 0){
		cobj->shortName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentNum") == 0){
		cobj->currentNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "maxNum") == 0){
		cobj->maxNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "language") == 0){
		cobj->language= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "totalForce") == 0){
		cobj->totalForce= (unsigned long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "kills") == 0){
		cobj->kills= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isApplied") == 0){
		cobj->isApplied= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "fightpower") == 0){
		cobj->fightpower= (unsigned long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftexp1") == 0){
		cobj->giftexp1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftexp2") == 0){
		cobj->giftexp2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftexp3") == 0){
		cobj->giftexp3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftexp4") == 0){
		cobj->giftexp4= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftexp5") == 0){
		cobj->giftexp5= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftexp6") == 0){
		cobj->giftexp6= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "uid") == 0){
		cobj->uid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "icon") == 0){
		cobj->icon= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "country") == 0){
		cobj->country= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "recruit") == 0){
		cobj->recruit= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "leaderUid") == 0){
		cobj->leaderUid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "leader") == 0){
		cobj->leader= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "join") == 0){
		cobj->join= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "rank") == 0){
		cobj->rank= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftlevel") == 0){
		cobj->giftlevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentGiftExp") == 0){
		cobj->currentGiftExp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "reicon") == 0){
		cobj->reicon= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentGiftLevel") == 0){
		cobj->currentGiftLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "helpcount") == 0){
		cobj->helpcount= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "giftNextExp") == 0){
		cobj->giftNextExp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "intro") == 0){
		cobj->intro= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "powerRestriction") == 0){
		cobj->powerRestriction= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "castleRestriction") == 0){
		cobj->castleRestriction= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "announce") == 0){
		cobj->announce= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "strRank1") == 0){
		cobj->strRank1= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "strRank2") == 0){
		cobj->strRank2= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "strRank3") == 0){
		cobj->strRank3= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "strRank4") == 0){
		cobj->strRank4= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "strRank5") == 0){
		cobj->strRank5= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "militaryNum") == 0){
		cobj->militaryNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverId") == 0){
		cobj->serverId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "applyNum") == 0){
		cobj->applyNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "point") == 0){
		cobj->point= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "accPoint") == 0){
		cobj->accPoint= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "donateAvailable") == 0){
		cobj->donateAvailable= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "donateCDTime") == 0){
		cobj->donateCDTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "joinTime") == 0){
		cobj->joinTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliancepoint") == 0){
		cobj->alliancepoint= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "abbrRename") == 0){
		cobj->abbrRename= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "createTime") == 0){
		cobj->createTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "leaderPoint") == 0){
		cobj->leaderPoint= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "rallyPoint") == 0){
		cobj->rallyPoint= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_AllianceInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"AllianceInfo");
    tolua_cclass(tolua_S,"AllianceInfo","AllianceInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"AllianceInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_AllianceInfo_constructor);
        tolua_function(tolua_S,"getSelfAllianceNum",lua_cocos2dx_if_AllianceInfo_getSelfAllianceNum);
        tolua_function(tolua_S,"getAllianceIcon",lua_cocos2dx_if_AllianceInfo_getAllianceIcon);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_AllianceInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_AllianceInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(AllianceInfo).name();
    g_luaType[typeName] = "AllianceInfo";
    g_typeCast["AllianceInfo"] = "AllianceInfo";
    return 1;
}

int lua_cocos2dx_if_UserPlatformInfo_getBindName(lua_State* tolua_S)
{
    int argc = 0;
    UserPlatformInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"UserPlatformInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (UserPlatformInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_UserPlatformInfo_getBindName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_UserPlatformInfo_getBindName'", nullptr);
            return 0;
        }
        std::string ret = cobj->getBindName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "UserPlatformInfo:getBindName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_UserPlatformInfo_getBindName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_UserPlatformInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    UserPlatformInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_UserPlatformInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new UserPlatformInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"UserPlatformInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "UserPlatformInfo:UserPlatformInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_UserPlatformInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_UserPlatformInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (UserPlatformInfo)");
    return 0;
}

static int lua_cocos2dx_if_UserPlatformInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	UserPlatformInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"UserPlatformInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_UserPlatformInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (UserPlatformInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "bindPf") == 0){
		lua_pushstring(tolua_S, cobj->bindPf.c_str());
	}else if (strcmp(property.c_str(), "bindId") == 0){
		lua_pushstring(tolua_S, cobj->bindId.c_str());
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_UserPlatformInfo_newindex(lua_State* tolua_S)
{
	UserPlatformInfo* cobj = *(UserPlatformInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "bindPf") == 0){
		cobj->bindPf= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bindId") == 0){
		cobj->bindId= (string)lua_tostring(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_UserPlatformInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"UserPlatformInfo");
    tolua_cclass(tolua_S,"UserPlatformInfo","UserPlatformInfo","",nullptr);

    tolua_beginmodule(tolua_S,"UserPlatformInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_UserPlatformInfo_constructor);
        tolua_function(tolua_S,"getBindName",lua_cocos2dx_if_UserPlatformInfo_getBindName);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_UserPlatformInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_UserPlatformInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(UserPlatformInfo).name();
    g_luaType[typeName] = "UserPlatformInfo";
    g_typeCast["UserPlatformInfo"] = "UserPlatformInfo";
    return 1;
}

int lua_cocos2dx_if_PlayerInfo_setGenerals(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_setGenerals'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "PlayerInfo:setGenerals");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_setGenerals'", nullptr);
            return 0;
        }
        cobj->setGenerals(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:setGenerals",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_setGenerals'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_isInAlliance(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_isInAlliance'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_isInAlliance'", nullptr);
            return 0;
        }
        bool ret = cobj->isInAlliance();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:isInAlliance",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_isInAlliance'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getAttributeByKey(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getAttributeByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PlayerInfo:getAttributeByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getAttributeByKey'", nullptr);
            return 0;
        }
        int ret = cobj->getAttributeByKey(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getAttributeByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getAttributeByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_isInSelfServer(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_isInSelfServer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_isInSelfServer'", nullptr);
            return 0;
        }
        bool ret = cobj->isInSelfServer();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:isInSelfServer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_isInSelfServer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getAllianceId(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getAllianceId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getAllianceId'", nullptr);
            return 0;
        }
        std::string ret = cobj->getAllianceId();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getAllianceId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getAllianceId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_isMOD(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_isMOD'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_isMOD'", nullptr);
            return 0;
        }
        bool ret = cobj->isMOD();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:isMOD",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_isMOD'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getBodyPic(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getBodyPic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getBodyPic'", nullptr);
            return 0;
        }
        std::string ret = cobj->getBodyPic();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getBodyPic",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getBodyPic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getGenerals(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getGenerals'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getGenerals'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getGenerals();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getGenerals",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getGenerals'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_setAllianceId(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_setAllianceId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PlayerInfo:setAllianceId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_setAllianceId'", nullptr);
            return 0;
        }
        cobj->setAllianceId(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:setAllianceId",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_setAllianceId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getPic(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getPic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getPic'", nullptr);
            return 0;
        }
        std::string ret = cobj->getPic();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getPic",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getPic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getCustomPicUrl(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getCustomPicUrl'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getCustomPicUrl'", nullptr);
            return 0;
        }
        std::string ret = cobj->getCustomPicUrl();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getCustomPicUrl",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getCustomPicUrl'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_setAllianceRank(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_setAllianceRank'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PlayerInfo:setAllianceRank");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_setAllianceRank'", nullptr);
            return 0;
        }
        cobj->setAllianceRank(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:setAllianceRank",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_setAllianceRank'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getTotalPower(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getTotalPower'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getTotalPower'", nullptr);
            return 0;
        }
        double ret = cobj->getTotalPower();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getTotalPower",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getTotalPower'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_getAllianceRank(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getAllianceRank'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_getAllianceRank'", nullptr);
            return 0;
        }
        int ret = cobj->getAllianceRank();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:getAllianceRank",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_getAllianceRank'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_isUseCustomPic(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_isUseCustomPic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_isUseCustomPic'", nullptr);
            return 0;
        }
        bool ret = cobj->isUseCustomPic();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:isUseCustomPic",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_isUseCustomPic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new PlayerInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"PlayerInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfo:PlayerInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_PlayerInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (PlayerInfo)");
    return 0;
}

static int lua_cocos2dx_if_PlayerInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	PlayerInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"PlayerInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (PlayerInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "name") == 0){
		lua_pushstring(tolua_S, cobj->name.c_str());
	}else if (strcmp(property.c_str(), "nickName") == 0){
		lua_pushstring(tolua_S, cobj->nickName.c_str());
	}else if (strcmp(property.c_str(), "uid") == 0){
		lua_pushstring(tolua_S, cobj->uid.c_str());
	}else if (strcmp(property.c_str(), "isPayFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isPayFlag);
	}else if (strcmp(property.c_str(), "pic") == 0){
		lua_pushstring(tolua_S, cobj->pic.c_str());
	}else if (strcmp(property.c_str(), "country") == 0){
		lua_pushinteger(tolua_S, cobj->country);
	}else if (strcmp(property.c_str(), "roomName") == 0){
		lua_pushstring(tolua_S, cobj->roomName.c_str());
	}else if (strcmp(property.c_str(), "buildcode") == 0){
		lua_pushstring(tolua_S, cobj->buildcode.c_str());
	}else if (strcmp(property.c_str(), "allianceRank") == 0){
		lua_pushinteger(tolua_S, cobj->allianceRank);
	}else if (strcmp(property.c_str(), "gold") == 0){
		lua_pushnumber(tolua_S, cobj->gold);
	}else if (strcmp(property.c_str(), "longJing") == 0){
		lua_pushnumber(tolua_S, cobj->longJing);
	}else if (strcmp(property.c_str(), "payTotal") == 0){
		lua_pushnumber(tolua_S, cobj->payTotal);
	}else if (strcmp(property.c_str(), "exp") == 0){
		lua_pushnumber(tolua_S, cobj->exp);
	}else if (strcmp(property.c_str(), "maxExp") == 0){
		lua_pushnumber(tolua_S, cobj->maxExp);
	}else if (strcmp(property.c_str(), "openedSystem") == 0){
		lua_pushstring(tolua_S, cobj->openedSystem.c_str());
	}else if (strcmp(property.c_str(), "gmFlag") == 0){
		lua_pushinteger(tolua_S, cobj->gmFlag);
	}else if (strcmp(property.c_str(), "renameTime") == 0){
		lua_pushinteger(tolua_S, cobj->renameTime);
	}else if (strcmp(property.c_str(), "protectTimeStamp") == 0){
		lua_pushnumber(tolua_S, cobj->protectTimeStamp);
	}else if (strcmp(property.c_str(), "resourceProtectTimeStamp") == 0){
		lua_pushnumber(tolua_S, cobj->resourceProtectTimeStamp);
	}else if (strcmp(property.c_str(), "vipPoints") == 0){
		lua_pushnumber(tolua_S, cobj->vipPoints);
	}else if (strcmp(property.c_str(), "vipEndTime") == 0){
		lua_pushnumber(tolua_S, cobj->vipEndTime);
	}else if (strcmp(property.c_str(), "nextDayLoginVipReward") == 0){
		lua_pushnumber(tolua_S, cobj->nextDayLoginVipReward);
	}else if (strcmp(property.c_str(), "consecutiveLoginDays") == 0){
		lua_pushinteger(tolua_S, cobj->consecutiveLoginDays);
	}else if (strcmp(property.c_str(), "SVIPPoint") == 0){
		lua_pushinteger(tolua_S, cobj->SVIPPoint);
	}else if (strcmp(property.c_str(), "SVIPLevel") == 0){
		lua_pushinteger(tolua_S, cobj->SVIPLevel);
	}else if (strcmp(property.c_str(), "registerTime") == 0){
		lua_pushnumber(tolua_S, cobj->registerTime);
	}else if (strcmp(property.c_str(), "regTime") == 0){
		lua_pushnumber(tolua_S, cobj->regTime);
	}else if (strcmp(property.c_str(), "sciencePower") == 0){
		lua_pushnumber(tolua_S, cobj->sciencePower);
	}else if (strcmp(property.c_str(), "battleLose") == 0){
		lua_pushinteger(tolua_S, cobj->battleLose);
	}else if (strcmp(property.c_str(), "armyDead") == 0){
		lua_pushinteger(tolua_S, cobj->armyDead);
	}else if (strcmp(property.c_str(), "armyPower") == 0){
		lua_pushnumber(tolua_S, cobj->armyPower);
	}else if (strcmp(property.c_str(), "fortPower") == 0){
		lua_pushnumber(tolua_S, cobj->fortPower);
	}else if (strcmp(property.c_str(), "armyCure") == 0){
		lua_pushnumber(tolua_S, cobj->armyCure);
	}else if (strcmp(property.c_str(), "questpower") == 0){
		lua_pushnumber(tolua_S, cobj->questpower);
	}else if (strcmp(property.c_str(), "playerPower") == 0){
		lua_pushnumber(tolua_S, cobj->playerPower);
	}else if (strcmp(property.c_str(), "armyKill") == 0){
		lua_pushinteger(tolua_S, cobj->armyKill);
	}else if (strcmp(property.c_str(), "buildingPower") == 0){
		lua_pushnumber(tolua_S, cobj->buildingPower);
	}else if (strcmp(property.c_str(), "equipPower") == 0){
		lua_pushnumber(tolua_S, cobj->equipPower);
	}else if (strcmp(property.c_str(), "knight_title") == 0){
		lua_pushnumber(tolua_S, cobj->knight_title);
	}else if (strcmp(property.c_str(), "defenseWin") == 0){
		lua_pushinteger(tolua_S, cobj->defenseWin);
	}else if (strcmp(property.c_str(), "heroPower") == 0){
		lua_pushnumber(tolua_S, cobj->heroPower);
	}else if (strcmp(property.c_str(), "attackLose") == 0){
		lua_pushinteger(tolua_S, cobj->attackLose);
	}else if (strcmp(property.c_str(), "detectNum") == 0){
		lua_pushinteger(tolua_S, cobj->detectNum);
	}else if (strcmp(property.c_str(), "attackWin") == 0){
		lua_pushinteger(tolua_S, cobj->attackWin);
	}else if (strcmp(property.c_str(), "battleWin") == 0){
		lua_pushinteger(tolua_S, cobj->battleWin);
	}else if (strcmp(property.c_str(), "power") == 0){
		lua_pushnumber(tolua_S, cobj->power);
	}else if (strcmp(property.c_str(), "isApplied") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isApplied);
	}else if (strcmp(property.c_str(), "invited") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->invited);
	}else if (strcmp(property.c_str(), "bindFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->bindFlag);
	}else if (strcmp(property.c_str(), "rank") == 0){
		lua_pushinteger(tolua_S, cobj->rank);
	}else if (strcmp(property.c_str(), "pointId") == 0){
		lua_pushinteger(tolua_S, cobj->pointId);
	}else if (strcmp(property.c_str(), "mainCityLv") == 0){
		lua_pushinteger(tolua_S, cobj->mainCityLv);
	}else if (strcmp(property.c_str(), "officer") == 0){
		lua_pushstring(tolua_S, cobj->officer.c_str());
	}else if (strcmp(property.c_str(), "relinquishFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->relinquishFlag);
	}else if (strcmp(property.c_str(), "relinquishEndTime") == 0){
		lua_pushnumber(tolua_S, cobj->relinquishEndTime);
	}else if (strcmp(property.c_str(), "pic_banTime") == 0){
		lua_pushnumber(tolua_S, cobj->pic_banTime);
	}else if (strcmp(property.c_str(), "pic_nextUpdateTime") == 0){
		lua_pushnumber(tolua_S, cobj->pic_nextUpdateTime);
	}else if (strcmp(property.c_str(), "pic_banCount") == 0){
		lua_pushinteger(tolua_S, cobj->pic_banCount);
	}else if (strcmp(property.c_str(), "lastBattlePower") == 0){
		lua_pushnumber(tolua_S, cobj->lastBattlePower);
	}else if (strcmp(property.c_str(), "battlePower") == 0){
		lua_pushnumber(tolua_S, cobj->battlePower);
	}else if (strcmp(property.c_str(), "addPower") == 0){
		lua_pushnumber(tolua_S, cobj->addPower);
	}else if (strcmp(property.c_str(), "isChatView") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isChatView);
	}else if (strcmp(property.c_str(), "selfServerId") == 0){
		lua_pushinteger(tolua_S, cobj->selfServerId);
	}else if (strcmp(property.c_str(), "currentServerId") == 0){
		lua_pushinteger(tolua_S, cobj->currentServerId);
	}else if (strcmp(property.c_str(), "crossFightSrcServerId") == 0){
		lua_pushinteger(tolua_S, cobj->crossFightSrcServerId);
	}else if (strcmp(property.c_str(), "serverName") == 0){
		lua_pushstring(tolua_S, cobj->serverName.c_str());
	}else if (strcmp(property.c_str(), "regCountry") == 0){
		lua_pushstring(tolua_S, cobj->regCountry.c_str());
	}else if (strcmp(property.c_str(), "srcServerPointId") == 0){
		lua_pushinteger(tolua_S, cobj->srcServerPointId);
	}else if (strcmp(property.c_str(), "inviCode") == 0){
		lua_pushstring(tolua_S, cobj->inviCode.c_str());
	}else if (strcmp(property.c_str(), "picVer") == 0){
		lua_pushinteger(tolua_S, cobj->picVer);
	}else if (strcmp(property.c_str(), "lastUpdateTime") == 0){
		lua_pushinteger(tolua_S, cobj->lastUpdateTime);
	}else if(strcmp(property.c_str(), "m_equip") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->m_equip.begin();
		int idx = 1;
		while(iter!=cobj->m_equip.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushinteger(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "showEquip") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->showEquip);
	}else if (strcmp(property.c_str(), "scrollEquip") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->scrollEquip);
	}else if (strcmp(property.c_str(), "isDaltonOn") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isDaltonOn);
	}else if (strcmp(property.c_str(), "shouldShowMedal") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->shouldShowMedal);
	}else if (strcmp(property.c_str(), "materialBackup") == 0){
		lua_pushinteger(tolua_S, cobj->materialBackup);
	}else if (strcmp(property.c_str(), "winPoint") == 0){
		lua_pushnumber(tolua_S, cobj->winPoint);
	}else if (strcmp(property.c_str(), "useGoldCureCDTime") == 0){
		lua_pushnumber(tolua_S, cobj->useGoldCureCDTime);
	}else if (strcmp(property.c_str(), "protectCDTime") == 0){
		lua_pushnumber(tolua_S, cobj->protectCDTime);
	}else if (strcmp(property.c_str(), "skin") == 0){
		lua_pushstring(tolua_S, cobj->skin.c_str());
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_PlayerInfo_newindex(lua_State* tolua_S)
{
	PlayerInfo* cobj = *(PlayerInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "name") == 0){
		cobj->name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "nickName") == 0){
		cobj->nickName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "uid") == 0){
		cobj->uid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isPayFlag") == 0){
		cobj->isPayFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pic") == 0){
		cobj->pic= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "country") == 0){
		cobj->country= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "roomName") == 0){
		cobj->roomName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "buildcode") == 0){
		cobj->buildcode= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceRank") == 0){
		cobj->allianceRank= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "gold") == 0){
		cobj->gold= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "longJing") == 0){
		cobj->longJing= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "payTotal") == 0){
		cobj->payTotal= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "exp") == 0){
		cobj->exp= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "maxExp") == 0){
		cobj->maxExp= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "openedSystem") == 0){
		cobj->openedSystem= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "gmFlag") == 0){
		cobj->gmFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "renameTime") == 0){
		cobj->renameTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "protectTimeStamp") == 0){
		cobj->protectTimeStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resourceProtectTimeStamp") == 0){
		cobj->resourceProtectTimeStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "vipPoints") == 0){
		cobj->vipPoints= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "vipEndTime") == 0){
		cobj->vipEndTime= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "nextDayLoginVipReward") == 0){
		cobj->nextDayLoginVipReward= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "consecutiveLoginDays") == 0){
		cobj->consecutiveLoginDays= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "SVIPPoint") == 0){
		cobj->SVIPPoint= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "SVIPLevel") == 0){
		cobj->SVIPLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "registerTime") == 0){
		cobj->registerTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "regTime") == 0){
		cobj->regTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "sciencePower") == 0){
		cobj->sciencePower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "battleLose") == 0){
		cobj->battleLose= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "armyDead") == 0){
		cobj->armyDead= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "armyPower") == 0){
		cobj->armyPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "fortPower") == 0){
		cobj->fortPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "armyCure") == 0){
		cobj->armyCure= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "questpower") == 0){
		cobj->questpower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "playerPower") == 0){
		cobj->playerPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "armyKill") == 0){
		cobj->armyKill= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "buildingPower") == 0){
		cobj->buildingPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "equipPower") == 0){
		cobj->equipPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "knight_title") == 0){
		cobj->knight_title= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "defenseWin") == 0){
		cobj->defenseWin= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "heroPower") == 0){
		cobj->heroPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attackLose") == 0){
		cobj->attackLose= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "detectNum") == 0){
		cobj->detectNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "attackWin") == 0){
		cobj->attackWin= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "battleWin") == 0){
		cobj->battleWin= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "power") == 0){
		cobj->power= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isApplied") == 0){
		cobj->isApplied= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "invited") == 0){
		cobj->invited= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bindFlag") == 0){
		cobj->bindFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "rank") == 0){
		cobj->rank= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pointId") == 0){
		cobj->pointId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mainCityLv") == 0){
		cobj->mainCityLv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "officer") == 0){
		cobj->officer= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "relinquishFlag") == 0){
		cobj->relinquishFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "relinquishEndTime") == 0){
		cobj->relinquishEndTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pic_banTime") == 0){
		cobj->pic_banTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pic_nextUpdateTime") == 0){
		cobj->pic_nextUpdateTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pic_banCount") == 0){
		cobj->pic_banCount= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastBattlePower") == 0){
		cobj->lastBattlePower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "battlePower") == 0){
		cobj->battlePower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "addPower") == 0){
		cobj->addPower= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isChatView") == 0){
		cobj->isChatView= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "selfServerId") == 0){
		cobj->selfServerId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentServerId") == 0){
		cobj->currentServerId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "crossFightSrcServerId") == 0){
		cobj->crossFightSrcServerId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverName") == 0){
		cobj->serverName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "regCountry") == 0){
		cobj->regCountry= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "srcServerPointId") == 0){
		cobj->srcServerPointId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "inviCode") == 0){
		cobj->inviCode= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "picVer") == 0){
		cobj->picVer= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastUpdateTime") == 0){
		cobj->lastUpdateTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "showEquip") == 0){
		cobj->showEquip= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "scrollEquip") == 0){
		cobj->scrollEquip= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isDaltonOn") == 0){
		cobj->isDaltonOn= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shouldShowMedal") == 0){
		cobj->shouldShowMedal= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "materialBackup") == 0){
		cobj->materialBackup= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "winPoint") == 0){
		cobj->winPoint= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "useGoldCureCDTime") == 0){
		cobj->useGoldCureCDTime= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "protectCDTime") == 0){
		cobj->protectCDTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "skin") == 0){
		cobj->skin= (string)lua_tostring(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_PlayerInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PlayerInfo");
    tolua_cclass(tolua_S,"PlayerInfo","PlayerInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"PlayerInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_PlayerInfo_constructor);
        tolua_function(tolua_S,"setGenerals",lua_cocos2dx_if_PlayerInfo_setGenerals);
        tolua_function(tolua_S,"isInAlliance",lua_cocos2dx_if_PlayerInfo_isInAlliance);
        tolua_function(tolua_S,"getAttributeByKey",lua_cocos2dx_if_PlayerInfo_getAttributeByKey);
        tolua_function(tolua_S,"isInSelfServer",lua_cocos2dx_if_PlayerInfo_isInSelfServer);
        tolua_function(tolua_S,"getAllianceId",lua_cocos2dx_if_PlayerInfo_getAllianceId);
        tolua_function(tolua_S,"isMOD",lua_cocos2dx_if_PlayerInfo_isMOD);
        tolua_function(tolua_S,"getBodyPic",lua_cocos2dx_if_PlayerInfo_getBodyPic);
        tolua_function(tolua_S,"getGenerals",lua_cocos2dx_if_PlayerInfo_getGenerals);
        tolua_function(tolua_S,"setAllianceId",lua_cocos2dx_if_PlayerInfo_setAllianceId);
        tolua_function(tolua_S,"getPic",lua_cocos2dx_if_PlayerInfo_getPic);
        tolua_function(tolua_S,"getCustomPicUrl",lua_cocos2dx_if_PlayerInfo_getCustomPicUrl);
        tolua_function(tolua_S,"setAllianceRank",lua_cocos2dx_if_PlayerInfo_setAllianceRank);
        tolua_function(tolua_S,"getTotalPower",lua_cocos2dx_if_PlayerInfo_getTotalPower);
        tolua_function(tolua_S,"getAllianceRank",lua_cocos2dx_if_PlayerInfo_getAllianceRank);
        tolua_function(tolua_S,"isUseCustomPic",lua_cocos2dx_if_PlayerInfo_isUseCustomPic);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_PlayerInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_PlayerInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PlayerInfo).name();
    g_luaType[typeName] = "PlayerInfo";
    g_typeCast["PlayerInfo"] = "PlayerInfo";
    return 1;
}

int lua_cocos2dx_if_FunBuildInfo_getStarPower(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildInfo_getStarPower'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        double arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildInfo:getStarPower");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "FunBuildInfo:getStarPower");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildInfo_getStarPower'", nullptr);
            return 0;
        }
        long ret = cobj->getStarPower(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildInfo:getStarPower",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildInfo_getStarPower'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildInfo_getInfomationByLv(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildInfo_getInfomationByLv'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildInfo:getInfomationByLv");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildInfo_getInfomationByLv'", nullptr);
            return 0;
        }
        std::string ret = cobj->getInfomationByLv(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildInfo:getInfomationByLv",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildInfo_getInfomationByLv'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildInfo_isUnLock(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildInfo_isUnLock'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildInfo_isUnLock'", nullptr);
            return 0;
        }
        bool ret = cobj->isUnLock();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildInfo:isUnLock",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildInfo_isUnLock'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildInfo* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            FunBuildInfo* arg0;
            ok &= luaval_to_object<FunBuildInfo>(tolua_S, 2, "FunBuildInfo",&arg0, "FunBuildInfo:FunBuildInfo");

            if (!ok) { break; }
            cobj = new FunBuildInfo(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"FunBuildInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            cocos2d::__Dictionary* arg0;
            ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "FunBuildInfo:FunBuildInfo");

            if (!ok) { break; }
            cobj = new FunBuildInfo(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"FunBuildInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new FunBuildInfo();
            tolua_pushusertype(tolua_S,(void*)cobj,"FunBuildInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "FunBuildInfo:FunBuildInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_FunBuildInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FunBuildInfo)");
    return 0;
}

static int lua_cocos2dx_if_FunBuildInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	FunBuildInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"FunBuildInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (FunBuildInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "itemId") == 0){
		lua_pushinteger(tolua_S, cobj->itemId);
	}else if (strcmp(property.c_str(), "uuid") == 0){
		lua_pushstring(tolua_S, cobj->uuid.c_str());
	}else if (strcmp(property.c_str(), "name") == 0){
		lua_pushstring(tolua_S, cobj->name.c_str());
	}else if (strcmp(property.c_str(), "time_need") == 0){
		lua_pushinteger(tolua_S, cobj->time_need);
	}else if (strcmp(property.c_str(), "des_time") == 0){
		lua_pushinteger(tolua_S, cobj->des_time);
	}else if (strcmp(property.c_str(), "plevel") == 0){
		lua_pushinteger(tolua_S, cobj->plevel);
	}else if (strcmp(property.c_str(), "description") == 0){
		lua_pushstring(tolua_S, cobj->description.c_str());
	}else if (strcmp(property.c_str(), "destip") == 0){
		lua_pushstring(tolua_S, cobj->destip.c_str());
	}else if (strcmp(property.c_str(), "tip") == 0){
		lua_pushstring(tolua_S, cobj->tip.c_str());
	}else if (strcmp(property.c_str(), "deno") == 0){
		lua_pushstring(tolua_S, cobj->deno.c_str());
	}else if (strcmp(property.c_str(), "introduce") == 0){
		lua_pushstring(tolua_S, cobj->introduce.c_str());
	}else if (strcmp(property.c_str(), "information") == 0){
		lua_pushstring(tolua_S, cobj->information.c_str());
	}else if (strcmp(property.c_str(), "starDestip") == 0){
		lua_pushstring(tolua_S, cobj->starDestip.c_str());
	}else if (strcmp(property.c_str(), "starTip") == 0){
		lua_pushstring(tolua_S, cobj->starTip.c_str());
	}else if (strcmp(property.c_str(), "starInformation") == 0){
		lua_pushstring(tolua_S, cobj->starInformation.c_str());
	}else if (strcmp(property.c_str(), "starDescription") == 0){
		lua_pushstring(tolua_S, cobj->starDescription.c_str());
	}else if (strcmp(property.c_str(), "icon") == 0){
		lua_pushstring(tolua_S, cobj->icon.c_str());
	}else if (strcmp(property.c_str(), "pic") == 0){
		lua_pushstring(tolua_S, cobj->pic.c_str());
	}else if (strcmp(property.c_str(), "star_on") == 0){
		lua_pushinteger(tolua_S, cobj->star_on);
	}else if (strcmp(property.c_str(), "pos") == 0){
		lua_pushinteger(tolua_S, cobj->pos);
	}else if (strcmp(property.c_str(), "open") == 0){
		lua_pushinteger(tolua_S, cobj->open);
	}else if (strcmp(property.c_str(), "state") == 0){
		lua_pushinteger(tolua_S, cobj->state);
	}else if (strcmp(property.c_str(), "severST") == 0){
		lua_pushinteger(tolua_S, cobj->severST);
	}else if (strcmp(property.c_str(), "isError") == 0){
		lua_pushinteger(tolua_S, cobj->isError);
	}else if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "updateTime") == 0){
		lua_pushnumber(tolua_S, cobj->updateTime);
	}else if (strcmp(property.c_str(), "currentEffect") == 0){
		lua_pushstring(tolua_S, cobj->currentEffect.c_str());
	}else if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "exp") == 0){
		lua_pushinteger(tolua_S, cobj->exp);
	}else if (strcmp(property.c_str(), "oldExp") == 0){
		lua_pushinteger(tolua_S, cobj->oldExp);
	}else if (strcmp(property.c_str(), "silver_need") == 0){
		lua_pushinteger(tolua_S, cobj->silver_need);
	}else if (strcmp(property.c_str(), "wood_need") == 0){
		lua_pushinteger(tolua_S, cobj->wood_need);
	}else if (strcmp(property.c_str(), "stone_need") == 0){
		lua_pushinteger(tolua_S, cobj->stone_need);
	}else if (strcmp(property.c_str(), "food_need") == 0){
		lua_pushinteger(tolua_S, cobj->food_need);
	}else if (strcmp(property.c_str(), "iron_need") == 0){
		lua_pushinteger(tolua_S, cobj->iron_need);
	}else if (strcmp(property.c_str(), "tool_need") == 0){
		lua_pushstring(tolua_S, cobj->tool_need.c_str());
	}else if (strcmp(property.c_str(), "limitNum") == 0){
		lua_pushinteger(tolua_S, cobj->limitNum);
	}else if (strcmp(property.c_str(), "button_txt") == 0){
		lua_pushstring(tolua_S, cobj->button_txt.c_str());
	}else if (strcmp(property.c_str(), "building") == 0){
		lua_pushstring(tolua_S, cobj->building.c_str());
	}else if (strcmp(property.c_str(), "star_building") == 0){
		lua_pushstring(tolua_S, cobj->star_building.c_str());
	}else if (strcmp(property.c_str(), "starNum") == 0){
		lua_pushinteger(tolua_S, cobj->starNum);
	}else if (strcmp(property.c_str(), "starRate") == 0){
		lua_pushnumber(tolua_S, cobj->starRate);
	}else if (strcmp(property.c_str(), "para1") == 0){
		lua_pushinteger(tolua_S, cobj->para1);
	}else if (strcmp(property.c_str(), "para2") == 0){
		lua_pushinteger(tolua_S, cobj->para2);
	}else if (strcmp(property.c_str(), "para3") == 0){
		lua_pushinteger(tolua_S, cobj->para3);
	}else if (strcmp(property.c_str(), "para4") == 0){
		lua_pushnumber(tolua_S, cobj->para4);
	}else if (strcmp(property.c_str(), "para5") == 0){
		lua_pushnumber(tolua_S, cobj->para5);
	}else if (strcmp(property.c_str(), "refreshTime") == 0){
		lua_pushnumber(tolua_S, cobj->refreshTime);
	}else if (strcmp(property.c_str(), "nextLevelParas") == 0){
		lua_pushstring(tolua_S, cobj->nextLevelParas.c_str());
	}else if(strcmp(property.c_str(), "para") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->para.begin();
		int idx = 1;
		while(iter!=cobj->para.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "mapPower") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->mapPower.begin();
		int idx = 1;
		while(iter!=cobj->mapPower.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "starMapPower") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->starMapPower.begin();
		int idx = 1;
		while(iter!=cobj->starMapPower.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "picVec") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->picVec.begin();
		int idx = 1;
		while(iter!=cobj->picVec.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "open_arms") == 0){
		lua_pushstring(tolua_S, cobj->open_arms.c_str());
	}else if (strcmp(property.c_str(), "is_Dirc") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->is_Dirc);
	}else if (strcmp(property.c_str(), "effectTime") == 0){
		lua_pushnumber(tolua_S, cobj->effectTime);
	}else if (strcmp(property.c_str(), "putId") == 0){
		lua_pushstring(tolua_S, cobj->putId.c_str());
	}else if (strcmp(property.c_str(), "dragonGold_need") == 0){
		lua_pushinteger(tolua_S, cobj->dragonGold_need);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_FunBuildInfo_newindex(lua_State* tolua_S)
{
	FunBuildInfo* cobj = *(FunBuildInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "itemId") == 0){
		cobj->itemId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "uuid") == 0){
		cobj->uuid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "name") == 0){
		cobj->name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "time_need") == 0){
		cobj->time_need= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "des_time") == 0){
		cobj->des_time= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "plevel") == 0){
		cobj->plevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "description") == 0){
		cobj->description= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "destip") == 0){
		cobj->destip= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "tip") == 0){
		cobj->tip= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "deno") == 0){
		cobj->deno= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "introduce") == 0){
		cobj->introduce= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "information") == 0){
		cobj->information= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "starDestip") == 0){
		cobj->starDestip= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "starTip") == 0){
		cobj->starTip= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "starInformation") == 0){
		cobj->starInformation= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "starDescription") == 0){
		cobj->starDescription= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "icon") == 0){
		cobj->icon= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pic") == 0){
		cobj->pic= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "star_on") == 0){
		cobj->star_on= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pos") == 0){
		cobj->pos= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "open") == 0){
		cobj->open= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "state") == 0){
		cobj->state= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "severST") == 0){
		cobj->severST= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isError") == 0){
		cobj->isError= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "updateTime") == 0){
		cobj->updateTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentEffect") == 0){
		cobj->currentEffect= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "exp") == 0){
		cobj->exp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "oldExp") == 0){
		cobj->oldExp= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "silver_need") == 0){
		cobj->silver_need= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "wood_need") == 0){
		cobj->wood_need= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "stone_need") == 0){
		cobj->stone_need= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "food_need") == 0){
		cobj->food_need= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "iron_need") == 0){
		cobj->iron_need= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "tool_need") == 0){
		cobj->tool_need= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "limitNum") == 0){
		cobj->limitNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "button_txt") == 0){
		cobj->button_txt= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "building") == 0){
		cobj->building= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "star_building") == 0){
		cobj->star_building= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "starNum") == 0){
		cobj->starNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "starRate") == 0){
		cobj->starRate= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para1") == 0){
		cobj->para1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para2") == 0){
		cobj->para2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para3") == 0){
		cobj->para3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para4") == 0){
		cobj->para4= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para5") == 0){
		cobj->para5= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "refreshTime") == 0){
		cobj->refreshTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "nextLevelParas") == 0){
		cobj->nextLevelParas= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "open_arms") == 0){
		cobj->open_arms= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "is_Dirc") == 0){
		cobj->is_Dirc= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "effectTime") == 0){
		cobj->effectTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "putId") == 0){
		cobj->putId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "dragonGold_need") == 0){
		cobj->dragonGold_need= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_FunBuildInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"FunBuildInfo");
    tolua_cclass(tolua_S,"FunBuildInfo","FunBuildInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"FunBuildInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_FunBuildInfo_constructor);
        tolua_function(tolua_S,"getStarPower",lua_cocos2dx_if_FunBuildInfo_getStarPower);
        tolua_function(tolua_S,"getInfomationByLv",lua_cocos2dx_if_FunBuildInfo_getInfomationByLv);
        tolua_function(tolua_S,"isUnLock",lua_cocos2dx_if_FunBuildInfo_isUnLock);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_FunBuildInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_FunBuildInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(FunBuildInfo).name();
    g_luaType[typeName] = "FunBuildInfo";
    g_typeCast["FunBuildInfo"] = "FunBuildInfo";
    return 1;
}

int lua_cocos2dx_if_GlobalData_changeTime(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_changeTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        long arg0;

        ok &= luaval_to_long(tolua_S, 2, &arg0, "GlobalData:changeTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_changeTime'", nullptr);
            return 0;
        }
        long ret = cobj->changeTime(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:changeTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_changeTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_getTimeZone(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_getTimeZone'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getTimeZone'", nullptr);
            return 0;
        }
        int ret = cobj->getTimeZone();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:getTimeZone",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_getTimeZone'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_needLogout(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_needLogout'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_needLogout'", nullptr);
            return 0;
        }
        bool ret = cobj->needLogout();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:needLogout",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_needLogout'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_getWorldTime(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_getWorldTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getWorldTime'", nullptr);
            return 0;
        }
        long ret = cobj->getWorldTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:getWorldTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_getWorldTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_isWeiboEnabled(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_isWeiboEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_isWeiboEnabled'", nullptr);
            return 0;
        }
        bool ret = cobj->isWeiboEnabled();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:isWeiboEnabled",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_isWeiboEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_cantSwtichAccount(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_cantSwtichAccount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_cantSwtichAccount'", nullptr);
            return 0;
        }
        bool ret = cobj->cantSwtichAccount();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:cantSwtichAccount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_cantSwtichAccount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_getRand(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_getRand'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getRand'", nullptr);
            return 0;
        }
        int ret = cobj->getRand();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "GlobalData:getRand");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getRand'", nullptr);
            return 0;
        }
        int ret = cobj->getRand(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "GlobalData:getRand");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "GlobalData:getRand");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getRand'", nullptr);
            return 0;
        }
        int ret = cobj->getRand(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:getRand",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_getRand'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_getTimeStamp(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_getTimeStamp'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getTimeStamp'", nullptr);
            return 0;
        }
        long ret = cobj->getTimeStamp();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:getTimeStamp",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_getTimeStamp'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_isScienceValid(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_isScienceValid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "GlobalData:isScienceValid");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_isScienceValid'", nullptr);
            return 0;
        }
        bool ret = cobj->isScienceValid(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:isScienceValid",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_isScienceValid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_isVKEnabled(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_isVKEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_isVKEnabled'", nullptr);
            return 0;
        }
        bool ret = cobj->isVKEnabled();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:isVKEnabled",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_isVKEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_isGoogle(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_isGoogle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_isGoogle'", nullptr);
            return 0;
        }
        bool ret = cobj->isGoogle();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:isGoogle",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_isGoogle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_isChinaPlatForm(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_isChinaPlatForm'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_isChinaPlatForm'", nullptr);
            return 0;
        }
        bool ret = cobj->isChinaPlatForm();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:isChinaPlatForm",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_isChinaPlatForm'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_needLogin(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_needLogin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_needLogin'", nullptr);
            return 0;
        }
        bool ret = cobj->needLogin();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:needLogin",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_needLogin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_isXiaoMiPlatForm(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_isXiaoMiPlatForm'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_isXiaoMiPlatForm'", nullptr);
            return 0;
        }
        bool ret = cobj->isXiaoMiPlatForm();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:isXiaoMiPlatForm",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_isXiaoMiPlatForm'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_getPlayerInfo(lua_State* tolua_S)
{
    int argc = 0;
    GlobalData* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_getPlayerInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_getPlayerInfo'", nullptr);
            return 0;
        }
        PlayerInfo* ret = cobj->getPlayerInfo();
        object_to_luaval<PlayerInfo>(tolua_S, "PlayerInfo",(PlayerInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GlobalData:getPlayerInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_getPlayerInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GlobalData_shared(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"GlobalData",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GlobalData_shared'", nullptr);
            return 0;
        }
        GlobalData* ret = GlobalData::shared();
        object_to_luaval<GlobalData>(tolua_S, "GlobalData",(GlobalData*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "GlobalData:shared",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GlobalData_shared'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_GlobalData_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GlobalData)");
    return 0;
}

static int lua_cocos2dx_if_GlobalData_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	GlobalData* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"GlobalData",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GlobalData_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (GlobalData*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "isUiInti") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isUiInti);
	}else if (strcmp(property.c_str(), "isInitFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isInitFlag);
	}else if (strcmp(property.c_str(), "isInitFinish") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isInitFinish);
	}else if (strcmp(property.c_str(), "isPause") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isPause);
	}else if (strcmp(property.c_str(), "isBind") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isBind);
	}else if (strcmp(property.c_str(), "isPayBind") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isPayBind);
	}else if (strcmp(property.c_str(), "historyPurchaseChecked") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->historyPurchaseChecked);
	}else if (strcmp(property.c_str(), "isXMLInitFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isXMLInitFlag);
	}else if (strcmp(property.c_str(), "isFirstLoginGame") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isFirstLoginGame);
	}else if (strcmp(property.c_str(), "translation") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->translation);
	}else if (strcmp(property.c_str(), "mail_translation") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->mail_translation);
	}else if (strcmp(property.c_str(), "isShowCDkey") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isShowCDkey);
	}else if (strcmp(property.c_str(), "isPressedHomeKey") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isPressedHomeKey);
	}else if(strcmp(property.c_str(), "phonestate") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->phonestate.begin();
		int idx = 1;
		while(iter!=cobj->phonestate.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "phoneDevice") == 0){
		lua_pushstring(tolua_S, cobj->phoneDevice.c_str());
	}else if (strcmp(property.c_str(), "downloadUrl") == 0){
		lua_pushstring(tolua_S, cobj->downloadUrl.c_str());
	}else if (strcmp(property.c_str(), "updateType") == 0){
		lua_pushinteger(tolua_S, cobj->updateType);
	}else if (strcmp(property.c_str(), "version") == 0){
		lua_pushstring(tolua_S, cobj->version.c_str());
	}else if (strcmp(property.c_str(), "xmlVersion") == 0){
		lua_pushstring(tolua_S, cobj->xmlVersion.c_str());
	}else if (strcmp(property.c_str(), "serverVersion") == 0){
		lua_pushstring(tolua_S, cobj->serverVersion.c_str());
	}else if (strcmp(property.c_str(), "lang") == 0){
		lua_pushstring(tolua_S, cobj->lang.c_str());
	}else if (strcmp(property.c_str(), "uuid") == 0){
		lua_pushstring(tolua_S, cobj->uuid.c_str());
	}else if (strcmp(property.c_str(), "platform") == 0){
		lua_pushstring(tolua_S, cobj->platform.c_str());
	}else if (strcmp(property.c_str(), "platformUID") == 0){
		lua_pushstring(tolua_S, cobj->platformUID.c_str());
	}else if (strcmp(property.c_str(), "platformToken") == 0){
		lua_pushstring(tolua_S, cobj->platformToken.c_str());
	}else if (strcmp(property.c_str(), "analyticID") == 0){
		lua_pushstring(tolua_S, cobj->analyticID.c_str());
	}else if (strcmp(property.c_str(), "gcmRegisterId") == 0){
		lua_pushstring(tolua_S, cobj->gcmRegisterId.c_str());
	}else if (strcmp(property.c_str(), "parseRegisterId") == 0){
		lua_pushstring(tolua_S, cobj->parseRegisterId.c_str());
	}else if (strcmp(property.c_str(), "gaid") == 0){
		lua_pushstring(tolua_S, cobj->gaid.c_str());
	}else if (strcmp(property.c_str(), "gaidCache") == 0){
		lua_pushstring(tolua_S, cobj->gaidCache.c_str());
	}else if (strcmp(property.c_str(), "referrer") == 0){
		lua_pushstring(tolua_S, cobj->referrer.c_str());
	}else if (strcmp(property.c_str(), "fromCountry") == 0){
		lua_pushstring(tolua_S, cobj->fromCountry.c_str());
	}else if (strcmp(property.c_str(), "lastAcceptEnergyTime") == 0){
		lua_pushnumber(tolua_S, cobj->lastAcceptEnergyTime);
	}else if (strcmp(property.c_str(), "pauseTime") == 0){
		lua_pushnumber(tolua_S, cobj->pauseTime);
	}else if (strcmp(property.c_str(), "connectMode") == 0){
		lua_pushstring(tolua_S, cobj->connectMode.c_str());
	}else if (strcmp(property.c_str(), "bagGoldBuyNum") == 0){
		lua_pushinteger(tolua_S, cobj->bagGoldBuyNum);
	}else if (strcmp(property.c_str(), "inviteFriendsInfo") == 0){
		lua_pushstring(tolua_S, cobj->inviteFriendsInfo.c_str());
	}else if (strcmp(property.c_str(), "installFriendsInfo") == 0){
		lua_pushstring(tolua_S, cobj->installFriendsInfo.c_str());
	}else if (strcmp(property.c_str(), "medalid") == 0){
		lua_pushstring(tolua_S, cobj->medalid.c_str());
	}else if (strcmp(property.c_str(), "freshRechargeTotal") == 0){
		lua_pushinteger(tolua_S, cobj->freshRechargeTotal);
	}else if (strcmp(property.c_str(), "bFreshRechargeOpen") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->bFreshRechargeOpen);
	}else if (strcmp(property.c_str(), "deviceCollect") == 0){
		lua_pushstring(tolua_S, cobj->deviceCollect.c_str());
	}else if (strcmp(property.c_str(), "userChangeCheckVersion") == 0){
		lua_pushstring(tolua_S, cobj->userChangeCheckVersion.c_str());
	}else if (strcmp(property.c_str(), "changeCheckServer") == 0){
		lua_pushstring(tolua_S, cobj->changeCheckServer.c_str());
	}else if (strcmp(property.c_str(), "userNeedChangeCheck") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->userNeedChangeCheck);
	}else if (strcmp(property.c_str(), "startNewGameFlag") == 0){
		lua_pushinteger(tolua_S, cobj->startNewGameFlag);
	}else if (strcmp(property.c_str(), "recordFlag") == 0){
		lua_pushinteger(tolua_S, cobj->recordFlag);
	}else if (strcmp(property.c_str(), "checkSimulatorFlag") == 0){
		lua_pushinteger(tolua_S, cobj->checkSimulatorFlag);
	}else if (strcmp(property.c_str(), "bImpMusicOpen") == 0){
		lua_pushinteger(tolua_S, cobj->bImpMusicOpen);
	}else if (strcmp(property.c_str(), "bWorldMusicOpen") == 0){
		lua_pushinteger(tolua_S, cobj->bWorldMusicOpen);
	}else if (strcmp(property.c_str(), "bImpMusicLocalOpen") == 0){
		lua_pushinteger(tolua_S, cobj->bImpMusicLocalOpen);
	}else if (strcmp(property.c_str(), "bWorldMusicLocalOpen") == 0){
		lua_pushinteger(tolua_S, cobj->bWorldMusicLocalOpen);
	}else if (strcmp(property.c_str(), "xmlReloadFlag") == 0){
		lua_pushstring(tolua_S, cobj->xmlReloadFlag.c_str());
	}else if (strcmp(property.c_str(), "xmlReloadVersion") == 0){
		lua_pushstring(tolua_S, cobj->xmlReloadVersion.c_str());
	}else if (strcmp(property.c_str(), "worldMarchParticleType") == 0){
		lua_pushinteger(tolua_S, cobj->worldMarchParticleType);
	}else if(strcmp(property.c_str(), "historyPurchaseList") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->historyPurchaseList.begin();
		int idx = 1;
		while(iter!=cobj->historyPurchaseList.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "cityDefenseVal") == 0){
		lua_pushnumber(tolua_S, cobj->cityDefenseVal);
	}else if (strcmp(property.c_str(), "cityFireStamp") == 0){
		lua_pushnumber(tolua_S, cobj->cityFireStamp);
	}else if (strcmp(property.c_str(), "cityStartFireStamp") == 0){
		lua_pushnumber(tolua_S, cobj->cityStartFireStamp);
	}else if (strcmp(property.c_str(), "cityLastUpdateDefenseStamp") == 0){
		lua_pushnumber(tolua_S, cobj->cityLastUpdateDefenseStamp);
	}else if (strcmp(property.c_str(), "cityTileCountry") == 0){
		lua_pushnumber(tolua_S, cobj->cityTileCountry);
	}else if (strcmp(property.c_str(), "cityUpdateDefenseDelayMin") == 0){
		lua_pushnumber(tolua_S, cobj->cityUpdateDefenseDelayMin);
	}else if (strcmp(property.c_str(), "goldExchageRefreshStamp") == 0){
		lua_pushnumber(tolua_S, cobj->goldExchageRefreshStamp);
	}else if (strcmp(property.c_str(), "teleport_limit_open") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->teleport_limit_open);
	}else if (strcmp(property.c_str(), "teleport_limit_time") == 0){
		lua_pushinteger(tolua_S, cobj->teleport_limit_time);
	}else if (strcmp(property.c_str(), "func_qemuBkpt_open") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->func_qemuBkpt_open);
	}else if (strcmp(property.c_str(), "func_checkEmulator_open") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->func_checkEmulator_open);
	}else if(strcmp(property.c_str(), "generalAlreadyGet") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->generalAlreadyGet.begin();
		int idx = 1;
		while(iter!=cobj->generalAlreadyGet.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "scienceEffect") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->scienceEffect.begin();
		int idx = 1;
		while(iter!=cobj->scienceEffect.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "effectValues") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->effectValues.begin();
		int idx = 1;
		while(iter!=cobj->effectValues.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "corpCreateInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->corpCreateInfo.begin();
		int idx = 1;
		while(iter!=cobj->corpCreateInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "woodCreateInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->woodCreateInfo.begin();
		int idx = 1;
		while(iter!=cobj->woodCreateInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "ironCreateInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->ironCreateInfo.begin();
		int idx = 1;
		while(iter!=cobj->ironCreateInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "barracksCreateInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->barracksCreateInfo.begin();
		int idx = 1;
		while(iter!=cobj->barracksCreateInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "marketCreateInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->marketCreateInfo.begin();
		int idx = 1;
		while(iter!=cobj->marketCreateInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "tomorrow_time") == 0){
		lua_pushnumber(tolua_S, cobj->tomorrow_time);
	}else if(strcmp(property.c_str(), "cd_time") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->cd_time.begin();
		int idx = 1;
		while(iter!=cobj->cd_time.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushinteger(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "cd_cost") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->cd_cost.begin();
		int idx = 1;
		while(iter!=cobj->cd_cost.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushinteger(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "cd_gold") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->cd_gold.begin();
		int idx = 1;
		while(iter!=cobj->cd_gold.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "res1_num") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->res1_num.begin();
		int idx = 1;
		while(iter!=cobj->res1_num.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "res2_num") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->res2_num.begin();
		int idx = 1;
		while(iter!=cobj->res2_num.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "res3_num") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->res3_num.begin();
		int idx = 1;
		while(iter!=cobj->res3_num.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "res_cost") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->res_cost.begin();
		int idx = 1;
		while(iter!=cobj->res_cost.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "statusMap") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->statusMap.begin();
		int idx = 1;
		while(iter!=cobj->statusMap.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushnumber(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "vipEffectMap") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->vipEffectMap.begin();
		int idx = 1;
		while(iter!=cobj->vipEffectMap.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "effToFormatMap") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->effToFormatMap.begin();
		int idx = 1;
		while(iter!=cobj->effToFormatMap.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "effPM_Map") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->effPM_Map.begin();
		int idx = 1;
		while(iter!=cobj->effPM_Map.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "essenceK1") == 0){
		lua_pushinteger(tolua_S, cobj->essenceK1);
	}else if (strcmp(property.c_str(), "essenceK2") == 0){
		lua_pushinteger(tolua_S, cobj->essenceK2);
	}else if (strcmp(property.c_str(), "essenceK3") == 0){
		lua_pushinteger(tolua_S, cobj->essenceK3);
	}else if (strcmp(property.c_str(), "flushFreeTimes") == 0){
		lua_pushinteger(tolua_S, cobj->flushFreeTimes);
	}else if (strcmp(property.c_str(), "flushGoldTimes") == 0){
		lua_pushinteger(tolua_S, cobj->flushGoldTimes);
	}else if (strcmp(property.c_str(), "recruitedGeneralCount") == 0){
		lua_pushinteger(tolua_S, cobj->recruitedGeneralCount);
	}else if (strcmp(property.c_str(), "longjingShowTime") == 0){
		lua_pushinteger(tolua_S, cobj->longjingShowTime);
	}else if (strcmp(property.c_str(), "quickEndLevel") == 0){
		lua_pushinteger(tolua_S, cobj->quickEndLevel);
	}else if (strcmp(property.c_str(), "contryResType") == 0){
		lua_pushinteger(tolua_S, cobj->contryResType);
	}else if (strcmp(property.c_str(), "speedFactor") == 0){
		lua_pushnumber(tolua_S, cobj->speedFactor);
	}else if (strcmp(property.c_str(), "focusBuildId") == 0){
		lua_pushinteger(tolua_S, cobj->focusBuildId);
	}else if (strcmp(property.c_str(), "freeSpdT") == 0){
		lua_pushinteger(tolua_S, cobj->freeSpdT);
	}else if (strcmp(property.c_str(), "MaxPlayerLv") == 0){
		lua_pushinteger(tolua_S, cobj->MaxPlayerLv);
	}else if (strcmp(property.c_str(), "MaxHeroLv") == 0){
		lua_pushinteger(tolua_S, cobj->MaxHeroLv);
	}else if (strcmp(property.c_str(), "MaxBuildLv") == 0){
		lua_pushinteger(tolua_S, cobj->MaxBuildLv);
	}else if (strcmp(property.c_str(), "shield_base") == 0){
		lua_pushinteger(tolua_S, cobj->shield_base);
	}else if (strcmp(property.c_str(), "cd_goldK1") == 0){
		lua_pushinteger(tolua_S, cobj->cd_goldK1);
	}else if (strcmp(property.c_str(), "cd_goldK2") == 0){
		lua_pushinteger(tolua_S, cobj->cd_goldK2);
	}else if (strcmp(property.c_str(), "alliance_cost_k1") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k1);
	}else if (strcmp(property.c_str(), "alliance_cost_k2") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k2);
	}else if (strcmp(property.c_str(), "alliance_cost_k3") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k3);
	}else if (strcmp(property.c_str(), "alliance_cost_k4") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k4);
	}else if (strcmp(property.c_str(), "alliance_cost_k5") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k5);
	}else if (strcmp(property.c_str(), "alliance_cost_k6") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k6);
	}else if (strcmp(property.c_str(), "alliance_cost_k7") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k7);
	}else if (strcmp(property.c_str(), "alliance_cost_k8") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k8);
	}else if (strcmp(property.c_str(), "alliance_cost_k11") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k11);
	}else if (strcmp(property.c_str(), "alliance_cost_k12") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_cost_k12);
	}else if (strcmp(property.c_str(), "alliance_science_k1") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k1);
	}else if (strcmp(property.c_str(), "alliance_science_k2") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k2);
	}else if (strcmp(property.c_str(), "alliance_science_k3") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k3);
	}else if (strcmp(property.c_str(), "alliance_science_k4") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k4);
	}else if (strcmp(property.c_str(), "alliance_science_k5") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k5);
	}else if (strcmp(property.c_str(), "alliance_science_k6") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k6);
	}else if (strcmp(property.c_str(), "alliance_science_k7") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k7);
	}else if (strcmp(property.c_str(), "alliance_science_k8") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k8);
	}else if (strcmp(property.c_str(), "alliance_science_k9") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k9);
	}else if (strcmp(property.c_str(), "alliance_science_k10") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k10);
	}else if (strcmp(property.c_str(), "alliance_science_k11") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k11);
	}else if (strcmp(property.c_str(), "alliance_science_k12") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_science_k12);
	}else if (strcmp(property.c_str(), "resources_weight_1") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_1);
	}else if (strcmp(property.c_str(), "resources_weight_2") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_2);
	}else if (strcmp(property.c_str(), "resources_weight_3") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_3);
	}else if (strcmp(property.c_str(), "resources_weight_4") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_4);
	}else if (strcmp(property.c_str(), "resources_weight_5") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_5);
	}else if (strcmp(property.c_str(), "resources_weight_6") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_6);
	}else if (strcmp(property.c_str(), "resources_weight_7") == 0){
		lua_pushinteger(tolua_S, cobj->resources_weight_7);
	}else if (strcmp(property.c_str(), "world_alliance_war_k1") == 0){
		lua_pushinteger(tolua_S, cobj->world_alliance_war_k1);
	}else if (strcmp(property.c_str(), "world_alliance_war_k2") == 0){
		lua_pushinteger(tolua_S, cobj->world_alliance_war_k2);
	}else if (strcmp(property.c_str(), "world_rally_k1") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k1);
	}else if (strcmp(property.c_str(), "world_rally_k2") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k2);
	}else if (strcmp(property.c_str(), "world_rally_k3") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k3);
	}else if (strcmp(property.c_str(), "world_rally_k4") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k4);
	}else if (strcmp(property.c_str(), "world_rally_k5") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k5);
	}else if (strcmp(property.c_str(), "world_rally_k6") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k6);
	}else if (strcmp(property.c_str(), "world_rally_k7") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k7);
	}else if (strcmp(property.c_str(), "world_rally_k8") == 0){
		lua_pushinteger(tolua_S, cobj->world_rally_k8);
	}else if (strcmp(property.c_str(), "glodMine_fb_k1") == 0){
		lua_pushinteger(tolua_S, cobj->glodMine_fb_k1);
	}else if (strcmp(property.c_str(), "glodMine_fb_k2") == 0){
		lua_pushinteger(tolua_S, cobj->glodMine_fb_k2);
	}else if (strcmp(property.c_str(), "glodMine_fb_k3") == 0){
		lua_pushinteger(tolua_S, cobj->glodMine_fb_k3);
	}else if (strcmp(property.c_str(), "glodMine_fb_k4") == 0){
		lua_pushinteger(tolua_S, cobj->glodMine_fb_k4);
	}else if (strcmp(property.c_str(), "invite_cost_k1") == 0){
		lua_pushinteger(tolua_S, cobj->invite_cost_k1);
	}else if (strcmp(property.c_str(), "isServerInfoBack") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isServerInfoBack);
	}else if (strcmp(property.c_str(), "alliance_gift_k2") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_gift_k2);
	}else if (strcmp(property.c_str(), "alliance_gift_k3") == 0){
		lua_pushnumber(tolua_S, cobj->alliance_gift_k3);
	}else if (strcmp(property.c_str(), "alliance_fun_on3_k5") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_fun_on3_k5);
	}else if (strcmp(property.c_str(), "replayTime") == 0){
		lua_pushinteger(tolua_S, cobj->replayTime);
	}else if (strcmp(property.c_str(), "cnReplayFlag") == 0){
		lua_pushinteger(tolua_S, cobj->cnReplayFlag);
	}else if (strcmp(property.c_str(), "openmiracle") == 0){
		lua_pushinteger(tolua_S, cobj->openmiracle);
	}else if (strcmp(property.c_str(), "sceneResourceStepLoad") == 0){
		lua_pushinteger(tolua_S, cobj->sceneResourceStepLoad);
	}else if (strcmp(property.c_str(), "connectionFlag") == 0){
		lua_pushinteger(tolua_S, cobj->connectionFlag);
	}else if (strcmp(property.c_str(), "m_trainGeneralId") == 0){
		lua_pushstring(tolua_S, cobj->m_trainGeneralId.c_str());
	}else if (strcmp(property.c_str(), "m_trainId") == 0){
		lua_pushstring(tolua_S, cobj->m_trainId.c_str());
	}else if (strcmp(property.c_str(), "m_speedTrainId") == 0){
		lua_pushstring(tolua_S, cobj->m_speedTrainId.c_str());
	}else if (strcmp(property.c_str(), "m_harvestInfo") == 0){
		lua_pushstring(tolua_S, cobj->m_harvestInfo.c_str());
	}else if (strcmp(property.c_str(), "m_skillFortInfo") == 0){
		lua_pushstring(tolua_S, cobj->m_skillFortInfo.c_str());
	}else if (strcmp(property.c_str(), "battleSpeedFactor") == 0){
		lua_pushnumber(tolua_S, cobj->battleSpeedFactor);
	}else if (strcmp(property.c_str(), "facebook_gift_k7") == 0){
		lua_pushinteger(tolua_S, cobj->facebook_gift_k7);
	}else if (strcmp(property.c_str(), "m_isFirstOpenDailyView") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_isFirstOpenDailyView);
	}else if (strcmp(property.c_str(), "m_isFirstAskFor") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_isFirstAskFor);
	}else if (strcmp(property.c_str(), "android_native_chat") == 0){
		lua_pushinteger(tolua_S, cobj->android_native_chat);
	}else if (strcmp(property.c_str(), "isOpenForum") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isOpenForum);
	}else if (strcmp(property.c_str(), "alliance_territory_tower_switch") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_territory_tower_switch);
	}else if (strcmp(property.c_str(), "hd_switch") == 0){
		lua_pushinteger(tolua_S, cobj->hd_switch);
	}else if (strcmp(property.c_str(), "hd_switch_version") == 0){
		lua_pushstring(tolua_S, cobj->hd_switch_version.c_str());
	}else if (strcmp(property.c_str(), "alliance_territory_banner_switch") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_territory_banner_switch);
	}else if (strcmp(property.c_str(), "alliance_territory_negative_effect") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_territory_negative_effect);
	}else if (strcmp(property.c_str(), "alliance_territory_supermine_limit") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_territory_supermine_limit);
	}else if (strcmp(property.c_str(), "alliance_territory_index") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_territory_index);
	}else if (strcmp(property.c_str(), "territory_warehouse_dayStorage") == 0){
		lua_pushnumber(tolua_S, cobj->territory_warehouse_dayStorage);
	}else if (strcmp(property.c_str(), "territory_warehouse_totalStorage") == 0){
		lua_pushnumber(tolua_S, cobj->territory_warehouse_totalStorage);
	}else if (strcmp(property.c_str(), "march_formation_switch") == 0){
		lua_pushinteger(tolua_S, cobj->march_formation_switch);
	}else if (strcmp(property.c_str(), "isInviteOpen") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isInviteOpen);
	}else if (strcmp(property.c_str(), "isOpenEvaluate") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isOpenEvaluate);
	}else if (strcmp(property.c_str(), "popupTimes") == 0){
		lua_pushinteger(tolua_S, cobj->popupTimes);
	}else if (strcmp(property.c_str(), "nowGameCnt") == 0){
		lua_pushinteger(tolua_S, cobj->nowGameCnt);
	}else if (strcmp(property.c_str(), "maxGameCnt") == 0){
		lua_pushinteger(tolua_S, cobj->maxGameCnt);
	}else if (strcmp(property.c_str(), "cnt_forbidden_swith") == 0){
		lua_pushinteger(tolua_S, cobj->cnt_forbidden_swith);
	}else if (strcmp(property.c_str(), "cnt_forbidden_level") == 0){
		lua_pushinteger(tolua_S, cobj->cnt_forbidden_level);
	}else if (strcmp(property.c_str(), "cnt_forbidden_playingtime") == 0){
		lua_pushnumber(tolua_S, cobj->cnt_forbidden_playingtime);
	}else if (strcmp(property.c_str(), "trans_res_forbidden_swith") == 0){
		lua_pushinteger(tolua_S, cobj->trans_res_forbidden_swith);
	}else if (strcmp(property.c_str(), "trans_res_limit") == 0){
		lua_pushnumber(tolua_S, cobj->trans_res_limit);
	}else if (strcmp(property.c_str(), "foodMinimumSwith") == 0){
		lua_pushinteger(tolua_S, cobj->foodMinimumSwith);
	}else if (strcmp(property.c_str(), "robResSwith") == 0){
		lua_pushinteger(tolua_S, cobj->robResSwith);
	}else if (strcmp(property.c_str(), "robResLevel") == 0){
		lua_pushinteger(tolua_S, cobj->robResLevel);
	}else if (strcmp(property.c_str(), "new_trans_kingdom_level") == 0){
		lua_pushinteger(tolua_S, cobj->new_trans_kingdom_level);
	}else if (strcmp(property.c_str(), "isInDataParsing") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isInDataParsing);
	}else if (strcmp(property.c_str(), "isUploadPic") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isUploadPic);
	}else if (strcmp(property.c_str(), "isOpenTaiwanFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isOpenTaiwanFlag);
	}else if (strcmp(property.c_str(), "isOpenAnniversary") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isOpenAnniversary);
	}else if (strcmp(property.c_str(), "isAnniSharePhoto") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isAnniSharePhoto);
	}else if (strcmp(property.c_str(), "anniSharePhoto") == 0){
		lua_pushinteger(tolua_S, cobj->anniSharePhoto);
	}else if (strcmp(property.c_str(), "shakeAllianceFlag") == 0){
		lua_pushinteger(tolua_S, cobj->shakeAllianceFlag);
	}else if (strcmp(property.c_str(), "picUploadFlag") == 0){
		lua_pushinteger(tolua_S, cobj->picUploadFlag);
	}else if (strcmp(property.c_str(), "isBranchOn") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isBranchOn);
	}else if (strcmp(property.c_str(), "branchOnStr") == 0){
		lua_pushstring(tolua_S, cobj->branchOnStr.c_str());
	}else if (strcmp(property.c_str(), "dragonglass_control") == 0){
		lua_pushstring(tolua_S, cobj->dragonglass_control.c_str());
	}else if (strcmp(property.c_str(), "equipShare_control") == 0){
		lua_pushstring(tolua_S, cobj->equipShare_control.c_str());
	}else if (strcmp(property.c_str(), "superManFlag") == 0){
		lua_pushinteger(tolua_S, cobj->superManFlag);
	}else if (strcmp(property.c_str(), "shakeFlag") == 0){
		lua_pushinteger(tolua_S, cobj->shakeFlag);
	}else if (strcmp(property.c_str(), "shakeGuideFlag") == 0){
		lua_pushinteger(tolua_S, cobj->shakeGuideFlag);
	}else if (strcmp(property.c_str(), "shakeCmdDelayTime") == 0){
		lua_pushinteger(tolua_S, cobj->shakeCmdDelayTime);
	}else if (strcmp(property.c_str(), "shakePicStr") == 0){
		lua_pushstring(tolua_S, cobj->shakePicStr.c_str());
	}else if (strcmp(property.c_str(), "isMaricleunlock") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isMaricleunlock);
	}else if (strcmp(property.c_str(), "isCrossService") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isCrossService);
	}else if (strcmp(property.c_str(), "serverType") == 0){
		lua_pushinteger(tolua_S, cobj->serverType);
	}else if (strcmp(property.c_str(), "firstEnterCrossService") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->firstEnterCrossService);
	}else if (strcmp(property.c_str(), "wb_fire_k1") == 0){
		lua_pushinteger(tolua_S, cobj->wb_fire_k1);
	}else if (strcmp(property.c_str(), "serverMax") == 0){
		lua_pushinteger(tolua_S, cobj->serverMax);
	}else if(strcmp(property.c_str(), "testSwitchMap") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->testSwitchMap.begin();
		int idx = 1;
		while(iter!=cobj->testSwitchMap.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "testSwitchVersionMap") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->testSwitchVersionMap.begin();
		int idx = 1;
		while(iter!=cobj->testSwitchVersionMap.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "chinaSwitchFlag") == 0){
		lua_pushinteger(tolua_S, cobj->chinaSwitchFlag);
	}else if (strcmp(property.c_str(), "dbFightBeginTime") == 0){
		lua_pushnumber(tolua_S, cobj->dbFightBeginTime);
	}else if (strcmp(property.c_str(), "dbFightEndTime") == 0){
		lua_pushnumber(tolua_S, cobj->dbFightEndTime);
	}else if (strcmp(property.c_str(), "bLotteryShareOpen") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->bLotteryShareOpen);
	}else if (strcmp(property.c_str(), "lotteryShareType") == 0){
		lua_pushinteger(tolua_S, cobj->lotteryShareType);
	}else if (strcmp(property.c_str(), "useNewKey") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->useNewKey);
	}else if (strcmp(property.c_str(), "fun_bindRes_switch") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->fun_bindRes_switch);
	}else if (strcmp(property.c_str(), "newIcon_version") == 0){
		lua_pushstring(tolua_S, cobj->newIcon_version.c_str());
	}else if (strcmp(property.c_str(), "newIcon_name") == 0){
		lua_pushstring(tolua_S, cobj->newIcon_name.c_str());
	}else if (strcmp(property.c_str(), "newIcon_cost") == 0){
		lua_pushinteger(tolua_S, cobj->newIcon_cost);
	}else if (strcmp(property.c_str(), "newIcon_startTime") == 0){
		lua_pushnumber(tolua_S, cobj->newIcon_startTime);
	}else if (strcmp(property.c_str(), "newIcon_endTime") == 0){
		lua_pushnumber(tolua_S, cobj->newIcon_endTime);
	}else if (strcmp(property.c_str(), "newIcon_country") == 0){
		lua_pushstring(tolua_S, cobj->newIcon_country.c_str());
	}else if(strcmp(property.c_str(), "scrollEquipInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->scrollEquipInfo.begin();
		int idx = 1;
		while(iter!=cobj->scrollEquipInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "scrollMaterialInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->scrollMaterialInfo.begin();
		int idx = 1;
		while(iter!=cobj->scrollMaterialInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "scrollPrayInfo") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->scrollPrayInfo.begin();
		int idx = 1;
		while(iter!=cobj->scrollPrayInfo.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "protectPostDelayTime") == 0){
		lua_pushinteger(tolua_S, cobj->protectPostDelayTime);
	}else if (strcmp(property.c_str(), "permitiCountry") == 0){
		lua_pushstring(tolua_S, cobj->permitiCountry.c_str());
	}else if (strcmp(property.c_str(), "on_other_chinaFlag_k1") == 0){
		lua_pushinteger(tolua_S, cobj->on_other_chinaFlag_k1);
	}else if(strcmp(property.c_str(), "batteryStates") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->batteryStates.begin();
		int idx = 1;
		while(iter!=cobj->batteryStates.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "princessRwd_lastTime") == 0){
		lua_pushnumber(tolua_S, cobj->princessRwd_lastTime);
	}else if (strcmp(property.c_str(), "princessShow") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->princessShow);
	}else if (strcmp(property.c_str(), "sqerSoldierRwd_lastTime") == 0){
		lua_pushnumber(tolua_S, cobj->sqerSoldierRwd_lastTime);
	}else if (strcmp(property.c_str(), "startDarkTime") == 0){
		lua_pushinteger(tolua_S, cobj->startDarkTime);
	}else if (strcmp(property.c_str(), "completeDarkTime") == 0){
		lua_pushinteger(tolua_S, cobj->completeDarkTime);
	}else if (strcmp(property.c_str(), "startLightTime") == 0){
		lua_pushinteger(tolua_S, cobj->startLightTime);
	}else if (strcmp(property.c_str(), "completeLightTime") == 0){
		lua_pushinteger(tolua_S, cobj->completeLightTime);
	}else if (strcmp(property.c_str(), "bindGuideInterval") == 0){
		lua_pushinteger(tolua_S, cobj->bindGuideInterval);
	}else if (strcmp(property.c_str(), "isDirectBind") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isDirectBind);
	}else if (strcmp(property.c_str(), "isCrossServerSendGiftValid") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isCrossServerSendGiftValid);
	}else if (strcmp(property.c_str(), "wonder_k9") == 0){
		lua_pushinteger(tolua_S, cobj->wonder_k9);
	}else if (strcmp(property.c_str(), "on_event4_k1") == 0){
		lua_pushstring(tolua_S, cobj->on_event4_k1.c_str());
	}else if (strcmp(property.c_str(), "on_event4_k2") == 0){
		lua_pushstring(tolua_S, cobj->on_event4_k2.c_str());
	}else if (strcmp(property.c_str(), "on_event4_k3") == 0){
		lua_pushstring(tolua_S, cobj->on_event4_k3.c_str());
	}else if (strcmp(property.c_str(), "on_event4_k4") == 0){
		lua_pushstring(tolua_S, cobj->on_event4_k4.c_str());
	}else if (strcmp(property.c_str(), "on_event4_k5") == 0){
		lua_pushstring(tolua_S, cobj->on_event4_k5.c_str());
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_GlobalData_newindex(lua_State* tolua_S)
{
	GlobalData* cobj = *(GlobalData**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "isUiInti") == 0){
		cobj->isUiInti= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isInitFlag") == 0){
		cobj->isInitFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isInitFinish") == 0){
		cobj->isInitFinish= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isPause") == 0){
		cobj->isPause= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isBind") == 0){
		cobj->isBind= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isPayBind") == 0){
		cobj->isPayBind= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "historyPurchaseChecked") == 0){
		cobj->historyPurchaseChecked= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isXMLInitFlag") == 0){
		cobj->isXMLInitFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isFirstLoginGame") == 0){
		cobj->isFirstLoginGame= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "translation") == 0){
		cobj->translation= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mail_translation") == 0){
		cobj->mail_translation= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isShowCDkey") == 0){
		cobj->isShowCDkey= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isPressedHomeKey") == 0){
		cobj->isPressedHomeKey= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "phoneDevice") == 0){
		cobj->phoneDevice= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "downloadUrl") == 0){
		cobj->downloadUrl= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "updateType") == 0){
		cobj->updateType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "version") == 0){
		cobj->version= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "xmlVersion") == 0){
		cobj->xmlVersion= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverVersion") == 0){
		cobj->serverVersion= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lang") == 0){
		cobj->lang= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "uuid") == 0){
		cobj->uuid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "platform") == 0){
		cobj->platform= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "platformUID") == 0){
		cobj->platformUID= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "platformToken") == 0){
		cobj->platformToken= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "analyticID") == 0){
		cobj->analyticID= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "gcmRegisterId") == 0){
		cobj->gcmRegisterId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "parseRegisterId") == 0){
		cobj->parseRegisterId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "gaid") == 0){
		cobj->gaid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "gaidCache") == 0){
		cobj->gaidCache= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "referrer") == 0){
		cobj->referrer= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "fromCountry") == 0){
		cobj->fromCountry= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastAcceptEnergyTime") == 0){
		cobj->lastAcceptEnergyTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pauseTime") == 0){
		cobj->pauseTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "connectMode") == 0){
		cobj->connectMode= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bagGoldBuyNum") == 0){
		cobj->bagGoldBuyNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "inviteFriendsInfo") == 0){
		cobj->inviteFriendsInfo= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "installFriendsInfo") == 0){
		cobj->installFriendsInfo= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "medalid") == 0){
		cobj->medalid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "freshRechargeTotal") == 0){
		cobj->freshRechargeTotal= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bFreshRechargeOpen") == 0){
		cobj->bFreshRechargeOpen= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "deviceCollect") == 0){
		cobj->deviceCollect= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "userChangeCheckVersion") == 0){
		cobj->userChangeCheckVersion= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "changeCheckServer") == 0){
		cobj->changeCheckServer= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "userNeedChangeCheck") == 0){
		cobj->userNeedChangeCheck= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startNewGameFlag") == 0){
		cobj->startNewGameFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "recordFlag") == 0){
		cobj->recordFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "checkSimulatorFlag") == 0){
		cobj->checkSimulatorFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bImpMusicOpen") == 0){
		cobj->bImpMusicOpen= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bWorldMusicOpen") == 0){
		cobj->bWorldMusicOpen= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bImpMusicLocalOpen") == 0){
		cobj->bImpMusicLocalOpen= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bWorldMusicLocalOpen") == 0){
		cobj->bWorldMusicLocalOpen= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "xmlReloadFlag") == 0){
		cobj->xmlReloadFlag= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "xmlReloadVersion") == 0){
		cobj->xmlReloadVersion= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "worldMarchParticleType") == 0){
		cobj->worldMarchParticleType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityDefenseVal") == 0){
		cobj->cityDefenseVal= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityFireStamp") == 0){
		cobj->cityFireStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityStartFireStamp") == 0){
		cobj->cityStartFireStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityLastUpdateDefenseStamp") == 0){
		cobj->cityLastUpdateDefenseStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityTileCountry") == 0){
		cobj->cityTileCountry= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityUpdateDefenseDelayMin") == 0){
		cobj->cityUpdateDefenseDelayMin= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "goldExchageRefreshStamp") == 0){
		cobj->goldExchageRefreshStamp= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "teleport_limit_open") == 0){
		cobj->teleport_limit_open= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "teleport_limit_time") == 0){
		cobj->teleport_limit_time= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "func_qemuBkpt_open") == 0){
		cobj->func_qemuBkpt_open= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "func_checkEmulator_open") == 0){
		cobj->func_checkEmulator_open= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "tomorrow_time") == 0){
		cobj->tomorrow_time= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "essenceK1") == 0){
		cobj->essenceK1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "essenceK2") == 0){
		cobj->essenceK2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "essenceK3") == 0){
		cobj->essenceK3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "flushFreeTimes") == 0){
		cobj->flushFreeTimes= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "flushGoldTimes") == 0){
		cobj->flushGoldTimes= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "recruitedGeneralCount") == 0){
		cobj->recruitedGeneralCount= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "longjingShowTime") == 0){
		cobj->longjingShowTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "quickEndLevel") == 0){
		cobj->quickEndLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "contryResType") == 0){
		cobj->contryResType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "speedFactor") == 0){
		cobj->speedFactor= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "focusBuildId") == 0){
		cobj->focusBuildId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "freeSpdT") == 0){
		cobj->freeSpdT= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "MaxPlayerLv") == 0){
		cobj->MaxPlayerLv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "MaxHeroLv") == 0){
		cobj->MaxHeroLv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "MaxBuildLv") == 0){
		cobj->MaxBuildLv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shield_base") == 0){
		cobj->shield_base= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cd_goldK1") == 0){
		cobj->cd_goldK1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cd_goldK2") == 0){
		cobj->cd_goldK2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k1") == 0){
		cobj->alliance_cost_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k2") == 0){
		cobj->alliance_cost_k2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k3") == 0){
		cobj->alliance_cost_k3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k4") == 0){
		cobj->alliance_cost_k4= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k5") == 0){
		cobj->alliance_cost_k5= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k6") == 0){
		cobj->alliance_cost_k6= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k7") == 0){
		cobj->alliance_cost_k7= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k8") == 0){
		cobj->alliance_cost_k8= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k11") == 0){
		cobj->alliance_cost_k11= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_cost_k12") == 0){
		cobj->alliance_cost_k12= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k1") == 0){
		cobj->alliance_science_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k2") == 0){
		cobj->alliance_science_k2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k3") == 0){
		cobj->alliance_science_k3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k4") == 0){
		cobj->alliance_science_k4= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k5") == 0){
		cobj->alliance_science_k5= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k6") == 0){
		cobj->alliance_science_k6= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k7") == 0){
		cobj->alliance_science_k7= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k8") == 0){
		cobj->alliance_science_k8= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k9") == 0){
		cobj->alliance_science_k9= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k10") == 0){
		cobj->alliance_science_k10= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k11") == 0){
		cobj->alliance_science_k11= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_science_k12") == 0){
		cobj->alliance_science_k12= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_1") == 0){
		cobj->resources_weight_1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_2") == 0){
		cobj->resources_weight_2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_3") == 0){
		cobj->resources_weight_3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_4") == 0){
		cobj->resources_weight_4= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_5") == 0){
		cobj->resources_weight_5= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_6") == 0){
		cobj->resources_weight_6= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "resources_weight_7") == 0){
		cobj->resources_weight_7= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_alliance_war_k1") == 0){
		cobj->world_alliance_war_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_alliance_war_k2") == 0){
		cobj->world_alliance_war_k2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k1") == 0){
		cobj->world_rally_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k2") == 0){
		cobj->world_rally_k2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k3") == 0){
		cobj->world_rally_k3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k4") == 0){
		cobj->world_rally_k4= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k5") == 0){
		cobj->world_rally_k5= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k6") == 0){
		cobj->world_rally_k6= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k7") == 0){
		cobj->world_rally_k7= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "world_rally_k8") == 0){
		cobj->world_rally_k8= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "glodMine_fb_k1") == 0){
		cobj->glodMine_fb_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "glodMine_fb_k2") == 0){
		cobj->glodMine_fb_k2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "glodMine_fb_k3") == 0){
		cobj->glodMine_fb_k3= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "glodMine_fb_k4") == 0){
		cobj->glodMine_fb_k4= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "invite_cost_k1") == 0){
		cobj->invite_cost_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isServerInfoBack") == 0){
		cobj->isServerInfoBack= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_gift_k2") == 0){
		cobj->alliance_gift_k2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_gift_k3") == 0){
		cobj->alliance_gift_k3= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_fun_on3_k5") == 0){
		cobj->alliance_fun_on3_k5= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "replayTime") == 0){
		cobj->replayTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cnReplayFlag") == 0){
		cobj->cnReplayFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "openmiracle") == 0){
		cobj->openmiracle= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "sceneResourceStepLoad") == 0){
		cobj->sceneResourceStepLoad= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "connectionFlag") == 0){
		cobj->connectionFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_trainGeneralId") == 0){
		cobj->m_trainGeneralId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_trainId") == 0){
		cobj->m_trainId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_speedTrainId") == 0){
		cobj->m_speedTrainId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_harvestInfo") == 0){
		cobj->m_harvestInfo= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_skillFortInfo") == 0){
		cobj->m_skillFortInfo= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "battleSpeedFactor") == 0){
		cobj->battleSpeedFactor= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "facebook_gift_k7") == 0){
		cobj->facebook_gift_k7= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_isFirstOpenDailyView") == 0){
		cobj->m_isFirstOpenDailyView= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_isFirstAskFor") == 0){
		cobj->m_isFirstAskFor= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "android_native_chat") == 0){
		cobj->android_native_chat= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isOpenForum") == 0){
		cobj->isOpenForum= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_territory_tower_switch") == 0){
		cobj->alliance_territory_tower_switch= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "hd_switch") == 0){
		cobj->hd_switch= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "hd_switch_version") == 0){
		cobj->hd_switch_version= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_territory_banner_switch") == 0){
		cobj->alliance_territory_banner_switch= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_territory_negative_effect") == 0){
		cobj->alliance_territory_negative_effect= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_territory_supermine_limit") == 0){
		cobj->alliance_territory_supermine_limit= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_territory_index") == 0){
		cobj->alliance_territory_index= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "territory_warehouse_dayStorage") == 0){
		cobj->territory_warehouse_dayStorage= (unsigned long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "territory_warehouse_totalStorage") == 0){
		cobj->territory_warehouse_totalStorage= (unsigned long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "march_formation_switch") == 0){
		cobj->march_formation_switch= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isInviteOpen") == 0){
		cobj->isInviteOpen= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isOpenEvaluate") == 0){
		cobj->isOpenEvaluate= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "popupTimes") == 0){
		cobj->popupTimes= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "nowGameCnt") == 0){
		cobj->nowGameCnt= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "maxGameCnt") == 0){
		cobj->maxGameCnt= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cnt_forbidden_swith") == 0){
		cobj->cnt_forbidden_swith= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cnt_forbidden_level") == 0){
		cobj->cnt_forbidden_level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cnt_forbidden_playingtime") == 0){
		cobj->cnt_forbidden_playingtime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "trans_res_forbidden_swith") == 0){
		cobj->trans_res_forbidden_swith= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "trans_res_limit") == 0){
		cobj->trans_res_limit= (long)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "foodMinimumSwith") == 0){
		cobj->foodMinimumSwith= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "robResSwith") == 0){
		cobj->robResSwith= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "robResLevel") == 0){
		cobj->robResLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "new_trans_kingdom_level") == 0){
		cobj->new_trans_kingdom_level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isInDataParsing") == 0){
		cobj->isInDataParsing= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isUploadPic") == 0){
		cobj->isUploadPic= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isOpenTaiwanFlag") == 0){
		cobj->isOpenTaiwanFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isOpenAnniversary") == 0){
		cobj->isOpenAnniversary= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isAnniSharePhoto") == 0){
		cobj->isAnniSharePhoto= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "anniSharePhoto") == 0){
		cobj->anniSharePhoto= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shakeAllianceFlag") == 0){
		cobj->shakeAllianceFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "picUploadFlag") == 0){
		cobj->picUploadFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isBranchOn") == 0){
		cobj->isBranchOn= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "branchOnStr") == 0){
		cobj->branchOnStr= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "dragonglass_control") == 0){
		cobj->dragonglass_control= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "equipShare_control") == 0){
		cobj->equipShare_control= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "superManFlag") == 0){
		cobj->superManFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shakeFlag") == 0){
		cobj->shakeFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shakeGuideFlag") == 0){
		cobj->shakeGuideFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shakeCmdDelayTime") == 0){
		cobj->shakeCmdDelayTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "shakePicStr") == 0){
		cobj->shakePicStr= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isMaricleunlock") == 0){
		cobj->isMaricleunlock= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isCrossService") == 0){
		cobj->isCrossService= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverType") == 0){
		cobj->serverType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "firstEnterCrossService") == 0){
		cobj->firstEnterCrossService= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "wb_fire_k1") == 0){
		cobj->wb_fire_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverMax") == 0){
		cobj->serverMax= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "chinaSwitchFlag") == 0){
		cobj->chinaSwitchFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "dbFightBeginTime") == 0){
		cobj->dbFightBeginTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "dbFightEndTime") == 0){
		cobj->dbFightEndTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bLotteryShareOpen") == 0){
		cobj->bLotteryShareOpen= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lotteryShareType") == 0){
		cobj->lotteryShareType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "useNewKey") == 0){
		cobj->useNewKey= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "fun_bindRes_switch") == 0){
		cobj->fun_bindRes_switch= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "newIcon_version") == 0){
		cobj->newIcon_version= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "newIcon_name") == 0){
		cobj->newIcon_name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "newIcon_cost") == 0){
		cobj->newIcon_cost= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "newIcon_startTime") == 0){
		cobj->newIcon_startTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "newIcon_endTime") == 0){
		cobj->newIcon_endTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "newIcon_country") == 0){
		cobj->newIcon_country= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "protectPostDelayTime") == 0){
		cobj->protectPostDelayTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "permitiCountry") == 0){
		cobj->permitiCountry= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "on_other_chinaFlag_k1") == 0){
		cobj->on_other_chinaFlag_k1= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "princessRwd_lastTime") == 0){
		cobj->princessRwd_lastTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "princessShow") == 0){
		cobj->princessShow= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "sqerSoldierRwd_lastTime") == 0){
		cobj->sqerSoldierRwd_lastTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startDarkTime") == 0){
		cobj->startDarkTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "completeDarkTime") == 0){
		cobj->completeDarkTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startLightTime") == 0){
		cobj->startLightTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "completeLightTime") == 0){
		cobj->completeLightTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "bindGuideInterval") == 0){
		cobj->bindGuideInterval= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isDirectBind") == 0){
		cobj->isDirectBind= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isCrossServerSendGiftValid") == 0){
		cobj->isCrossServerSendGiftValid= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "wonder_k9") == 0){
		cobj->wonder_k9= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "on_event4_k1") == 0){
		cobj->on_event4_k1= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "on_event4_k2") == 0){
		cobj->on_event4_k2= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "on_event4_k3") == 0){
		cobj->on_event4_k3= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "on_event4_k4") == 0){
		cobj->on_event4_k4= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "on_event4_k5") == 0){
		cobj->on_event4_k5= (string)lua_tostring(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_GlobalData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"GlobalData");
    tolua_cclass(tolua_S,"GlobalData","GlobalData","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"GlobalData");
        tolua_function(tolua_S,"changeTime",lua_cocos2dx_if_GlobalData_changeTime);
        tolua_function(tolua_S,"getTimeZone",lua_cocos2dx_if_GlobalData_getTimeZone);
        tolua_function(tolua_S,"needLogout",lua_cocos2dx_if_GlobalData_needLogout);
        tolua_function(tolua_S,"getWorldTime",lua_cocos2dx_if_GlobalData_getWorldTime);
        tolua_function(tolua_S,"isWeiboEnabled",lua_cocos2dx_if_GlobalData_isWeiboEnabled);
        tolua_function(tolua_S,"cantSwtichAccount",lua_cocos2dx_if_GlobalData_cantSwtichAccount);
        tolua_function(tolua_S,"getRand",lua_cocos2dx_if_GlobalData_getRand);
        tolua_function(tolua_S,"getTimeStamp",lua_cocos2dx_if_GlobalData_getTimeStamp);
        tolua_function(tolua_S,"isScienceValid",lua_cocos2dx_if_GlobalData_isScienceValid);
        tolua_function(tolua_S,"isVKEnabled",lua_cocos2dx_if_GlobalData_isVKEnabled);
        tolua_function(tolua_S,"isGoogle",lua_cocos2dx_if_GlobalData_isGoogle);
        tolua_function(tolua_S,"isChinaPlatForm",lua_cocos2dx_if_GlobalData_isChinaPlatForm);
        tolua_function(tolua_S,"needLogin",lua_cocos2dx_if_GlobalData_needLogin);
        tolua_function(tolua_S,"isXiaoMiPlatForm",lua_cocos2dx_if_GlobalData_isXiaoMiPlatForm);
        tolua_function(tolua_S,"getPlayerInfo",lua_cocos2dx_if_GlobalData_getPlayerInfo);
        tolua_function(tolua_S,"shared", lua_cocos2dx_if_GlobalData_shared);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_GlobalData_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_GlobalData_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(GlobalData).name();
    g_luaType[typeName] = "GlobalData";
    g_typeCast["GlobalData"] = "GlobalData";
    return 1;
}

int lua_cocos2dx_if_CCIFTouchNode_onTouchMoved(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchMoved'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCIFTouchNode:onTouchMoved");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCIFTouchNode:onTouchMoved");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchMoved'", nullptr);
            return 0;
        }
        cobj->onTouchMoved(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:onTouchMoved",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchMoved'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_onTouchEnded(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchEnded'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCIFTouchNode:onTouchEnded");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCIFTouchNode:onTouchEnded");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchEnded'", nullptr);
            return 0;
        }
        cobj->onTouchEnded(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:onTouchEnded",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchEnded'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_onRetainTouchEnded(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_onRetainTouchEnded'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCIFTouchNode:onRetainTouchEnded");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCIFTouchNode:onRetainTouchEnded");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_onRetainTouchEnded'", nullptr);
            return 0;
        }
        cobj->onRetainTouchEnded(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:onRetainTouchEnded",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_onRetainTouchEnded'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_onTouchBegan(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchBegan'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCIFTouchNode:onTouchBegan");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCIFTouchNode:onTouchBegan");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchBegan'", nullptr);
            return 0;
        }
        bool ret = cobj->onTouchBegan(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:onTouchBegan",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchBegan'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_setSwallowsTouches(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_setSwallowsTouches'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCIFTouchNode:setSwallowsTouches");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_setSwallowsTouches'", nullptr);
            return 0;
        }
        cobj->setSwallowsTouches(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:setSwallowsTouches",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_setSwallowsTouches'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_setLua(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_setLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCIFTouchNode:setLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_setLua'", nullptr);
            return 0;
        }
        cobj->setLua(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:setLua",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_setLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_onTouchCancelled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchCancelled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCIFTouchNode:onTouchCancelled");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCIFTouchNode:onTouchCancelled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchCancelled'", nullptr);
            return 0;
        }
        cobj->onTouchCancelled(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:onTouchCancelled",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_onTouchCancelled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_getLua(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_getLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_getLua'", nullptr);
            return 0;
        }
        bool ret = cobj->getLua();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:getLua",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_getLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_setTouchEnabled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_setTouchEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCIFTouchNode:setTouchEnabled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_setTouchEnabled'", nullptr);
            return 0;
        }
        cobj->setTouchEnabled(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:setTouchEnabled",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_setTouchEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_setTouchMode(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCIFTouchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCIFTouchNode_setTouchMode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Touch::DispatchMode arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCIFTouchNode:setTouchMode");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_setTouchMode'", nullptr);
            return 0;
        }
        cobj->setTouchMode(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:setTouchMode",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_setTouchMode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCIFTouchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_create'", nullptr);
            return 0;
        }
        cocos2d::extension::CCIFTouchNode* ret = cocos2d::extension::CCIFTouchNode::create();
        object_to_luaval<cocos2d::extension::CCIFTouchNode>(tolua_S, "cc.CCIFTouchNode",(cocos2d::extension::CCIFTouchNode*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCIFTouchNode:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCIFTouchNode_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCIFTouchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCIFTouchNode_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCIFTouchNode();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"cc.CCIFTouchNode");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCIFTouchNode:CCIFTouchNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCIFTouchNode_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCIFTouchNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCIFTouchNode)");
    return 0;
}

int lua_register_cocos2dx_if_CCIFTouchNode(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCIFTouchNode");
    tolua_cclass(tolua_S,"CCIFTouchNode","cc.CCIFTouchNode","cc.Node",nullptr);

    tolua_beginmodule(tolua_S,"CCIFTouchNode");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCIFTouchNode_constructor);
        tolua_function(tolua_S,"onTouchMoved",lua_cocos2dx_if_CCIFTouchNode_onTouchMoved);
        tolua_function(tolua_S,"onTouchEnded",lua_cocos2dx_if_CCIFTouchNode_onTouchEnded);
        tolua_function(tolua_S,"onRetainTouchEnded",lua_cocos2dx_if_CCIFTouchNode_onRetainTouchEnded);
        tolua_function(tolua_S,"onTouchBegan",lua_cocos2dx_if_CCIFTouchNode_onTouchBegan);
        tolua_function(tolua_S,"setSwallowsTouches",lua_cocos2dx_if_CCIFTouchNode_setSwallowsTouches);
        tolua_function(tolua_S,"setLua",lua_cocos2dx_if_CCIFTouchNode_setLua);
        tolua_function(tolua_S,"onTouchCancelled",lua_cocos2dx_if_CCIFTouchNode_onTouchCancelled);
        tolua_function(tolua_S,"getLua",lua_cocos2dx_if_CCIFTouchNode_getLua);
        tolua_function(tolua_S,"setTouchEnabled",lua_cocos2dx_if_CCIFTouchNode_setTouchEnabled);
        tolua_function(tolua_S,"setTouchMode",lua_cocos2dx_if_CCIFTouchNode_setTouchMode);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCIFTouchNode_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCIFTouchNode).name();
    g_luaType[typeName] = "cc.CCIFTouchNode";
    g_typeCast["CCIFTouchNode"] = "cc.CCIFTouchNode";
    return 1;
}

int lua_cocos2dx_if_CCCommonUtilsForLua_getSpeedEffectTime(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getSpeedEffectTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getSpeedEffectTime'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getSpeedEffectTime(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getSpeedEffectTime",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getSpeedEffectTime'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitleColor(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::extension::ControlButton* arg0;
        cocos2d::Color3B arg1;
        ok &= luaval_to_object<cocos2d::extension::ControlButton>(tolua_S, 2, "cc.ControlButton",&arg0, "CCCommonUtilsForLua:setButtonTitleColor");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:setButtonTitleColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitleColor'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setButtonTitleColor(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setButtonTitleColor",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitleColor'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getUISkinType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getUISkinType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getUISkinType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getUISkinType",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getUISkinType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingNameByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getDragonBuildingNameByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingNameByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getDragonBuildingNameByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getDragonBuildingNameByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingNameByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_hasSpeedEffect(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:hasSpeedEffect");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_hasSpeedEffect'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::hasSpeedEffect(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:hasSpeedEffect",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_hasSpeedEffect'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getDragonValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getDragonValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getDragonValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getDragonValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getDragonValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getDragonValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getIronPray(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIronPray'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getIronPray();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getIronPray",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIronPray'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPadHD(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPadHD'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isAdriodPadHD();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isAdriodPadHD",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPadHD'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToYMD(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToYMD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToYMD'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToYMD(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToYMD",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToYMD'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getQueueSortByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getQueueSortByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueSortByType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getQueueSortByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getQueueSortByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueSortByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryNegativeEffectValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getTerritoryNegativeEffectValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryNegativeEffectValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getTerritoryNegativeEffectValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getTerritoryNegativeEffectValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryNegativeEffectValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToMD(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToMD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToMD'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToMD(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToMD",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToMD'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_flySystemUpdateHint(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        double arg0;
        bool arg1;
        std::string arg2;
        FlyHintType arg3;
        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCCommonUtilsForLua:flySystemUpdateHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flySystemUpdateHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flySystemUpdateHint(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        double arg0;
        bool arg1;
        std::string arg2;
        FlyHintType arg3;
        std::string arg4;
        ok &= luaval_to_number(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCCommonUtilsForLua:flySystemUpdateHint");
        ok &= luaval_to_std_string(tolua_S, 6,&arg4, "CCCommonUtilsForLua:flySystemUpdateHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flySystemUpdateHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flySystemUpdateHint(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:flySystemUpdateHint",argc, 4);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flySystemUpdateHint'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_sendHelpshiftLog(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        const char* arg1;
        const char* arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCCommonUtilsForLua:sendHelpshiftLog"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCCommonUtilsForLua:sendHelpshiftLog"); arg1 = arg1_tmp.c_str();
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "CCCommonUtilsForLua:sendHelpshiftLog"); arg2 = arg2_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_sendHelpshiftLog'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::sendHelpshiftLog(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:sendHelpshiftLog",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_sendHelpshiftLog'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getGoldByTime(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getGoldByTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGoldByTime'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getGoldByTime(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getGoldByTime",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGoldByTime'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getBonusString(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::__Array* arg0;
        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "CCCommonUtilsForLua:getBonusString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getBonusString'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getBonusString(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getBonusString",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getBonusString'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_checkVersion(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:checkVersion");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkVersion'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::checkVersion(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:checkVersion",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkVersion'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isEquip(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isEquip");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isEquip'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isEquip(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isEquip",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isEquip'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isIOSPad(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isIOSPad'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isIOSPad();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isIOSPad",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isIOSPad'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_changeHKToChinaFlag(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:changeHKToChinaFlag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeHKToChinaFlag'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::changeHKToChinaFlag(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:changeHKToChinaFlag",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeHKToChinaFlag'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getFormationOpenNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getFormationOpenNum'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getFormationOpenNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getFormationOpenNum",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getFormationOpenNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isChina(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isChina'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isChina();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isChina",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isChina'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitlePoint(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::extension::ControlButton* arg0;
        cocos2d::Vec2 arg1;
        ok &= luaval_to_object<cocos2d::extension::ControlButton>(tolua_S, 2, "cc.ControlButton",&arg0, "CCCommonUtilsForLua:setButtonTitlePoint");
        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "CCCommonUtilsForLua:setButtonTitlePoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitlePoint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setButtonTitlePoint(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setButtonTitlePoint",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitlePoint'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        int arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getCustomPicUrl");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:getCustomPicUrl");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getCustomPicUrl(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getCustomPicUrl",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getIcon(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIcon'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getIcon(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getIcon",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIcon'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getIsUseHD(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIsUseHD'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::getIsUseHD();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getIsUseHD",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIsUseHD'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getEffPM(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getEffPM");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffPM'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getEffPM(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getEffPM",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffPM'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getQueueTypeByBuildType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getQueueTypeByBuildType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueTypeByBuildType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getQueueTypeByBuildType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getQueueTypeByBuildType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueTypeByBuildType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getNameById(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getNameById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getNameById'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getNameById(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getNameById",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getNameById'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isBtnOpen(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isBtnOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isBtnOpen'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isBtnOpen(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isBtnOpen",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isBtnOpen'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getVipEffectValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getVipEffectValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getVipEffectValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getVipEffectValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getVipEffectValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getVipEffectValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getLanguage(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getLanguage'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getLanguage();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getLanguage",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getLanguage'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftFAQ(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 1)
        {
            std::string arg0;
            ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:showHelpShiftFAQ");
            if (!ok) { break; }
            CCCommonUtilsForLua::showHelpShiftFAQ(arg0);
            lua_settop(tolua_S, 1);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 0)
        {
            CCCommonUtilsForLua::showHelpShiftFAQ();
            lua_settop(tolua_S, 1);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "CCCommonUtilsForLua:showHelpShiftFAQ",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftFAQ'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isPushNotify(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isPushNotify");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isPushNotify'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isPushNotify(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isPushNotify",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isPushNotify'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingInfoByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getDragonBuildingInfoByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingInfoByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getDragonBuildingInfoByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getDragonBuildingInfoByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingInfoByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_flyHintWithDefault(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHintWithDefault");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHintWithDefault'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHintWithDefault(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHintWithDefault");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHintWithDefault'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHintWithDefault(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        double arg4;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHintWithDefault");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:flyHintWithDefault");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHintWithDefault'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHintWithDefault(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:flyHintWithDefault",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHintWithDefault'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_covertHSBToRGB(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        int arg0;
        double arg1;
        double arg2;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:covertHSBToRGB");
        ok &= luaval_to_number(tolua_S, 3,&arg1, "CCCommonUtilsForLua:covertHSBToRGB");
        ok &= luaval_to_number(tolua_S, 4,&arg2, "CCCommonUtilsForLua:covertHSBToRGB");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_covertHSBToRGB'", nullptr);
            return 0;
        }
        cocos2d::Color3B ret = CCCommonUtilsForLua::covertHSBToRGB(arg0, arg1, arg2);
        color3b_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:covertHSBToRGB",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_covertHSBToRGB'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getRomanSprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getRomanSprite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getRomanSprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::getRomanSprite(arg0);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getRomanSprite",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getRomanSprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isUseCustomPic(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isUseCustomPic");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isUseCustomPic'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isUseCustomPic(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isUseCustomPic",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isUseCustomPic'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteMaxSize(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::Sprite* arg0;
        int arg1;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:setSpriteMaxSize");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:setSpriteMaxSize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteMaxSize'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::setSpriteMaxSize(arg0, arg1);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    if (argc == 3)
    {
        cocos2d::Sprite* arg0;
        int arg1;
        bool arg2;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:setSpriteMaxSize");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:setSpriteMaxSize");
        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCCommonUtilsForLua:setSpriteMaxSize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteMaxSize'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::setSpriteMaxSize(arg0, arg1, arg2);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setSpriteMaxSize",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteMaxSize'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isPad(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isPad'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isPad();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isPad",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isPad'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_fitContainerSizeAndAddChild(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::Node* arg0;
        cocos2d::Node* arg1;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "CCCommonUtilsForLua:fitContainerSizeAndAddChild");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:fitContainerSizeAndAddChild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_fitContainerSizeAndAddChild'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::fitContainerSizeAndAddChild(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3)
    {
        cocos2d::Node* arg0;
        cocos2d::Node* arg1;
        int arg2;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "CCCommonUtilsForLua:fitContainerSizeAndAddChild");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:fitContainerSizeAndAddChild");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:fitContainerSizeAndAddChild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_fitContainerSizeAndAddChild'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::fitContainerSizeAndAddChild(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:fitContainerSizeAndAddChild",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_fitContainerSizeAndAddChild'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_flyText(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyText(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        cocos2d::Color3B arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyText");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:flyText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyText(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3)
    {
        std::string arg0;
        cocos2d::Color3B arg1;
        double arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyText");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:flyText");
        ok &= luaval_to_number(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyText(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:flyText",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyText'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isFirstJoinAlliance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isFirstJoinAlliance'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isFirstJoinAlliance();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isFirstJoinAlliance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isFirstJoinAlliance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        cocos2d::Node* arg1;
        cocos2d::Vec2 arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "CCCommonUtilsForLua:flyUiResText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyUiResText(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        cocos2d::Node* arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Color3B arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_color3b(tolua_S, 5, &arg3, "CCCommonUtilsForLua:flyUiResText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyUiResText(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        cocos2d::Node* arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Color3B arg3;
        FloatingTypeEnum arg4;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_color3b(tolua_S, 5, &arg3, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCCommonUtilsForLua:flyUiResText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyUiResText(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6)
    {
        std::string arg0;
        cocos2d::Node* arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Color3B arg3;
        FloatingTypeEnum arg4;
        int arg5;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_color3b(tolua_S, 5, &arg3, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCCommonUtilsForLua:flyUiResText");
        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "CCCommonUtilsForLua:flyUiResText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyUiResText(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:flyUiResText",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHour(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToHour");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHour'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToHour(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToHour",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHour'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_onUploadPhoto(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        int arg1;
        int arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:onUploadPhoto");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:onUploadPhoto");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:onUploadPhoto");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_onUploadPhoto'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::onUploadPhoto(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:onUploadPhoto",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_onUploadPhoto'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_UTCDataToTimeStamp(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCCommonUtilsForLua:UTCDataToTimeStamp"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_UTCDataToTimeStamp'", nullptr);
            return 0;
        }
        long ret = CCCommonUtilsForLua::UTCDataToTimeStamp(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:UTCDataToTimeStamp",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_UTCDataToTimeStamp'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCHSM(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToUTCHSM");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCHSM'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToUTCHSM(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToUTCHSM",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCHSM'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeLeftToCountDown(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:timeLeftToCountDown");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeLeftToCountDown'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeLeftToCountDown(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    if (argc == 2)
    {
        int arg0;
        const char* arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:timeLeftToCountDown");
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCCommonUtilsForLua:timeLeftToCountDown"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeLeftToCountDown'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeLeftToCountDown(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeLeftToCountDown",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeLeftToCountDown'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_changeTimeAddUnit(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:changeTimeAddUnit");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeTimeAddUnit'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::changeTimeAddUnit(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:changeTimeAddUnit",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeTimeAddUnit'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isIosAndroidPad(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isIosAndroidPad'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isIosAndroidPad();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isIosAndroidPad",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isIosAndroidPad'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getEffFormat(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getEffFormat");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffFormat'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getEffFormat(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getEffFormat",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffFormat'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getQueueNameByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getQueueNameByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueNameByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getQueueNameByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getQueueNameByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueNameByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralBustPicById(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getGeneralBustPicById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralBustPicById'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getGeneralBustPicById(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getGeneralBustPicById",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralBustPicById'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryEffectValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getTerritoryEffectValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryEffectValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getTerritoryEffectValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getTerritoryEffectValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryEffectValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getItemPropStr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        EquipInfo* arg0;
        std::string arg1;
        int arg2;
        ok &= luaval_to_object<EquipInfo>(tolua_S, 2, "EquipInfo",&arg0, "CCCommonUtilsForLua:getItemPropStr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:getItemPropStr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:getItemPropStr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getItemPropStr'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getItemPropStr(arg0, arg1, arg2);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getItemPropStr",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getItemPropStr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getLanguageFNByLocalSN(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getLanguageFNByLocalSN");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getLanguageFNByLocalSN'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getLanguageFNByLocalSN(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getLanguageFNByLocalSN",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getLanguageFNByLocalSN'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralPicById(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getGeneralPicById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralPicById'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getGeneralPicById(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getGeneralPicById",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralPicById'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getBustIdxByName(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getBustIdxByName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getBustIdxByName'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getBustIdxByName(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getBustIdxByName",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getBustIdxByName'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getBindType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getBindType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getBindType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getBindType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getBindType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getBindType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isUseSpeUI(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isUseSpeUI'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isUseSpeUI();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isUseSpeUI",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isUseSpeUI'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isLackOfGold(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isLackOfGold");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isLackOfGold'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isLackOfGold(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isLackOfGold",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isLackOfGold'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getResGlodByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        int arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getResGlodByType");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:getResGlodByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResGlodByType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getResGlodByType(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getResGlodByType",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResGlodByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getResourceStr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getResourceStr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceStr'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getResourceStr(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getResourceStr",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceStr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl1(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        int arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCCommonUtilsForLua:getCustomPicUrl1"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:getCustomPicUrl1");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl1'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getCustomPicUrl1(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getCustomPicUrl1",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl1'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getVersionName(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getVersionName'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getVersionName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getVersionName",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getVersionName'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getToolBgByColor(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getToolBgByColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getToolBgByColor'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getToolBgByColor(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getToolBgByColor",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getToolBgByColor'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteGray(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::Sprite* arg0;
        bool arg1;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:setSpriteGray");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCCommonUtilsForLua:setSpriteGray");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteGray'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setSpriteGray(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setSpriteGray",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteGray'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setButtonSprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::extension::ControlButton* arg0;
        const char* arg1;
        ok &= luaval_to_object<cocos2d::extension::ControlButton>(tolua_S, 2, "cc.ControlButton",&arg0, "CCCommonUtilsForLua:setButtonSprite");
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCCommonUtilsForLua:setButtonSprite"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonSprite'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setButtonSprite(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setButtonSprite",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonSprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getTalentStr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        int arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getTalentStr");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:getTalentStr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTalentStr'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getTalentStr(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getTalentStr",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTalentStr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_changeAllianceFlagBGByRank(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        cocos2d::Sprite* arg0;
        int arg1;
        bool arg2;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:changeAllianceFlagBGByRank");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:changeAllianceFlagBGByRank");
        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCCommonUtilsForLua:changeAllianceFlagBGByRank");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeAllianceFlagBGByRank'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::changeAllianceFlagBGByRank(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:changeAllianceFlagBGByRank",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeAllianceFlagBGByRank'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isServerCrossOpen(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isServerCrossOpen'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isServerCrossOpen();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isServerCrossOpen",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isServerCrossOpen'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_makeOnceEffectSpr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeOnceEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeOnceEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeOnceEffectSpr(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeOnceEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeOnceEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeOnceEffectSpr(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        double arg4;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeOnceEffectSpr");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:makeOnceEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeOnceEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeOnceEffectSpr(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:makeOnceEffectSpr",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeOnceEffectSpr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftSingleFAQ(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:showHelpShiftSingleFAQ");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftSingleFAQ'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::showHelpShiftSingleFAQ(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:showHelpShiftSingleFAQ",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftSingleFAQ'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getResourceProductByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getResourceProductByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceProductByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getResourceProductByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getResourceProductByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceProductByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getParamByGroupAndKey(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getParamByGroupAndKey");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:getParamByGroupAndKey");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:getParamByGroupAndKey");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "CCCommonUtilsForLua:getParamByGroupAndKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getParamByGroupAndKey'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getParamByGroupAndKey(arg0, arg1, arg2, arg3);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getParamByGroupAndKey",argc, 4);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getParamByGroupAndKey'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getShakePicUrl(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getShakePicUrl");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getShakePicUrl'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getShakePicUrl(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getShakePicUrl",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getShakePicUrl'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getColorName(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getColorName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getColorName'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getColorName(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getColorName",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getColorName'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_makeEffectSpr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeEffectSpr(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeEffectSpr(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        int arg4;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeEffectSpr");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCCommonUtilsForLua:makeEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeEffectSpr(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:makeEffectSpr",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeEffectSpr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeInternalEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeInternalEffectSpr(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeInternalEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeInternalEffectSpr(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        int arg4;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCCommonUtilsForLua:makeInternalEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeInternalEffectSpr(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        double arg3;
        int arg4;
        double arg5;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "CCCommonUtilsForLua:makeInternalEffectSpr");
        ok &= luaval_to_number(tolua_S, 7,&arg5, "CCCommonUtilsForLua:makeInternalEffectSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeInternalEffectSpr(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:makeInternalEffectSpr",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getStateEffectValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getStateEffectValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getStateEffectValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getStateEffectValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getStateEffectValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getStateEffectValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_graylightWithCCSprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::Sprite* arg0;
        bool arg1;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:graylightWithCCSprite");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCCommonUtilsForLua:graylightWithCCSprite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_graylightWithCCSprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::graylightWithCCSprite(arg0, arg1);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:graylightWithCCSprite",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_graylightWithCCSprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHMS(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToHMS");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHMS'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToHMS(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToHMS",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHMS'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setServerHDSwitch(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setServerHDSwitch'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setServerHDSwitch();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setServerHDSwitch",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setServerHDSwitch'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getResourceNameByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getResourceNameByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceNameByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getResourceNameByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getResourceNameByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceNameByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_addResSearchPath(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addResSearchPath'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::addResSearchPath();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:addResSearchPath",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addResSearchPath'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_checkServer(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:checkServer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkServer'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::checkServer(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:checkServer",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkServer'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getMoreLanguageType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getMoreLanguageType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getMoreLanguageType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getMoreLanguageType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getMoreLanguageType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getMoreLanguageType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_showBanHelpShift(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showBanHelpShift'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::showBanHelpShift();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:showBanHelpShift",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showBanHelpShift'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_flyTextOnParent(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        cocos2d::Node* arg1;
        cocos2d::Vec2 arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyTextOnParent");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:flyTextOnParent");
        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "CCCommonUtilsForLua:flyTextOnParent");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyTextOnParent'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyTextOnParent(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        cocos2d::Node* arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Color3B arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyTextOnParent");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:flyTextOnParent");
        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "CCCommonUtilsForLua:flyTextOnParent");
        ok &= luaval_to_color3b(tolua_S, 5, &arg3, "CCCommonUtilsForLua:flyTextOnParent");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyTextOnParent'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyTextOnParent(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:flyTextOnParent",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyTextOnParent'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_recordStep(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:recordStep");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_recordStep'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::recordStep(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:recordStep",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_recordStep'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getNormalPray(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getNormalPray'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getNormalPray();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getNormalPray",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getNormalPray'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_flyHint(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHint(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHint(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        double arg4;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHint(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        double arg4;
        bool arg5;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_boolean(tolua_S, 7,&arg5, "CCCommonUtilsForLua:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHint(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 7)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        double arg4;
        bool arg5;
        double arg6;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_boolean(tolua_S, 7,&arg5, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 8,&arg6, "CCCommonUtilsForLua:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHint(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 8)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        double arg3;
        double arg4;
        bool arg5;
        double arg6;
        std::string arg7;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_boolean(tolua_S, 7,&arg5, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_number(tolua_S, 8,&arg6, "CCCommonUtilsForLua:flyHint");
        ok &= luaval_to_std_string(tolua_S, 9,&arg7, "CCCommonUtilsForLua:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::flyHint(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:flyHint",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_flyHint'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getItemBGByColor(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getItemBGByColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getItemBGByColor'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::getItemBGByColor(arg0);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getItemBGByColor",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getItemBGByColor'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getResourceLoadByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getResourceLoadByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceLoadByType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getResourceLoadByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getResourceLoadByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceLoadByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        int arg0;
        cocos2d::Node* arg1;
        cocos2d::Size arg2;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "CCCommonUtilsForLua:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::createGoodsIcon(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        int arg0;
        cocos2d::Node* arg1;
        cocos2d::Size arg2;
        cocos2d::CCLabelIF* arg3;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 5, "cc.CCLabelIF",&arg3, "CCCommonUtilsForLua:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::createGoodsIcon(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        int arg0;
        cocos2d::Node* arg1;
        cocos2d::Size arg2;
        cocos2d::CCLabelIF* arg3;
        cocos2d::CCLabelIF* arg4;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 5, "cc.CCLabelIF",&arg3, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 6, "cc.CCLabelIF",&arg4, "CCCommonUtilsForLua:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::createGoodsIcon(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6)
    {
        int arg0;
        cocos2d::Node* arg1;
        cocos2d::Size arg2;
        cocos2d::CCLabelIF* arg3;
        cocos2d::CCLabelIF* arg4;
        cocos2d::CCLabelIF* arg5;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 5, "cc.CCLabelIF",&arg3, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 6, "cc.CCLabelIF",&arg4, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 7, "cc.CCLabelIF",&arg5, "CCCommonUtilsForLua:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::createGoodsIcon(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 7)
    {
        int arg0;
        cocos2d::Node* arg1;
        cocos2d::Size arg2;
        cocos2d::CCLabelIF* arg3;
        cocos2d::CCLabelIF* arg4;
        cocos2d::CCLabelIF* arg5;
        double arg6;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 3, "cc.Node",&arg1, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 5, "cc.CCLabelIF",&arg3, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 6, "cc.CCLabelIF",&arg4, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_object<cocos2d::CCLabelIF>(tolua_S, 7, "cc.CCLabelIF",&arg5, "CCCommonUtilsForLua:createGoodsIcon");
        ok &= luaval_to_number(tolua_S, 8,&arg6, "CCCommonUtilsForLua:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::createGoodsIcon(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:createGoodsIcon",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_changeChinaFlag(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:changeChinaFlag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeChinaFlag'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::changeChinaFlag(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:changeChinaFlag",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_changeChinaFlag'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getPointByString(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getPointByString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getPointByString'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = CCCommonUtilsForLua::getPointByString(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getPointByString");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:getPointByString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getPointByString'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = CCCommonUtilsForLua::getPointByString(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getPointByString",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getPointByString'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isFormationOpen(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isFormationOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isFormationOpen'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isFormationOpen(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isFormationOpen",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isFormationOpen'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getOfficerValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getOfficerValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getOfficerValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getOfficerValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getOfficerValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getOfficerValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDate(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToDate");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDate'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToDate(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToDate",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDate'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getIsHDViewPort(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIsHDViewPort'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::getIsHDViewPort();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getIsHDViewPort",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getIsHDViewPort'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getResourceIconByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getResourceIconByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceIconByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getResourceIconByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getResourceIconByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getResourceIconByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_StringReplace(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:StringReplace");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:StringReplace");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:StringReplace");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_StringReplace'", nullptr);
            return 0;
        }
        std::string& ret = CCCommonUtilsForLua::StringReplace(arg0, arg1, arg2);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:StringReplace",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_StringReplace'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPad(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPad'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isAdriodPad();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isAdriodPad",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPad'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getTacticsStr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        int arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getTacticsStr");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:getTacticsStr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTacticsStr'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getTacticsStr(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getTacticsStr",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTacticsStr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_canOpenNewIcon(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_canOpenNewIcon'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::canOpenNewIcon();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:canOpenNewIcon",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_canOpenNewIcon'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getCurResourceByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getCurResourceByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getCurResourceByType'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getCurResourceByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getCurResourceByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getCurResourceByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getGoldBuyItem(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getGoldBuyItem");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGoldBuyItem'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getGoldBuyItem(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getGoldBuyItem",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGoldBuyItem'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_createGraySprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCCommonUtilsForLua:createGraySprite"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGraySprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::createGraySprite(arg0);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:createGraySprite",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_createGraySprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_subStrByUtf8(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        int arg1;
        int arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:subStrByUtf8");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:subStrByUtf8");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:subStrByUtf8");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_subStrByUtf8'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::subStrByUtf8(arg0, arg1, arg2);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:subStrByUtf8",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_subStrByUtf8'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        cocos2d::Color3B arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:addFilterSprite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::addFilterSprite(arg0, arg1);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    if (argc == 3)
    {
        std::string arg0;
        cocos2d::Color3B arg1;
        double arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_number(tolua_S, 4,&arg2, "CCCommonUtilsForLua:addFilterSprite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::addFilterSprite(arg0, arg1, arg2);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        cocos2d::Color3B arg1;
        double arg2;
        double arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_number(tolua_S, 4,&arg2, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:addFilterSprite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::addFilterSprite(arg0, arg1, arg2, arg3);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        cocos2d::Color3B arg1;
        double arg2;
        double arg3;
        double arg4;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_color3b(tolua_S, 3, &arg1, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_number(tolua_S, 4,&arg2, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_number(tolua_S, 5,&arg3, "CCCommonUtilsForLua:addFilterSprite");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:addFilterSprite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = CCCommonUtilsForLua::addFilterSprite(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:addFilterSprite",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCDate(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToUTCDate");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCDate'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToUTCDate(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToUTCDate",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCDate'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_checkTaiWanFlag(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkTaiWanFlag'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::checkTaiWanFlag();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:checkTaiWanFlag",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkTaiWanFlag'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getTypeArray(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getTypeArray");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTypeArray'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = CCCommonUtilsForLua::getTypeArray(arg0);
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getTypeArray",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getTypeArray'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getSoulExChangeNeedByColor(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getSoulExChangeNeedByColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getSoulExChangeNeedByColor'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getSoulExChangeNeedByColor(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getSoulExChangeNeedByColor",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getSoulExChangeNeedByColor'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isInSimulator(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isInSimulator'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isInSimulator();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isInSimulator",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isInSimulator'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isTestPlatformAndServer(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isTestPlatformAndServer'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isTestPlatformAndServer();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:isTestPlatformAndServer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isTestPlatformAndServer'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isTestPlatformAndServer(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isTestPlatformAndServer",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isTestPlatformAndServer'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_useCaptcha(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_useCaptcha'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::useCaptcha();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:useCaptcha",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_useCaptcha'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isNewIcon(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:isNewIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isNewIcon'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isNewIcon(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isNewIcon",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isNewIcon'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getItemColor(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getItemColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getItemColor'", nullptr);
            return 0;
        }
        cocos2d::Color3B ret = CCCommonUtilsForLua::getItemColor(arg0);
        color3b_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getItemColor",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getItemColor'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isShowFlagForChinese(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isShowFlagForChinese'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isShowFlagForChinese();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isShowFlagForChinese",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isShowFlagForChinese'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_split(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        const char* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCCommonUtilsForLua:split"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCCommonUtilsForLua:split"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_split'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = CCCommonUtilsForLua::split(arg0, arg1);
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:split",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_split'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_checkGeneralState(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:checkGeneralState");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkGeneralState'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::checkGeneralState(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:checkGeneralState",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_checkGeneralState'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitle(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        cocos2d::extension::ControlButton* arg0;
        const char* arg1;
        ok &= luaval_to_object<cocos2d::extension::ControlButton>(tolua_S, 2, "cc.ControlButton",&arg0, "CCCommonUtilsForLua:setButtonTitle");
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCCommonUtilsForLua:setButtonTitle"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitle'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setButtonTitle(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setButtonTitle",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitle'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_makeTwoAnimatSpr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        int arg3;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeTwoAnimatSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeTwoAnimatSpr(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        int arg3;
        double arg4;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeTwoAnimatSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeTwoAnimatSpr(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6)
    {
        cocos2d::Sprite* arg0;
        std::string arg1;
        int arg2;
        int arg3;
        double arg4;
        int arg5;
        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "CCCommonUtilsForLua:makeTwoAnimatSpr");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeTwoAnimatSpr'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::makeTwoAnimatSpr(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:makeTwoAnimatSpr",argc, 4);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_makeTwoAnimatSpr'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getArmIconByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getArmIconByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getArmIconByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getArmIconByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getArmIconByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getArmIconByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getNextFormationOpenLevel(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getNextFormationOpenLevel'", nullptr);
            return 0;
        }
        int ret = CCCommonUtilsForLua::getNextFormationOpenLevel();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getNextFormationOpenLevel",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getNextFormationOpenLevel'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getGenHeadBgByColor(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getGenHeadBgByColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGenHeadBgByColor'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getGenHeadBgByColor(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getGenHeadBgByColor",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGenHeadBgByColor'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralSkill(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getGeneralSkill");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralSkill'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getGeneralSkill(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getGeneralSkill",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralSkill'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDHM(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        long arg0;
        ok &= luaval_to_long(tolua_S, 2, &arg0, "CCCommonUtilsForLua:timeStampToDHM");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDHM'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::timeStampToDHM(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:timeStampToDHM",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDHM'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getQueueIconByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getQueueIconByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueIconByType'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getQueueIconByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getQueueIconByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getQueueIconByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_replaceString(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:replaceString");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:replaceString");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "CCCommonUtilsForLua:replaceString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_replaceString'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::replaceString(arg0, arg1, arg2);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:replaceString",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_replaceString'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setIsUseHD(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "CCCommonUtilsForLua:setIsUseHD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setIsUseHD'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setIsUseHD(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setIsUseHD",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setIsUseHD'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getEffectValueByNum(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getEffectValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffectValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getEffectValueByNum(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2)
    {
        int arg0;
        bool arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:getEffectValueByNum");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCCommonUtilsForLua:getEffectValueByNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffectValueByNum'", nullptr);
            return 0;
        }
        double ret = CCCommonUtilsForLua::getEffectValueByNum(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getEffectValueByNum",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getEffectValueByNum'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_isEnoughResourceByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        int arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCCommonUtilsForLua:isEnoughResourceByType");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCCommonUtilsForLua:isEnoughResourceByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isEnoughResourceByType'", nullptr);
            return 0;
        }
        bool ret = CCCommonUtilsForLua::isEnoughResourceByType(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:isEnoughResourceByType",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_isEnoughResourceByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_getPropById(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCCommonUtilsForLua:getPropById");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CCCommonUtilsForLua:getPropById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getPropById'", nullptr);
            return 0;
        }
        std::string ret = CCCommonUtilsForLua::getPropById(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:getPropById",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_getPropById'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_showEmulatorBanHelpShift(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showEmulatorBanHelpShift'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::showEmulatorBanHelpShift();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:showEmulatorBanHelpShift",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_showEmulatorBanHelpShift'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setIsHDViewPort(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "CCCommonUtilsForLua:setIsHDViewPort");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setIsHDViewPort'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setIsHDViewPort(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setIsHDViewPort",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setIsHDViewPort'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCCommonUtilsForLua_setCurUISkinType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCCommonUtilsForLua",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setCurUISkinType'", nullptr);
            return 0;
        }
        CCCommonUtilsForLua::setCurUISkinType();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCCommonUtilsForLua:setCurUISkinType",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCCommonUtilsForLua_setCurUISkinType'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCCommonUtilsForLua_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCCommonUtilsForLua)");
    return 0;
}

int lua_register_cocos2dx_if_CCCommonUtilsForLua(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCCommonUtilsForLua");
    tolua_cclass(tolua_S,"CCCommonUtilsForLua","CCCommonUtilsForLua","",nullptr);

    tolua_beginmodule(tolua_S,"CCCommonUtilsForLua");
        tolua_function(tolua_S,"getSpeedEffectTime", lua_cocos2dx_if_CCCommonUtilsForLua_getSpeedEffectTime);
        tolua_function(tolua_S,"setButtonTitleColor", lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitleColor);
        tolua_function(tolua_S,"getUISkinType", lua_cocos2dx_if_CCCommonUtilsForLua_getUISkinType);
        tolua_function(tolua_S,"getDragonBuildingNameByType", lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingNameByType);
        tolua_function(tolua_S,"hasSpeedEffect", lua_cocos2dx_if_CCCommonUtilsForLua_hasSpeedEffect);
        tolua_function(tolua_S,"getDragonValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getDragonValueByNum);
        tolua_function(tolua_S,"getIronPray", lua_cocos2dx_if_CCCommonUtilsForLua_getIronPray);
        tolua_function(tolua_S,"isAdriodPadHD", lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPadHD);
        tolua_function(tolua_S,"timeStampToYMD", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToYMD);
        tolua_function(tolua_S,"getQueueSortByType", lua_cocos2dx_if_CCCommonUtilsForLua_getQueueSortByType);
        tolua_function(tolua_S,"getTerritoryNegativeEffectValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryNegativeEffectValueByNum);
        tolua_function(tolua_S,"timeStampToMD", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToMD);
        tolua_function(tolua_S,"flySystemUpdateHint", lua_cocos2dx_if_CCCommonUtilsForLua_flySystemUpdateHint);
        tolua_function(tolua_S,"sendHelpshiftLog", lua_cocos2dx_if_CCCommonUtilsForLua_sendHelpshiftLog);
        tolua_function(tolua_S,"getGoldByTime", lua_cocos2dx_if_CCCommonUtilsForLua_getGoldByTime);
        tolua_function(tolua_S,"getBonusString", lua_cocos2dx_if_CCCommonUtilsForLua_getBonusString);
        tolua_function(tolua_S,"checkVersion", lua_cocos2dx_if_CCCommonUtilsForLua_checkVersion);
        tolua_function(tolua_S,"isEquip", lua_cocos2dx_if_CCCommonUtilsForLua_isEquip);
        tolua_function(tolua_S,"isIOSPad", lua_cocos2dx_if_CCCommonUtilsForLua_isIOSPad);
        tolua_function(tolua_S,"changeHKToChinaFlag", lua_cocos2dx_if_CCCommonUtilsForLua_changeHKToChinaFlag);
        tolua_function(tolua_S,"getFormationOpenNum", lua_cocos2dx_if_CCCommonUtilsForLua_getFormationOpenNum);
        tolua_function(tolua_S,"isChina", lua_cocos2dx_if_CCCommonUtilsForLua_isChina);
        tolua_function(tolua_S,"setButtonTitlePoint", lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitlePoint);
        tolua_function(tolua_S,"getCustomPicUrl", lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl);
        tolua_function(tolua_S,"getIcon", lua_cocos2dx_if_CCCommonUtilsForLua_getIcon);
        tolua_function(tolua_S,"getIsUseHD", lua_cocos2dx_if_CCCommonUtilsForLua_getIsUseHD);
        tolua_function(tolua_S,"getEffPM", lua_cocos2dx_if_CCCommonUtilsForLua_getEffPM);
        tolua_function(tolua_S,"getQueueTypeByBuildType", lua_cocos2dx_if_CCCommonUtilsForLua_getQueueTypeByBuildType);
        tolua_function(tolua_S,"getNameById", lua_cocos2dx_if_CCCommonUtilsForLua_getNameById);
        tolua_function(tolua_S,"isBtnOpen", lua_cocos2dx_if_CCCommonUtilsForLua_isBtnOpen);
        tolua_function(tolua_S,"getVipEffectValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getVipEffectValueByNum);
        tolua_function(tolua_S,"getLanguage", lua_cocos2dx_if_CCCommonUtilsForLua_getLanguage);
        tolua_function(tolua_S,"showHelpShiftFAQ", lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftFAQ);
        tolua_function(tolua_S,"isPushNotify", lua_cocos2dx_if_CCCommonUtilsForLua_isPushNotify);
        tolua_function(tolua_S,"getDragonBuildingInfoByType", lua_cocos2dx_if_CCCommonUtilsForLua_getDragonBuildingInfoByType);
        tolua_function(tolua_S,"flyHintWithDefault", lua_cocos2dx_if_CCCommonUtilsForLua_flyHintWithDefault);
        tolua_function(tolua_S,"covertHSBToRGB", lua_cocos2dx_if_CCCommonUtilsForLua_covertHSBToRGB);
        tolua_function(tolua_S,"getRomanSprite", lua_cocos2dx_if_CCCommonUtilsForLua_getRomanSprite);
        tolua_function(tolua_S,"isUseCustomPic", lua_cocos2dx_if_CCCommonUtilsForLua_isUseCustomPic);
        tolua_function(tolua_S,"setSpriteMaxSize", lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteMaxSize);
        tolua_function(tolua_S,"isPad", lua_cocos2dx_if_CCCommonUtilsForLua_isPad);
        tolua_function(tolua_S,"fitContainerSizeAndAddChild", lua_cocos2dx_if_CCCommonUtilsForLua_fitContainerSizeAndAddChild);
        tolua_function(tolua_S,"flyText", lua_cocos2dx_if_CCCommonUtilsForLua_flyText);
        tolua_function(tolua_S,"isFirstJoinAlliance", lua_cocos2dx_if_CCCommonUtilsForLua_isFirstJoinAlliance);
        tolua_function(tolua_S,"flyUiResText", lua_cocos2dx_if_CCCommonUtilsForLua_flyUiResText);
        tolua_function(tolua_S,"timeStampToHour", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHour);
        tolua_function(tolua_S,"onUploadPhoto", lua_cocos2dx_if_CCCommonUtilsForLua_onUploadPhoto);
        tolua_function(tolua_S,"UTCDataToTimeStamp", lua_cocos2dx_if_CCCommonUtilsForLua_UTCDataToTimeStamp);
        tolua_function(tolua_S,"timeStampToUTCHSM", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCHSM);
        tolua_function(tolua_S,"timeLeftToCountDown", lua_cocos2dx_if_CCCommonUtilsForLua_timeLeftToCountDown);
        tolua_function(tolua_S,"changeTimeAddUnit", lua_cocos2dx_if_CCCommonUtilsForLua_changeTimeAddUnit);
        tolua_function(tolua_S,"isIosAndroidPad", lua_cocos2dx_if_CCCommonUtilsForLua_isIosAndroidPad);
        tolua_function(tolua_S,"getEffFormat", lua_cocos2dx_if_CCCommonUtilsForLua_getEffFormat);
        tolua_function(tolua_S,"getQueueNameByType", lua_cocos2dx_if_CCCommonUtilsForLua_getQueueNameByType);
        tolua_function(tolua_S,"getGeneralBustPicById", lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralBustPicById);
        tolua_function(tolua_S,"getTerritoryEffectValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getTerritoryEffectValueByNum);
        tolua_function(tolua_S,"getItemPropStr", lua_cocos2dx_if_CCCommonUtilsForLua_getItemPropStr);
        tolua_function(tolua_S,"getLanguageFNByLocalSN", lua_cocos2dx_if_CCCommonUtilsForLua_getLanguageFNByLocalSN);
        tolua_function(tolua_S,"getGeneralPicById", lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralPicById);
        tolua_function(tolua_S,"getBustIdxByName", lua_cocos2dx_if_CCCommonUtilsForLua_getBustIdxByName);
        tolua_function(tolua_S,"getBindType", lua_cocos2dx_if_CCCommonUtilsForLua_getBindType);
        tolua_function(tolua_S,"isUseSpeUI", lua_cocos2dx_if_CCCommonUtilsForLua_isUseSpeUI);
        tolua_function(tolua_S,"isLackOfGold", lua_cocos2dx_if_CCCommonUtilsForLua_isLackOfGold);
        tolua_function(tolua_S,"getResGlodByType", lua_cocos2dx_if_CCCommonUtilsForLua_getResGlodByType);
        tolua_function(tolua_S,"getResourceStr", lua_cocos2dx_if_CCCommonUtilsForLua_getResourceStr);
        tolua_function(tolua_S,"getCustomPicUrl1", lua_cocos2dx_if_CCCommonUtilsForLua_getCustomPicUrl1);
        tolua_function(tolua_S,"getVersionName", lua_cocos2dx_if_CCCommonUtilsForLua_getVersionName);
        tolua_function(tolua_S,"getToolBgByColor", lua_cocos2dx_if_CCCommonUtilsForLua_getToolBgByColor);
        tolua_function(tolua_S,"setSpriteGray", lua_cocos2dx_if_CCCommonUtilsForLua_setSpriteGray);
        tolua_function(tolua_S,"setButtonSprite", lua_cocos2dx_if_CCCommonUtilsForLua_setButtonSprite);
        tolua_function(tolua_S,"getTalentStr", lua_cocos2dx_if_CCCommonUtilsForLua_getTalentStr);
        tolua_function(tolua_S,"changeAllianceFlagBGByRank", lua_cocos2dx_if_CCCommonUtilsForLua_changeAllianceFlagBGByRank);
        tolua_function(tolua_S,"isServerCrossOpen", lua_cocos2dx_if_CCCommonUtilsForLua_isServerCrossOpen);
        tolua_function(tolua_S,"makeOnceEffectSpr", lua_cocos2dx_if_CCCommonUtilsForLua_makeOnceEffectSpr);
        tolua_function(tolua_S,"showHelpShiftSingleFAQ", lua_cocos2dx_if_CCCommonUtilsForLua_showHelpShiftSingleFAQ);
        tolua_function(tolua_S,"getResourceProductByType", lua_cocos2dx_if_CCCommonUtilsForLua_getResourceProductByType);
        tolua_function(tolua_S,"getParamByGroupAndKey", lua_cocos2dx_if_CCCommonUtilsForLua_getParamByGroupAndKey);
        tolua_function(tolua_S,"getShakePicUrl", lua_cocos2dx_if_CCCommonUtilsForLua_getShakePicUrl);
        tolua_function(tolua_S,"getColorName", lua_cocos2dx_if_CCCommonUtilsForLua_getColorName);
        tolua_function(tolua_S,"makeEffectSpr", lua_cocos2dx_if_CCCommonUtilsForLua_makeEffectSpr);
        tolua_function(tolua_S,"makeInternalEffectSpr", lua_cocos2dx_if_CCCommonUtilsForLua_makeInternalEffectSpr);
        tolua_function(tolua_S,"getStateEffectValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getStateEffectValueByNum);
        tolua_function(tolua_S,"graylightWithCCSprite", lua_cocos2dx_if_CCCommonUtilsForLua_graylightWithCCSprite);
        tolua_function(tolua_S,"timeStampToHMS", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToHMS);
        tolua_function(tolua_S,"setServerHDSwitch", lua_cocos2dx_if_CCCommonUtilsForLua_setServerHDSwitch);
        tolua_function(tolua_S,"getResourceNameByType", lua_cocos2dx_if_CCCommonUtilsForLua_getResourceNameByType);
        tolua_function(tolua_S,"addResSearchPath", lua_cocos2dx_if_CCCommonUtilsForLua_addResSearchPath);
        tolua_function(tolua_S,"checkServer", lua_cocos2dx_if_CCCommonUtilsForLua_checkServer);
        tolua_function(tolua_S,"getMoreLanguageType", lua_cocos2dx_if_CCCommonUtilsForLua_getMoreLanguageType);
        tolua_function(tolua_S,"showBanHelpShift", lua_cocos2dx_if_CCCommonUtilsForLua_showBanHelpShift);
        tolua_function(tolua_S,"flyTextOnParent", lua_cocos2dx_if_CCCommonUtilsForLua_flyTextOnParent);
        tolua_function(tolua_S,"recordStep", lua_cocos2dx_if_CCCommonUtilsForLua_recordStep);
        tolua_function(tolua_S,"getNormalPray", lua_cocos2dx_if_CCCommonUtilsForLua_getNormalPray);
        tolua_function(tolua_S,"flyHint", lua_cocos2dx_if_CCCommonUtilsForLua_flyHint);
        tolua_function(tolua_S,"getItemBGByColor", lua_cocos2dx_if_CCCommonUtilsForLua_getItemBGByColor);
        tolua_function(tolua_S,"getResourceLoadByType", lua_cocos2dx_if_CCCommonUtilsForLua_getResourceLoadByType);
        tolua_function(tolua_S,"createGoodsIcon", lua_cocos2dx_if_CCCommonUtilsForLua_createGoodsIcon);
        tolua_function(tolua_S,"changeChinaFlag", lua_cocos2dx_if_CCCommonUtilsForLua_changeChinaFlag);
        tolua_function(tolua_S,"getPointByString", lua_cocos2dx_if_CCCommonUtilsForLua_getPointByString);
        tolua_function(tolua_S,"isFormationOpen", lua_cocos2dx_if_CCCommonUtilsForLua_isFormationOpen);
        tolua_function(tolua_S,"getOfficerValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getOfficerValueByNum);
        tolua_function(tolua_S,"timeStampToDate", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDate);
        tolua_function(tolua_S,"getIsHDViewPort", lua_cocos2dx_if_CCCommonUtilsForLua_getIsHDViewPort);
        tolua_function(tolua_S,"getResourceIconByType", lua_cocos2dx_if_CCCommonUtilsForLua_getResourceIconByType);
        tolua_function(tolua_S,"StringReplace", lua_cocos2dx_if_CCCommonUtilsForLua_StringReplace);
        tolua_function(tolua_S,"isAdriodPad", lua_cocos2dx_if_CCCommonUtilsForLua_isAdriodPad);
        tolua_function(tolua_S,"getTacticsStr", lua_cocos2dx_if_CCCommonUtilsForLua_getTacticsStr);
        tolua_function(tolua_S,"canOpenNewIcon", lua_cocos2dx_if_CCCommonUtilsForLua_canOpenNewIcon);
        tolua_function(tolua_S,"getCurResourceByType", lua_cocos2dx_if_CCCommonUtilsForLua_getCurResourceByType);
        tolua_function(tolua_S,"getGoldBuyItem", lua_cocos2dx_if_CCCommonUtilsForLua_getGoldBuyItem);
        tolua_function(tolua_S,"createGraySprite", lua_cocos2dx_if_CCCommonUtilsForLua_createGraySprite);
        tolua_function(tolua_S,"subStrByUtf8", lua_cocos2dx_if_CCCommonUtilsForLua_subStrByUtf8);
        tolua_function(tolua_S,"addFilterSprite", lua_cocos2dx_if_CCCommonUtilsForLua_addFilterSprite);
        tolua_function(tolua_S,"timeStampToUTCDate", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToUTCDate);
        tolua_function(tolua_S,"checkTaiWanFlag", lua_cocos2dx_if_CCCommonUtilsForLua_checkTaiWanFlag);
        tolua_function(tolua_S,"getTypeArray", lua_cocos2dx_if_CCCommonUtilsForLua_getTypeArray);
        tolua_function(tolua_S,"getSoulExChangeNeedByColor", lua_cocos2dx_if_CCCommonUtilsForLua_getSoulExChangeNeedByColor);
        tolua_function(tolua_S,"isInSimulator", lua_cocos2dx_if_CCCommonUtilsForLua_isInSimulator);
        tolua_function(tolua_S,"isTestPlatformAndServer", lua_cocos2dx_if_CCCommonUtilsForLua_isTestPlatformAndServer);
        tolua_function(tolua_S,"useCaptcha", lua_cocos2dx_if_CCCommonUtilsForLua_useCaptcha);
        tolua_function(tolua_S,"isNewIcon", lua_cocos2dx_if_CCCommonUtilsForLua_isNewIcon);
        tolua_function(tolua_S,"getItemColor", lua_cocos2dx_if_CCCommonUtilsForLua_getItemColor);
        tolua_function(tolua_S,"isShowFlagForChinese", lua_cocos2dx_if_CCCommonUtilsForLua_isShowFlagForChinese);
        tolua_function(tolua_S,"split", lua_cocos2dx_if_CCCommonUtilsForLua_split);
        tolua_function(tolua_S,"checkGeneralState", lua_cocos2dx_if_CCCommonUtilsForLua_checkGeneralState);
        tolua_function(tolua_S,"setButtonTitle", lua_cocos2dx_if_CCCommonUtilsForLua_setButtonTitle);
        tolua_function(tolua_S,"makeTwoAnimatSpr", lua_cocos2dx_if_CCCommonUtilsForLua_makeTwoAnimatSpr);
        tolua_function(tolua_S,"getArmIconByType", lua_cocos2dx_if_CCCommonUtilsForLua_getArmIconByType);
        tolua_function(tolua_S,"getNextFormationOpenLevel", lua_cocos2dx_if_CCCommonUtilsForLua_getNextFormationOpenLevel);
        tolua_function(tolua_S,"getGenHeadBgByColor", lua_cocos2dx_if_CCCommonUtilsForLua_getGenHeadBgByColor);
        tolua_function(tolua_S,"getGeneralSkill", lua_cocos2dx_if_CCCommonUtilsForLua_getGeneralSkill);
        tolua_function(tolua_S,"timeStampToDHM", lua_cocos2dx_if_CCCommonUtilsForLua_timeStampToDHM);
        tolua_function(tolua_S,"getQueueIconByType", lua_cocos2dx_if_CCCommonUtilsForLua_getQueueIconByType);
        tolua_function(tolua_S,"replaceString", lua_cocos2dx_if_CCCommonUtilsForLua_replaceString);
        tolua_function(tolua_S,"setIsUseHD", lua_cocos2dx_if_CCCommonUtilsForLua_setIsUseHD);
        tolua_function(tolua_S,"getEffectValueByNum", lua_cocos2dx_if_CCCommonUtilsForLua_getEffectValueByNum);
        tolua_function(tolua_S,"isEnoughResourceByType", lua_cocos2dx_if_CCCommonUtilsForLua_isEnoughResourceByType);
        tolua_function(tolua_S,"getPropById", lua_cocos2dx_if_CCCommonUtilsForLua_getPropById);
        tolua_function(tolua_S,"showEmulatorBanHelpShift", lua_cocos2dx_if_CCCommonUtilsForLua_showEmulatorBanHelpShift);
        tolua_function(tolua_S,"setIsHDViewPort", lua_cocos2dx_if_CCCommonUtilsForLua_setIsHDViewPort);
        tolua_function(tolua_S,"setCurUISkinType", lua_cocos2dx_if_CCCommonUtilsForLua_setCurUISkinType);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCCommonUtilsForLua).name();
    g_luaType[typeName] = "CCCommonUtilsForLua";
    g_typeCast["CCCommonUtilsForLua"] = "CCCommonUtilsForLua";
    return 1;
}

int lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndexAsync(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:doResourceByGeneralIndexAsync");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndexAsync'", nullptr);
            return 0;
        }
        CCLoadSprite::doResourceByGeneralIndexAsync(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doResourceByGeneralIndexAsync",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndexAsync'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_createSprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 3)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:createSprite"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:createSprite");
            if (!ok) { break; }
            CCLoadSpriteType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCLoadSprite:createSprite");
            if (!ok) { break; }
            cocos2d::Sprite* ret = CCLoadSprite::createSprite(arg0, arg1, arg2);
            object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 1)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:createSprite"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::Sprite* ret = CCLoadSprite::createSprite(arg0);
            object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "CCLoadSprite:createSprite",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_createSprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_loadResourceBySceneId(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:loadResourceBySceneId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_loadResourceBySceneId'", nullptr);
            return 0;
        }
        CCLoadSprite::loadResourceBySceneId(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2)
    {
        int arg0;
        cocos2d::__Dictionary* arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:loadResourceBySceneId");
        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 3, "CCDictionary",&arg1, "CCLoadSprite:loadResourceBySceneId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_loadResourceBySceneId'", nullptr);
            return 0;
        }
        CCLoadSprite::loadResourceBySceneId(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:loadResourceBySceneId",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_loadResourceBySceneId'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByName(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:releaseDynamicResourceByName"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByName'", nullptr);
            return 0;
        }
        CCLoadSprite::releaseDynamicResourceByName(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:releaseDynamicResourceByName",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByName'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForWorld(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForWorld'", nullptr);
            return 0;
        }
        CCLoadSprite::releaseCommonResourceForWorld();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:releaseCommonResourceForWorld",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForWorld'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_createScale9Sprite(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:createScale9Sprite"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_createScale9Sprite'", nullptr);
            return 0;
        }
        cocos2d::ui::Scale9Sprite* ret = CCLoadSprite::createScale9Sprite(arg0);
        object_to_luaval<cocos2d::ui::Scale9Sprite>(tolua_S, "ccui.Scale9Sprite",(cocos2d::ui::Scale9Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:createScale9Sprite",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_createScale9Sprite'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_getSpriteSize(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        int arg1;
        const char* arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:getSpriteSize"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCLoadSprite:getSpriteSize");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "CCLoadSprite:getSpriteSize"); arg2 = arg2_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_getSpriteSize'", nullptr);
            return 0;
        }
        cocos2d::Size ret = CCLoadSprite::getSpriteSize(arg0, arg1, arg2);
        size_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:getSpriteSize",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_getSpriteSize'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        bool arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:doResourceByGeneralIndex");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:doResourceByGeneralIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndex'", nullptr);
            return 0;
        }
        CCLoadSprite::doResourceByGeneralIndex(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doResourceByGeneralIndex",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_doResourceByImperialIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        bool arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:doResourceByImperialIndex");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:doResourceByImperialIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByImperialIndex'", nullptr);
            return 0;
        }
        CCLoadSprite::doResourceByImperialIndex(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doResourceByImperialIndex",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByImperialIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        CCLoadSpriteType arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:releaseDynamicResourceByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByType'", nullptr);
            return 0;
        }
        CCLoadSprite::releaseDynamicResourceByType(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:releaseDynamicResourceByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_releaseResourceBySceneId(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:releaseResourceBySceneId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_releaseResourceBySceneId'", nullptr);
            return 0;
        }
        CCLoadSprite::releaseResourceBySceneId(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2)
    {
        int arg0;
        cocos2d::__Dictionary* arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:releaseResourceBySceneId");
        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 3, "CCDictionary",&arg1, "CCLoadSprite:releaseResourceBySceneId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_releaseResourceBySceneId'", nullptr);
            return 0;
        }
        CCLoadSprite::releaseResourceBySceneId(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:releaseResourceBySceneId",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_releaseResourceBySceneId'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_checkHaveLoadCommonRes(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:checkHaveLoadCommonRes");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_checkHaveLoadCommonRes'", nullptr);
            return 0;
        }
        bool ret = CCLoadSprite::checkHaveLoadCommonRes(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:checkHaveLoadCommonRes",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_checkHaveLoadCommonRes'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_loadResource(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:loadResource"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_loadResource'", nullptr);
            return 0;
        }
        cocos2d::SpriteFrame* ret = CCLoadSprite::loadResource(arg0);
        object_to_luaval<cocos2d::SpriteFrame>(tolua_S, "cc.SpriteFrame",(cocos2d::SpriteFrame*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:loadResource",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_loadResource'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_loadCommonResource(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_loadCommonResource'", nullptr);
            return 0;
        }
        CCLoadSprite::loadCommonResource();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:loadCommonResource",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_loadCommonResource'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_loadLoacalResource(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        bool arg1;
        CCLoadSpriteType arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:loadLoacalResource"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:loadLoacalResource");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "CCLoadSprite:loadLoacalResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_loadLoacalResource'", nullptr);
            return 0;
        }
        cocos2d::SpriteFrame* ret = CCLoadSprite::loadLoacalResource(arg0, arg1, arg2);
        object_to_luaval<cocos2d::SpriteFrame>(tolua_S, "cc.SpriteFrame",(cocos2d::SpriteFrame*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:loadLoacalResource",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_loadLoacalResource'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_doResourceByCommonIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        bool arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:doResourceByCommonIndex");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:doResourceByCommonIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByCommonIndex'", nullptr);
            return 0;
        }
        int ret = CCLoadSprite::doResourceByCommonIndex(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 3)
    {
        int arg0;
        bool arg1;
        bool arg2;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:doResourceByCommonIndex");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:doResourceByCommonIndex");
        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCLoadSprite:doResourceByCommonIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByCommonIndex'", nullptr);
            return 0;
        }
        int ret = CCLoadSprite::doResourceByCommonIndex(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doResourceByCommonIndex",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByCommonIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_getSF(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:getSF"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_getSF'", nullptr);
            return 0;
        }
        cocos2d::SpriteFrame* ret = CCLoadSprite::getSF(arg0);
        object_to_luaval<cocos2d::SpriteFrame>(tolua_S, "cc.SpriteFrame",(cocos2d::SpriteFrame*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:getSF",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_getSF'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_doLoadResource(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        int arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:doLoadResource"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCLoadSprite:doLoadResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doLoadResource'", nullptr);
            return 0;
        }
        CCLoadSprite::doLoadResource(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3)
    {
        const char* arg0;
        int arg1;
        bool arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:doLoadResource"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCLoadSprite:doLoadResource");
        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCLoadSprite:doLoadResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doLoadResource'", nullptr);
            return 0;
        }
        CCLoadSprite::doLoadResource(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4)
    {
        const char* arg0;
        int arg1;
        bool arg2;
        bool arg3;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCLoadSprite:doLoadResource"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCLoadSprite:doLoadResource");
        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCLoadSprite:doLoadResource");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "CCLoadSprite:doLoadResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doLoadResource'", nullptr);
            return 0;
        }
        CCLoadSprite::doLoadResource(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doLoadResource",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doLoadResource'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForBattle(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForBattle'", nullptr);
            return 0;
        }
        CCLoadSprite::releaseCommonResourceForBattle();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:releaseCommonResourceForBattle",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForBattle'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_doResourceByPathIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        int arg1;
        bool arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCLoadSprite:doResourceByPathIndex");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "CCLoadSprite:doResourceByPathIndex");
        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "CCLoadSprite:doResourceByPathIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByPathIndex'", nullptr);
            return 0;
        }
        CCLoadSprite::doResourceByPathIndex(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doResourceByPathIndex",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByPathIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLoadSprite_doResourceByWorldIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCLoadSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        bool arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "CCLoadSprite:doResourceByWorldIndex");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "CCLoadSprite:doResourceByWorldIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByWorldIndex'", nullptr);
            return 0;
        }
        CCLoadSprite::doResourceByWorldIndex(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCLoadSprite:doResourceByWorldIndex",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLoadSprite_doResourceByWorldIndex'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCLoadSprite_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCLoadSprite)");
    return 0;
}

int lua_register_cocos2dx_if_CCLoadSprite(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCLoadSprite");
    tolua_cclass(tolua_S,"CCLoadSprite","CCLoadSprite","",nullptr);

    tolua_beginmodule(tolua_S,"CCLoadSprite");
        tolua_function(tolua_S,"doResourceByGeneralIndexAsync", lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndexAsync);
        tolua_function(tolua_S,"createSprite", lua_cocos2dx_if_CCLoadSprite_createSprite);
        tolua_function(tolua_S,"loadResourceBySceneId", lua_cocos2dx_if_CCLoadSprite_loadResourceBySceneId);
        tolua_function(tolua_S,"releaseDynamicResourceByName", lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByName);
        tolua_function(tolua_S,"releaseCommonResourceForWorld", lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForWorld);
        tolua_function(tolua_S,"createScale9Sprite", lua_cocos2dx_if_CCLoadSprite_createScale9Sprite);
        tolua_function(tolua_S,"getSpriteSize", lua_cocos2dx_if_CCLoadSprite_getSpriteSize);
        tolua_function(tolua_S,"doResourceByGeneralIndex", lua_cocos2dx_if_CCLoadSprite_doResourceByGeneralIndex);
        tolua_function(tolua_S,"doResourceByImperialIndex", lua_cocos2dx_if_CCLoadSprite_doResourceByImperialIndex);
        tolua_function(tolua_S,"releaseDynamicResourceByType", lua_cocos2dx_if_CCLoadSprite_releaseDynamicResourceByType);
        tolua_function(tolua_S,"releaseResourceBySceneId", lua_cocos2dx_if_CCLoadSprite_releaseResourceBySceneId);
        tolua_function(tolua_S,"checkHaveLoadCommonRes", lua_cocos2dx_if_CCLoadSprite_checkHaveLoadCommonRes);
        tolua_function(tolua_S,"loadResource", lua_cocos2dx_if_CCLoadSprite_loadResource);
        tolua_function(tolua_S,"loadCommonResource", lua_cocos2dx_if_CCLoadSprite_loadCommonResource);
        tolua_function(tolua_S,"loadLoacalResource", lua_cocos2dx_if_CCLoadSprite_loadLoacalResource);
        tolua_function(tolua_S,"doResourceByCommonIndex", lua_cocos2dx_if_CCLoadSprite_doResourceByCommonIndex);
        tolua_function(tolua_S,"getSF", lua_cocos2dx_if_CCLoadSprite_getSF);
        tolua_function(tolua_S,"doLoadResource", lua_cocos2dx_if_CCLoadSprite_doLoadResource);
        tolua_function(tolua_S,"releaseCommonResourceForBattle", lua_cocos2dx_if_CCLoadSprite_releaseCommonResourceForBattle);
        tolua_function(tolua_S,"doResourceByPathIndex", lua_cocos2dx_if_CCLoadSprite_doResourceByPathIndex);
        tolua_function(tolua_S,"doResourceByWorldIndex", lua_cocos2dx_if_CCLoadSprite_doResourceByWorldIndex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCLoadSprite).name();
    g_luaType[typeName] = "CCLoadSprite";
    g_typeCast["CCLoadSprite"] = "CCLoadSprite";
    return 1;
}

int lua_cocos2dx_if_CCSafeNotificationCenter_removeObserver(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCSafeNotificationCenter* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCSafeNotificationCenter",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCSafeNotificationCenter*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCSafeNotificationCenter_removeObserver'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        const char* arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "cc.CCSafeNotificationCenter:removeObserver");

        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "cc.CCSafeNotificationCenter:removeObserver"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_removeObserver'", nullptr);
            return 0;
        }
        cobj->removeObserver(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCSafeNotificationCenter:removeObserver",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_removeObserver'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCSafeNotificationCenter_postNotification(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCSafeNotificationCenter* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCSafeNotificationCenter",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCSafeNotificationCenter*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCSafeNotificationCenter_postNotification'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCSafeNotificationCenter:postNotification"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_postNotification'", nullptr);
            return 0;
        }
        cobj->postNotification(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        const char* arg0;
        cocos2d::Ref* arg1;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCSafeNotificationCenter:postNotification"); arg0 = arg0_tmp.c_str();

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 3, "cc.Ref",&arg1, "cc.CCSafeNotificationCenter:postNotification");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_postNotification'", nullptr);
            return 0;
        }
        cobj->postNotification(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCSafeNotificationCenter:postNotification",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_postNotification'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCSafeNotificationCenter_unregisterScriptObserver(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCSafeNotificationCenter* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCSafeNotificationCenter",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCSafeNotificationCenter*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCSafeNotificationCenter_unregisterScriptObserver'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        std::string arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "cc.CCSafeNotificationCenter:unregisterScriptObserver");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "cc.CCSafeNotificationCenter:unregisterScriptObserver");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_unregisterScriptObserver'", nullptr);
            return 0;
        }
        cobj->unregisterScriptObserver(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCSafeNotificationCenter:unregisterScriptObserver",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_unregisterScriptObserver'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCSafeNotificationCenter_registerScriptObserver(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCSafeNotificationCenter* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCSafeNotificationCenter",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCSafeNotificationCenter*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCSafeNotificationCenter_registerScriptObserver'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        cocos2d::Ref* arg0;
        int arg1;
        std::string arg2;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "cc.CCSafeNotificationCenter:registerScriptObserver");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "cc.CCSafeNotificationCenter:registerScriptObserver");

        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "cc.CCSafeNotificationCenter:registerScriptObserver");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_registerScriptObserver'", nullptr);
            return 0;
        }
        cobj->registerScriptObserver(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCSafeNotificationCenter:registerScriptObserver",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_registerScriptObserver'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCSafeNotificationCenter_sharedNotificationCenter(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCSafeNotificationCenter",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_sharedNotificationCenter'", nullptr);
            return 0;
        }
        cocos2d::extension::CCSafeNotificationCenter* ret = cocos2d::extension::CCSafeNotificationCenter::sharedNotificationCenter();
        object_to_luaval<cocos2d::extension::CCSafeNotificationCenter>(tolua_S, "cc.CCSafeNotificationCenter",(cocos2d::extension::CCSafeNotificationCenter*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCSafeNotificationCenter:sharedNotificationCenter",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_sharedNotificationCenter'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCSafeNotificationCenter_purgeNotificationCenter(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCSafeNotificationCenter",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_purgeNotificationCenter'", nullptr);
            return 0;
        }
        cocos2d::extension::CCSafeNotificationCenter::purgeNotificationCenter();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCSafeNotificationCenter:purgeNotificationCenter",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_purgeNotificationCenter'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCSafeNotificationCenter_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCSafeNotificationCenter* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCSafeNotificationCenter_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCSafeNotificationCenter();
        tolua_pushusertype(tolua_S,(void*)cobj,"cc.CCSafeNotificationCenter");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCSafeNotificationCenter:CCSafeNotificationCenter",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCSafeNotificationCenter_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCSafeNotificationCenter_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCSafeNotificationCenter)");
    return 0;
}

int lua_register_cocos2dx_if_CCSafeNotificationCenter(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCSafeNotificationCenter");
    tolua_cclass(tolua_S,"CCSafeNotificationCenter","cc.CCSafeNotificationCenter","",nullptr);

    tolua_beginmodule(tolua_S,"CCSafeNotificationCenter");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCSafeNotificationCenter_constructor);
        tolua_function(tolua_S,"removeObserver",lua_cocos2dx_if_CCSafeNotificationCenter_removeObserver);
        tolua_function(tolua_S,"postNotification",lua_cocos2dx_if_CCSafeNotificationCenter_postNotification);
        tolua_function(tolua_S,"unregisterScriptObserver",lua_cocos2dx_if_CCSafeNotificationCenter_unregisterScriptObserver);
        tolua_function(tolua_S,"registerScriptObserver",lua_cocos2dx_if_CCSafeNotificationCenter_registerScriptObserver);
        tolua_function(tolua_S,"sharedNotificationCenter", lua_cocos2dx_if_CCSafeNotificationCenter_sharedNotificationCenter);
        tolua_function(tolua_S,"purgeNotificationCenter", lua_cocos2dx_if_CCSafeNotificationCenter_purgeNotificationCenter);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCSafeNotificationCenter).name();
    g_luaType[typeName] = "cc.CCSafeNotificationCenter";
    g_typeCast["CCSafeNotificationCenter"] = "cc.CCSafeNotificationCenter";
    return 1;
}

int lua_cocos2dx_if_CCRapidXMLParser_getObjectByKey(lua_State* tolua_S)
{
    int argc = 0;
    CCRapidXMLParser* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCRapidXMLParser",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCRapidXMLParser*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCRapidXMLParser_getObjectByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCRapidXMLParser:getObjectByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCRapidXMLParser_getObjectByKey'", nullptr);
            return 0;
        }
        cocos2d::__Dictionary* ret = cobj->getObjectByKey(arg0);
        object_to_luaval<cocos2d::__Dictionary>(tolua_S, "CCDictionary",(cocos2d::__Dictionary*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCRapidXMLParser:getObjectByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCRapidXMLParser_getObjectByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCRapidXMLParser_getGroupByKey(lua_State* tolua_S)
{
    int argc = 0;
    CCRapidXMLParser* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCRapidXMLParser",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCRapidXMLParser*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCRapidXMLParser_getGroupByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCRapidXMLParser:getGroupByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCRapidXMLParser_getGroupByKey'", nullptr);
            return 0;
        }
        cocos2d::__Dictionary* ret = cobj->getGroupByKey(arg0);
        object_to_luaval<cocos2d::__Dictionary>(tolua_S, "CCDictionary",(cocos2d::__Dictionary*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCRapidXMLParser:getGroupByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCRapidXMLParser_getGroupByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCRapidXMLParser_parseWithFile(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCRapidXMLParser",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        const char* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCRapidXMLParser:parseWithFile"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCRapidXMLParser:parseWithFile"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCRapidXMLParser_parseWithFile'", nullptr);
            return 0;
        }
        CCRapidXMLParser* ret = CCRapidXMLParser::parseWithFile(arg0, arg1);
        object_to_luaval<CCRapidXMLParser>(tolua_S, "CCRapidXMLParser",(CCRapidXMLParser*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCRapidXMLParser:parseWithFile",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCRapidXMLParser_parseWithFile'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCRapidXMLParser_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CCRapidXMLParser* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCRapidXMLParser_constructor'", nullptr);
            return 0;
        }
        cobj = new CCRapidXMLParser();
        tolua_pushusertype(tolua_S,(void*)cobj,"CCRapidXMLParser");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCRapidXMLParser:CCRapidXMLParser",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCRapidXMLParser_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCRapidXMLParser_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCRapidXMLParser)");
    return 0;
}

int lua_register_cocos2dx_if_CCRapidXMLParser(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCRapidXMLParser");
    tolua_cclass(tolua_S,"CCRapidXMLParser","CCRapidXMLParser","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"CCRapidXMLParser");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCRapidXMLParser_constructor);
        tolua_function(tolua_S,"getObjectByKey",lua_cocos2dx_if_CCRapidXMLParser_getObjectByKey);
        tolua_function(tolua_S,"getGroupByKey",lua_cocos2dx_if_CCRapidXMLParser_getGroupByKey);
        tolua_function(tolua_S,"parseWithFile", lua_cocos2dx_if_CCRapidXMLParser_parseWithFile);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCRapidXMLParser).name();
    g_luaType[typeName] = "CCRapidXMLParser";
    g_typeCast["CCRapidXMLParser"] = "CCRapidXMLParser";
    return 1;
}

int lua_cocos2dx_if_CCINIParser_getObjectByKey(lua_State* tolua_S)
{
    int argc = 0;
    CCINIParser* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"CCINIParser",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (CCINIParser*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCINIParser_getObjectByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCINIParser:getObjectByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCINIParser_getObjectByKey'", nullptr);
            return 0;
        }
        std::string ret = cobj->getObjectByKey(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCINIParser:getObjectByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCINIParser_getObjectByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCINIParser_parseWithFile(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"CCINIParser",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        const char* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "CCINIParser:parseWithFile"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "CCINIParser:parseWithFile"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCINIParser_parseWithFile'", nullptr);
            return 0;
        }
        CCINIParser* ret = CCINIParser::parseWithFile(arg0, arg1);
        object_to_luaval<CCINIParser>(tolua_S, "CCINIParser",(CCINIParser*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "CCINIParser:parseWithFile",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCINIParser_parseWithFile'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCINIParser_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CCINIParser* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCINIParser_constructor'", nullptr);
            return 0;
        }
        cobj = new CCINIParser();
        tolua_pushusertype(tolua_S,(void*)cobj,"CCINIParser");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "CCINIParser:CCINIParser",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCINIParser_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCINIParser_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCINIParser)");
    return 0;
}

int lua_register_cocos2dx_if_CCINIParser(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCINIParser");
    tolua_cclass(tolua_S,"CCINIParser","CCINIParser","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"CCINIParser");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCINIParser_constructor);
        tolua_function(tolua_S,"getObjectByKey",lua_cocos2dx_if_CCINIParser_getObjectByKey);
        tolua_function(tolua_S,"parseWithFile", lua_cocos2dx_if_CCINIParser_parseWithFile);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCINIParser).name();
    g_luaType[typeName] = "CCINIParser";
    g_typeCast["CCINIParser"] = "CCINIParser";
    return 1;
}

int lua_cocos2dx_if_LocalController_getLanguageFileName(lua_State* tolua_S)
{
    int argc = 0;
    LocalController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LocalController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LocalController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LocalController_getLanguageFileName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LocalController_getLanguageFileName'", nullptr);
            return 0;
        }
        std::string ret = cobj->getLanguageFileName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LocalController:getLanguageFileName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LocalController_getLanguageFileName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LocalController_DBXMLManager(lua_State* tolua_S)
{
    int argc = 0;
    LocalController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LocalController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LocalController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LocalController_DBXMLManager'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LocalController_DBXMLManager'", nullptr);
            return 0;
        }
        CCRapidXMLParser* ret = cobj->DBXMLManager();
        object_to_luaval<CCRapidXMLParser>(tolua_S, "CCRapidXMLParser",(CCRapidXMLParser*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LocalController:DBXMLManager",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LocalController_DBXMLManager'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LocalController_getLanguageFileNameBasedOnUserSystem(lua_State* tolua_S)
{
    int argc = 0;
    LocalController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LocalController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LocalController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LocalController_getLanguageFileNameBasedOnUserSystem'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LocalController_getLanguageFileNameBasedOnUserSystem'", nullptr);
            return 0;
        }
        std::string ret = cobj->getLanguageFileNameBasedOnUserSystem();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LocalController:getLanguageFileNameBasedOnUserSystem",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LocalController_getLanguageFileNameBasedOnUserSystem'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LocalController_TextINIManager(lua_State* tolua_S)
{
    int argc = 0;
    LocalController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LocalController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LocalController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LocalController_TextINIManager'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LocalController_TextINIManager'", nullptr);
            return 0;
        }
        CCINIParser* ret = cobj->TextINIManager();
        object_to_luaval<CCINIParser>(tolua_S, "CCINIParser",(CCINIParser*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LocalController:TextINIManager",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LocalController_TextINIManager'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LocalController_shared(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LocalController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LocalController_shared'", nullptr);
            return 0;
        }
        LocalController* ret = LocalController::shared();
        object_to_luaval<LocalController>(tolua_S, "LocalController",(LocalController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LocalController:shared",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LocalController_shared'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LocalController_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LocalController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LocalController_constructor'", nullptr);
            return 0;
        }
        cobj = new LocalController();
        tolua_pushusertype(tolua_S,(void*)cobj,"LocalController");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LocalController:LocalController",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LocalController_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_LocalController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LocalController)");
    return 0;
}

int lua_register_cocos2dx_if_LocalController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LocalController");
    tolua_cclass(tolua_S,"LocalController","LocalController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"LocalController");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_LocalController_constructor);
        tolua_function(tolua_S,"getLanguageFileName",lua_cocos2dx_if_LocalController_getLanguageFileName);
        tolua_function(tolua_S,"DBXMLManager",lua_cocos2dx_if_LocalController_DBXMLManager);
        tolua_function(tolua_S,"getLanguageFileNameBasedOnUserSystem",lua_cocos2dx_if_LocalController_getLanguageFileNameBasedOnUserSystem);
        tolua_function(tolua_S,"TextINIManager",lua_cocos2dx_if_LocalController_TextINIManager);
        tolua_function(tolua_S,"shared", lua_cocos2dx_if_LocalController_shared);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LocalController).name();
    g_luaType[typeName] = "LocalController";
    g_typeCast["LocalController"] = "LocalController";
    return 1;
}

int lua_cocos2dx_if_CCModelLayer_getRestraintTouchInside(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayer*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayer_getRestraintTouchInside'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_getRestraintTouchInside'", nullptr);
            return 0;
        }
        bool ret = cobj->getRestraintTouchInside();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:getRestraintTouchInside",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_getRestraintTouchInside'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayer_setRestraintTouchInside(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayer*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayer_setRestraintTouchInside'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCModelLayer:setRestraintTouchInside");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_setRestraintTouchInside'", nullptr);
            return 0;
        }
        cobj->setRestraintTouchInside(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:setRestraintTouchInside",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_setRestraintTouchInside'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayer_onTouchBegan(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayer*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayer_onTouchBegan'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCModelLayer:onTouchBegan");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCModelLayer:onTouchBegan");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_onTouchBegan'", nullptr);
            return 0;
        }
        bool ret = cobj->onTouchBegan(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:onTouchBegan",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_onTouchBegan'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayer_init(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayer*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayer_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayer_setTouchPriority(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayer*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayer_setTouchPriority'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCModelLayer:setTouchPriority");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_setTouchPriority'", nullptr);
            return 0;
        }
        cobj->setTouchPriority(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:setTouchPriority",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_setTouchPriority'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayer_getTouchPriority(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayer*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayer_getTouchPriority'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_getTouchPriority'", nullptr);
            return 0;
        }
        int ret = cobj->getTouchPriority();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:getTouchPriority",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_getTouchPriority'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayer_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCModelLayer",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_create'", nullptr);
            return 0;
        }
        cocos2d::extension::CCModelLayer* ret = cocos2d::extension::CCModelLayer::create();
        object_to_luaval<cocos2d::extension::CCModelLayer>(tolua_S, "cc.CCModelLayer",(cocos2d::extension::CCModelLayer*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCModelLayer:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCModelLayer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayer* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCModelLayer();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"cc.CCModelLayer");
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCModelLayer:CCModelLayer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayer_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCModelLayer(arg0);
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"cc.CCModelLayer");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayer:CCModelLayer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayer_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCModelLayer_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCModelLayer)");
    return 0;
}

int lua_register_cocos2dx_if_CCModelLayer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCModelLayer");
    tolua_cclass(tolua_S,"CCModelLayer","cc.CCModelLayer","cc.Layer",nullptr);

    tolua_beginmodule(tolua_S,"CCModelLayer");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCModelLayer_constructor);
        tolua_function(tolua_S,"getRestraintTouchInside",lua_cocos2dx_if_CCModelLayer_getRestraintTouchInside);
        tolua_function(tolua_S,"setRestraintTouchInside",lua_cocos2dx_if_CCModelLayer_setRestraintTouchInside);
        tolua_function(tolua_S,"onTouchBegan",lua_cocos2dx_if_CCModelLayer_onTouchBegan);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_CCModelLayer_init);
        tolua_function(tolua_S,"setTouchPriority",lua_cocos2dx_if_CCModelLayer_setTouchPriority);
        tolua_function(tolua_S,"getTouchPriority",lua_cocos2dx_if_CCModelLayer_getTouchPriority);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCModelLayer_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCModelLayer).name();
    g_luaType[typeName] = "cc.CCModelLayer";
    g_typeCast["CCModelLayer"] = "cc.CCModelLayer";
    return 1;
}

int lua_cocos2dx_if_CCModelLayerColor_onTouchEnded(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_onTouchEnded'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCModelLayerColor:onTouchEnded");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCModelLayerColor:onTouchEnded");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_onTouchEnded'", nullptr);
            return 0;
        }
        cobj->onTouchEnded(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:onTouchEnded",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_onTouchEnded'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_onExit(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_onExit'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_onExit'", nullptr);
            return 0;
        }
        cobj->onExit();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:onExit",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_onExit'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_getRestraintTouchInside(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_getRestraintTouchInside'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_getRestraintTouchInside'", nullptr);
            return 0;
        }
        bool ret = cobj->getRestraintTouchInside();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:getRestraintTouchInside",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_getRestraintTouchInside'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_setRestraintTouchInside(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_setRestraintTouchInside'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCModelLayerColor:setRestraintTouchInside");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_setRestraintTouchInside'", nullptr);
            return 0;
        }
        cobj->setRestraintTouchInside(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:setRestraintTouchInside",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_setRestraintTouchInside'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_onTouchBegan(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_onTouchBegan'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCModelLayerColor:onTouchBegan");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCModelLayerColor:onTouchBegan");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_onTouchBegan'", nullptr);
            return 0;
        }
        bool ret = cobj->onTouchBegan(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:onTouchBegan",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_onTouchBegan'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_init(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_getTouchPriority(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_getTouchPriority'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_getTouchPriority'", nullptr);
            return 0;
        }
        int ret = cobj->getTouchPriority();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:getTouchPriority",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_getTouchPriority'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_setTouchPriority(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_setTouchPriority'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCModelLayerColor:setTouchPriority");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_setTouchPriority'", nullptr);
            return 0;
        }
        cobj->setTouchPriority(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:setTouchPriority",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_setTouchPriority'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_onEnter(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCModelLayerColor*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCModelLayerColor_onEnter'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_onEnter'", nullptr);
            return 0;
        }
        cobj->onEnter();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:onEnter",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_onEnter'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCModelLayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_create'", nullptr);
            return 0;
        }
        cocos2d::extension::CCModelLayerColor* ret = cocos2d::extension::CCModelLayerColor::create();
        object_to_luaval<cocos2d::extension::CCModelLayerColor>(tolua_S, "cc.CCModelLayerColor",(cocos2d::extension::CCModelLayerColor*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCModelLayerColor:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCModelLayerColor_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCModelLayerColor* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCModelLayerColor();
        tolua_pushusertype(tolua_S,(void*)cobj,"cc.CCModelLayerColor");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCModelLayerColor:CCModelLayerColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCModelLayerColor_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCModelLayerColor(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"cc.CCModelLayerColor");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCModelLayerColor:CCModelLayerColor",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCModelLayerColor_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCModelLayerColor_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCModelLayerColor)");
    return 0;
}

int lua_register_cocos2dx_if_CCModelLayerColor(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCModelLayerColor");
    tolua_cclass(tolua_S,"CCModelLayerColor","cc.CCModelLayerColor","cc.CCLayerColor",nullptr);

    tolua_beginmodule(tolua_S,"CCModelLayerColor");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCModelLayerColor_constructor);
        tolua_function(tolua_S,"onTouchEnded",lua_cocos2dx_if_CCModelLayerColor_onTouchEnded);
        tolua_function(tolua_S,"onExit",lua_cocos2dx_if_CCModelLayerColor_onExit);
        tolua_function(tolua_S,"getRestraintTouchInside",lua_cocos2dx_if_CCModelLayerColor_getRestraintTouchInside);
        tolua_function(tolua_S,"setRestraintTouchInside",lua_cocos2dx_if_CCModelLayerColor_setRestraintTouchInside);
        tolua_function(tolua_S,"onTouchBegan",lua_cocos2dx_if_CCModelLayerColor_onTouchBegan);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_CCModelLayerColor_init);
        tolua_function(tolua_S,"getTouchPriority",lua_cocos2dx_if_CCModelLayerColor_getTouchPriority);
        tolua_function(tolua_S,"setTouchPriority",lua_cocos2dx_if_CCModelLayerColor_setTouchPriority);
        tolua_function(tolua_S,"onEnter",lua_cocos2dx_if_CCModelLayerColor_onEnter);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCModelLayerColor_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCModelLayerColor).name();
    g_luaType[typeName] = "cc.CCModelLayerColor";
    g_typeCast["CCModelLayerColor"] = "cc.CCModelLayerColor";
    return 1;
}

int lua_cocos2dx_if_WaitInterface_remove(lua_State* tolua_S)
{
    int argc = 0;
    WaitInterface* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WaitInterface",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WaitInterface*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WaitInterface_remove'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WaitInterface_remove'", nullptr);
            return 0;
        }
        cobj->remove();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WaitInterface:remove",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WaitInterface_remove'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WaitInterface_show(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WaitInterface",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        cocos2d::Node* arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Size arg2;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "WaitInterface:show");
        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "WaitInterface:show");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "WaitInterface:show");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WaitInterface_show'", nullptr);
            return 0;
        }
        WaitInterface* ret = WaitInterface::show(arg0, arg1, arg2);
        object_to_luaval<WaitInterface>(tolua_S, "WaitInterface",(WaitInterface*)ret);
        return 1;
    }
    if (argc == 4)
    {
        cocos2d::Node* arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Size arg2;
        int arg3;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "WaitInterface:show");
        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "WaitInterface:show");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "WaitInterface:show");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WaitInterface:show");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WaitInterface_show'", nullptr);
            return 0;
        }
        WaitInterface* ret = WaitInterface::show(arg0, arg1, arg2, arg3);
        object_to_luaval<WaitInterface>(tolua_S, "WaitInterface",(WaitInterface*)ret);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Node* arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Size arg2;
        int arg3;
        double arg4;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "WaitInterface:show");
        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "WaitInterface:show");
        ok &= luaval_to_size(tolua_S, 4, &arg2, "WaitInterface:show");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WaitInterface:show");
        ok &= luaval_to_number(tolua_S, 6,&arg4, "WaitInterface:show");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WaitInterface_show'", nullptr);
            return 0;
        }
        WaitInterface* ret = WaitInterface::show(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<WaitInterface>(tolua_S, "WaitInterface",(WaitInterface*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WaitInterface:show",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WaitInterface_show'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WaitInterface_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WaitInterface* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Size arg1;
        int arg2;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WaitInterface:WaitInterface");

        ok &= luaval_to_size(tolua_S, 3, &arg1, "WaitInterface:WaitInterface");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WaitInterface:WaitInterface");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WaitInterface_constructor'", nullptr);
            return 0;
        }
        cobj = new WaitInterface(arg0, arg1, arg2);
        tolua_pushusertype(tolua_S,(void*)cobj,"WaitInterface");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WaitInterface:WaitInterface",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WaitInterface_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_WaitInterface_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (WaitInterface)");
    return 0;
}

int lua_register_cocos2dx_if_WaitInterface(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WaitInterface");
    tolua_cclass(tolua_S,"WaitInterface","WaitInterface","cc.CCLayer",nullptr);

    tolua_beginmodule(tolua_S,"WaitInterface");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_WaitInterface_constructor);
        tolua_function(tolua_S,"remove",lua_cocos2dx_if_WaitInterface_remove);
        tolua_function(tolua_S,"show", lua_cocos2dx_if_WaitInterface_show);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WaitInterface).name();
    g_luaType[typeName] = "WaitInterface";
    g_typeCast["WaitInterface"] = "WaitInterface";
    return 1;
}

int lua_cocos2dx_if_ToolInfo_getPara(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_getPara'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolInfo_getPara'", nullptr);
            return 0;
        }
        std::string ret = cobj->getPara();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolInfo:getPara",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_getPara'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolInfo_setCNT(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_setCNT'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolInfo:setCNT");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolInfo_setCNT'", nullptr);
            return 0;
        }
        cobj->setCNT(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolInfo:setCNT",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_setCNT'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolInfo_getName(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_getName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolInfo_getName'", nullptr);
            return 0;
        }
        std::string ret = cobj->getName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolInfo:getName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_getName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolInfo_getActId(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_getActId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolInfo_getActId'", nullptr);
            return 0;
        }
        std::string ret = cobj->getActId();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolInfo:getActId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_getActId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolInfo_getVersion(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_getVersion'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolInfo_getVersion'", nullptr);
            return 0;
        }
        std::string ret = cobj->getVersion();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolInfo:getVersion",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_getVersion'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolInfo_getCNT(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_getCNT'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolInfo_getCNT'", nullptr);
            return 0;
        }
        int ret = cobj->getCNT();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolInfo:getCNT",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_getCNT'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ToolInfo* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            cobj = new ToolInfo();
            tolua_pushusertype(tolua_S,(void*)cobj,"ToolInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            cocos2d::__Dictionary* arg0;
            ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ToolInfo:ToolInfo");

            if (!ok) { break; }
            cobj = new ToolInfo(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"ToolInfo");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "ToolInfo:ToolInfo",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_ToolInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ToolInfo)");
    return 0;
}

static int lua_cocos2dx_if_ToolInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	ToolInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"ToolInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (ToolInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "itemId") == 0){
		lua_pushinteger(tolua_S, cobj->itemId);
	}else if (strcmp(property.c_str(), "uuid") == 0){
		lua_pushstring(tolua_S, cobj->uuid.c_str());
	}else if (strcmp(property.c_str(), "icon") == 0){
		lua_pushstring(tolua_S, cobj->icon.c_str());
	}else if (strcmp(property.c_str(), "des") == 0){
		lua_pushstring(tolua_S, cobj->des.c_str());
	}else if (strcmp(property.c_str(), "page") == 0){
		lua_pushinteger(tolua_S, cobj->page);
	}else if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "type2") == 0){
		lua_pushinteger(tolua_S, cobj->type2);
	}else if (strcmp(property.c_str(), "use") == 0){
		lua_pushinteger(tolua_S, cobj->use);
	}else if (strcmp(property.c_str(), "orderNum") == 0){
		lua_pushinteger(tolua_S, cobj->orderNum);
	}else if (strcmp(property.c_str(), "color") == 0){
		lua_pushinteger(tolua_S, cobj->color);
	}else if (strcmp(property.c_str(), "buyType") == 0){
		lua_pushinteger(tolua_S, cobj->buyType);
	}else if (strcmp(property.c_str(), "price") == 0){
		lua_pushnumber(tolua_S, cobj->price);
	}else if (strcmp(property.c_str(), "limitLv") == 0){
		lua_pushinteger(tolua_S, cobj->limitLv);
	}else if (strcmp(property.c_str(), "limitUseLv") == 0){
		lua_pushinteger(tolua_S, cobj->limitUseLv);
	}else if (strcmp(property.c_str(), "onsale") == 0){
		lua_pushinteger(tolua_S, cobj->onsale);
	}else if (strcmp(property.c_str(), "sales") == 0){
		lua_pushstring(tolua_S, cobj->sales.c_str());
	}else if (strcmp(property.c_str(), "useall") == 0){
		lua_pushinteger(tolua_S, cobj->useall);
	}else if (strcmp(property.c_str(), "hotprice") == 0){
		lua_pushinteger(tolua_S, cobj->hotprice);
	}else if (strcmp(property.c_str(), "price_hot") == 0){
		lua_pushinteger(tolua_S, cobj->price_hot);
	}else if (strcmp(property.c_str(), "hotnum") == 0){
		lua_pushinteger(tolua_S, cobj->hotnum);
	}else if (strcmp(property.c_str(), "ishot") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->ishot);
	}else if (strcmp(property.c_str(), "isShowHot") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isShowHot);
	}else if (strcmp(property.c_str(), "is_show") == 0){
		lua_pushinteger(tolua_S, cobj->is_show);
	}else if (strcmp(property.c_str(), "crt_order") == 0){
		lua_pushinteger(tolua_S, cobj->crt_order);
	}else if (strcmp(property.c_str(), "crt_cd") == 0){
		lua_pushinteger(tolua_S, cobj->crt_cd);
	}else if (strcmp(property.c_str(), "crt_gold") == 0){
		lua_pushinteger(tolua_S, cobj->crt_gold);
	}else if(strcmp(property.c_str(), "paras") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->paras.begin();
		int idx = 1;
		while(iter!=cobj->paras.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "para1") == 0){
		lua_pushstring(tolua_S, cobj->para1.c_str());
	}else if (strcmp(property.c_str(), "para2") == 0){
		lua_pushstring(tolua_S, cobj->para2.c_str());
	}else if (strcmp(property.c_str(), "para3") == 0){
		lua_pushstring(tolua_S, cobj->para3.c_str());
	}else if (strcmp(property.c_str(), "para4") == 0){
		lua_pushstring(tolua_S, cobj->para4.c_str());
	}else if (strcmp(property.c_str(), "hotPara") == 0){
		lua_pushnumber(tolua_S, cobj->hotPara);
	}else if (strcmp(property.c_str(), "pages") == 0){
		lua_pushinteger(tolua_S, cobj->pages);
	}else if (strcmp(property.c_str(), "store_order") == 0){
		lua_pushinteger(tolua_S, cobj->store_order);
	}else if (strcmp(property.c_str(), "alliance_order") == 0){
		lua_pushinteger(tolua_S, cobj->alliance_order);
	}else if (strcmp(property.c_str(), "LongJing_price") == 0){
		lua_pushnumber(tolua_S, cobj->LongJing_price);
	}else if (strcmp(property.c_str(), "equipId") == 0){
		lua_pushstring(tolua_S, cobj->equipId.c_str());
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_ToolInfo_newindex(lua_State* tolua_S)
{
	ToolInfo* cobj = *(ToolInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "itemId") == 0){
		cobj->itemId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "uuid") == 0){
		cobj->uuid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "icon") == 0){
		cobj->icon= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "des") == 0){
		cobj->des= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "page") == 0){
		cobj->page= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type2") == 0){
		cobj->type2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "use") == 0){
		cobj->use= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "orderNum") == 0){
		cobj->orderNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "color") == 0){
		cobj->color= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "buyType") == 0){
		cobj->buyType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "price") == 0){
		cobj->price= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "limitLv") == 0){
		cobj->limitLv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "limitUseLv") == 0){
		cobj->limitUseLv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "onsale") == 0){
		cobj->onsale= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "sales") == 0){
		cobj->sales= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "useall") == 0){
		cobj->useall= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "hotprice") == 0){
		cobj->hotprice= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "price_hot") == 0){
		cobj->price_hot= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "hotnum") == 0){
		cobj->hotnum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "ishot") == 0){
		cobj->ishot= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isShowHot") == 0){
		cobj->isShowHot= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "is_show") == 0){
		cobj->is_show= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "crt_order") == 0){
		cobj->crt_order= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "crt_cd") == 0){
		cobj->crt_cd= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "crt_gold") == 0){
		cobj->crt_gold= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para1") == 0){
		cobj->para1= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para2") == 0){
		cobj->para2= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para3") == 0){
		cobj->para3= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "para4") == 0){
		cobj->para4= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "hotPara") == 0){
		cobj->hotPara= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pages") == 0){
		cobj->pages= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "store_order") == 0){
		cobj->store_order= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alliance_order") == 0){
		cobj->alliance_order= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "LongJing_price") == 0){
		cobj->LongJing_price= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "equipId") == 0){
		cobj->equipId= (string)lua_tostring(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_ToolInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ToolInfo");
    tolua_cclass(tolua_S,"ToolInfo","ToolInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"ToolInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_ToolInfo_constructor);
        tolua_function(tolua_S,"getPara",lua_cocos2dx_if_ToolInfo_getPara);
        tolua_function(tolua_S,"setCNT",lua_cocos2dx_if_ToolInfo_setCNT);
        tolua_function(tolua_S,"getName",lua_cocos2dx_if_ToolInfo_getName);
        tolua_function(tolua_S,"getActId",lua_cocos2dx_if_ToolInfo_getActId);
        tolua_function(tolua_S,"getVersion",lua_cocos2dx_if_ToolInfo_getVersion);
        tolua_function(tolua_S,"getCNT",lua_cocos2dx_if_ToolInfo_getCNT);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_ToolInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_ToolInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ToolInfo).name();
    g_luaType[typeName] = "ToolInfo";
    g_typeCast["ToolInfo"] = "ToolInfo";
    return 1;
}

int lua_cocos2dx_if_ActivityEventObj_getReward(lua_State* tolua_S)
{
    int argc = 0;
    ActivityEventObj* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityEventObj",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityEventObj*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityEventObj_getReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityEventObj_getReward'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getReward();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityEventObj:getReward",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityEventObj_getReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityEventObj_getKingdomList(lua_State* tolua_S)
{
    int argc = 0;
    ActivityEventObj* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityEventObj",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityEventObj*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityEventObj_getKingdomList'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityEventObj_getKingdomList'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getKingdomList();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityEventObj:getKingdomList",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityEventObj_getKingdomList'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityEventObj_setKingdomList(lua_State* tolua_S)
{
    int argc = 0;
    ActivityEventObj* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityEventObj",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityEventObj*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityEventObj_setKingdomList'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "ActivityEventObj:setKingdomList");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityEventObj_setKingdomList'", nullptr);
            return 0;
        }
        cobj->setKingdomList(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityEventObj:setKingdomList",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityEventObj_setKingdomList'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityEventObj_setReward(lua_State* tolua_S)
{
    int argc = 0;
    ActivityEventObj* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityEventObj",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityEventObj*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityEventObj_setReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "ActivityEventObj:setReward");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityEventObj_setReward'", nullptr);
            return 0;
        }
        cobj->setReward(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityEventObj:setReward",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityEventObj_setReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityEventObj_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"ActivityEventObj",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityEventObj_create'", nullptr);
            return 0;
        }
        ActivityEventObj* ret = ActivityEventObj::create();
        object_to_luaval<ActivityEventObj>(tolua_S, "ActivityEventObj",(ActivityEventObj*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "ActivityEventObj:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityEventObj_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_ActivityEventObj_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ActivityEventObj* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityEventObj_constructor'", nullptr);
            return 0;
        }
        cobj = new ActivityEventObj();
        tolua_pushusertype(tolua_S,(void*)cobj,"ActivityEventObj");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityEventObj:ActivityEventObj",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityEventObj_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_ActivityEventObj_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActivityEventObj)");
    return 0;
}

static int lua_cocos2dx_if_ActivityEventObj_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	ActivityEventObj* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"ActivityEventObj",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityEventObj_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (ActivityEventObj*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "startTime") == 0){
		lua_pushnumber(tolua_S, cobj->startTime);
	}else if (strcmp(property.c_str(), "endTime") == 0){
		lua_pushnumber(tolua_S, cobj->endTime);
	}else if (strcmp(property.c_str(), "id") == 0){
		lua_pushstring(tolua_S, cobj->id.c_str());
	}else if (strcmp(property.c_str(), "name") == 0){
		lua_pushstring(tolua_S, cobj->name.c_str());
	}else if (strcmp(property.c_str(), "desc") == 0){
		lua_pushstring(tolua_S, cobj->desc.c_str());
	}else if (strcmp(property.c_str(), "descDia") == 0){
		lua_pushstring(tolua_S, cobj->descDia.c_str());
	}else if (strcmp(property.c_str(), "desc_info") == 0){
		lua_pushstring(tolua_S, cobj->desc_info.c_str());
	}else if (strcmp(property.c_str(), "activityid") == 0){
		lua_pushstring(tolua_S, cobj->activityid.c_str());
	}else if (strcmp(property.c_str(), "Advertise_pic") == 0){
		lua_pushstring(tolua_S, cobj->Advertise_pic.c_str());
	}else if (strcmp(property.c_str(), "exchange") == 0){
		lua_pushstring(tolua_S, cobj->exchange.c_str());
	}else if (strcmp(property.c_str(), "story") == 0){
		lua_pushstring(tolua_S, cobj->story.c_str());
	}else if (strcmp(property.c_str(), "num") == 0){
		lua_pushstring(tolua_S, cobj->num.c_str());
	}else if (strcmp(property.c_str(), "md5") == 0){
		lua_pushstring(tolua_S, cobj->md5.c_str());
	}else if (strcmp(property.c_str(), "popup") == 0){
		lua_pushinteger(tolua_S, cobj->popup);
	}else if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "sort") == 0){
		lua_pushinteger(tolua_S, cobj->sort);
	}else if(strcmp(property.c_str(), "showDialogs") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->showDialogs.begin();
		int idx = 1;
		while(iter!=cobj->showDialogs.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "rewardIds") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->rewardIds.begin();
		int idx = 1;
		while(iter!=cobj->rewardIds.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_ActivityEventObj_newindex(lua_State* tolua_S)
{
	ActivityEventObj* cobj = *(ActivityEventObj**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "startTime") == 0){
		cobj->startTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "endTime") == 0){
		cobj->endTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "id") == 0){
		cobj->id= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "name") == 0){
		cobj->name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "desc") == 0){
		cobj->desc= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "descDia") == 0){
		cobj->descDia= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "desc_info") == 0){
		cobj->desc_info= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "activityid") == 0){
		cobj->activityid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "Advertise_pic") == 0){
		cobj->Advertise_pic= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "exchange") == 0){
		cobj->exchange= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "story") == 0){
		cobj->story= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "num") == 0){
		cobj->num= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "md5") == 0){
		cobj->md5= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "popup") == 0){
		cobj->popup= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "sort") == 0){
		cobj->sort= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_ActivityEventObj(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ActivityEventObj");
    tolua_cclass(tolua_S,"ActivityEventObj","ActivityEventObj","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"ActivityEventObj");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_ActivityEventObj_constructor);
        tolua_function(tolua_S,"getReward",lua_cocos2dx_if_ActivityEventObj_getReward);
        tolua_function(tolua_S,"getKingdomList",lua_cocos2dx_if_ActivityEventObj_getKingdomList);
        tolua_function(tolua_S,"setKingdomList",lua_cocos2dx_if_ActivityEventObj_setKingdomList);
        tolua_function(tolua_S,"setReward",lua_cocos2dx_if_ActivityEventObj_setReward);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_ActivityEventObj_create);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_ActivityEventObj_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_ActivityEventObj_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ActivityEventObj).name();
    g_luaType[typeName] = "ActivityEventObj";
    g_typeCast["ActivityEventObj"] = "ActivityEventObj";
    return 1;
}

int lua_cocos2dx_if_LuaActivityInfo_setopenPoint(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setopenPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        LuaActOpenPoint arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "LuaActivityInfo:setopenPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setopenPoint'", nullptr);
            return 0;
        }
        cobj->setopenPoint(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setopenPoint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setopenPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_setendTime(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setendTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "LuaActivityInfo:setendTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setendTime'", nullptr);
            return 0;
        }
        cobj->setendTime(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setendTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setendTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getmd5(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getmd5'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getmd5'", nullptr);
            return 0;
        }
        std::string ret = cobj->getmd5();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getmd5",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getmd5'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getopenRef(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getopenRef'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getopenRef'", nullptr);
            return 0;
        }
        std::string ret = cobj->getopenRef();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getopenRef",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getopenRef'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getopenPoint(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getopenPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getopenPoint'", nullptr);
            return 0;
        }
        int ret = (int)cobj->getopenPoint();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getopenPoint",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getopenPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_setopenRef(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setopenRef'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaActivityInfo:setopenRef");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setopenRef'", nullptr);
            return 0;
        }
        cobj->setopenRef(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setopenRef",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setopenRef'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getactID(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getactID'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getactID'", nullptr);
            return 0;
        }
        std::string ret = cobj->getactID();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getactID",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getactID'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getresName(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getresName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getresName'", nullptr);
            return 0;
        }
        std::string ret = cobj->getresName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getresName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getresName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getendTime(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getendTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getendTime'", nullptr);
            return 0;
        }
        double ret = cobj->getendTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getendTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getendTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_setactID(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setactID'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaActivityInfo:setactID");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setactID'", nullptr);
            return 0;
        }
        cobj->setactID(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setactID",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setactID'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_setresName(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setresName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaActivityInfo:setresName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setresName'", nullptr);
            return 0;
        }
        cobj->setresName(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setresName",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setresName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_setstartTime(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setstartTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "LuaActivityInfo:setstartTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setstartTime'", nullptr);
            return 0;
        }
        cobj->setstartTime(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setstartTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setstartTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_setmd5(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_setmd5'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaActivityInfo:setmd5");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_setmd5'", nullptr);
            return 0;
        }
        cobj->setmd5(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:setmd5",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_setmd5'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_getstartTime(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_getstartTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_getstartTime'", nullptr);
            return 0;
        }
        double ret = cobj->getstartTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:getstartTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_getstartTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_isExpire(lua_State* tolua_S)
{
    int argc = 0;
    LuaActivityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaActivityInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaActivityInfo_isExpire'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_isExpire'", nullptr);
            return 0;
        }
        bool ret = cobj->isExpire();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaActivityInfo:isExpire",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_isExpire'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaActivityInfo_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaActivityInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaActivityInfo_create'", nullptr);
            return 0;
        }
        LuaActivityInfo* ret = LuaActivityInfo::create();
        object_to_luaval<LuaActivityInfo>(tolua_S, "LuaActivityInfo",(LuaActivityInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaActivityInfo:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaActivityInfo_create'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_LuaActivityInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LuaActivityInfo)");
    return 0;
}

int lua_register_cocos2dx_if_LuaActivityInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LuaActivityInfo");
    tolua_cclass(tolua_S,"LuaActivityInfo","LuaActivityInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"LuaActivityInfo");
        tolua_function(tolua_S,"setopenPoint",lua_cocos2dx_if_LuaActivityInfo_setopenPoint);
        tolua_function(tolua_S,"setendTime",lua_cocos2dx_if_LuaActivityInfo_setendTime);
        tolua_function(tolua_S,"getmd5",lua_cocos2dx_if_LuaActivityInfo_getmd5);
        tolua_function(tolua_S,"getopenRef",lua_cocos2dx_if_LuaActivityInfo_getopenRef);
        tolua_function(tolua_S,"getopenPoint",lua_cocos2dx_if_LuaActivityInfo_getopenPoint);
        tolua_function(tolua_S,"setopenRef",lua_cocos2dx_if_LuaActivityInfo_setopenRef);
        tolua_function(tolua_S,"getactID",lua_cocos2dx_if_LuaActivityInfo_getactID);
        tolua_function(tolua_S,"getresName",lua_cocos2dx_if_LuaActivityInfo_getresName);
        tolua_function(tolua_S,"getendTime",lua_cocos2dx_if_LuaActivityInfo_getendTime);
        tolua_function(tolua_S,"setactID",lua_cocos2dx_if_LuaActivityInfo_setactID);
        tolua_function(tolua_S,"setresName",lua_cocos2dx_if_LuaActivityInfo_setresName);
        tolua_function(tolua_S,"setstartTime",lua_cocos2dx_if_LuaActivityInfo_setstartTime);
        tolua_function(tolua_S,"setmd5",lua_cocos2dx_if_LuaActivityInfo_setmd5);
        tolua_function(tolua_S,"getstartTime",lua_cocos2dx_if_LuaActivityInfo_getstartTime);
        tolua_function(tolua_S,"isExpire",lua_cocos2dx_if_LuaActivityInfo_isExpire);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_LuaActivityInfo_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LuaActivityInfo).name();
    g_luaType[typeName] = "LuaActivityInfo";
    g_typeCast["LuaActivityInfo"] = "LuaActivityInfo";
    return 1;
}

int lua_cocos2dx_if_IFAllianceHelpReportInfo_setuid(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setuid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "IFAllianceHelpReportInfo:setuid");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setuid'", nullptr);
            return 0;
        }
        cobj->setuid(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:setuid",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setuid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_getuid(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getuid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getuid'", nullptr);
            return 0;
        }
        std::string ret = cobj->getuid();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:getuid",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getuid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_setname(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setname'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "IFAllianceHelpReportInfo:setname");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setname'", nullptr);
            return 0;
        }
        cobj->setname(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:setname",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setname'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_gettime(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_gettime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_gettime'", nullptr);
            return 0;
        }
        long ret = cobj->gettime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:gettime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_gettime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_getname(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getname'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getname'", nullptr);
            return 0;
        }
        std::string ret = cobj->getname();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:getname",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getname'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_setcount(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setcount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "IFAllianceHelpReportInfo:setcount");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setcount'", nullptr);
            return 0;
        }
        cobj->setcount(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:setcount",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setcount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_setpic(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setpic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "IFAllianceHelpReportInfo:setpic");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setpic'", nullptr);
            return 0;
        }
        cobj->setpic(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:setpic",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setpic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_getpic(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getpic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getpic'", nullptr);
            return 0;
        }
        std::string ret = cobj->getpic();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:getpic",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getpic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_settime(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_settime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        long arg0;

        ok &= luaval_to_long(tolua_S, 2, &arg0, "IFAllianceHelpReportInfo:settime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_settime'", nullptr);
            return 0;
        }
        cobj->settime(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:settime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_settime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_setpicVer(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setpicVer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "IFAllianceHelpReportInfo:setpicVer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setpicVer'", nullptr);
            return 0;
        }
        cobj->setpicVer(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:setpicVer",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_setpicVer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_getcount(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getcount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getcount'", nullptr);
            return 0;
        }
        int ret = cobj->getcount();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:getcount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getcount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_IFAllianceHelpReportInfo_getpicVer(lua_State* tolua_S)
{
    int argc = 0;
    IFAllianceHelpReportInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"IFAllianceHelpReportInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (IFAllianceHelpReportInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getpicVer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getpicVer'", nullptr);
            return 0;
        }
        int ret = cobj->getpicVer();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "IFAllianceHelpReportInfo:getpicVer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_IFAllianceHelpReportInfo_getpicVer'.",&tolua_err);
#endif

    return 0;
}
static int lua_cocos2dx_if_IFAllianceHelpReportInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (IFAllianceHelpReportInfo)");
    return 0;
}

int lua_register_cocos2dx_if_IFAllianceHelpReportInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"IFAllianceHelpReportInfo");
    tolua_cclass(tolua_S,"IFAllianceHelpReportInfo","IFAllianceHelpReportInfo","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"IFAllianceHelpReportInfo");
        tolua_function(tolua_S,"setuid",lua_cocos2dx_if_IFAllianceHelpReportInfo_setuid);
        tolua_function(tolua_S,"getuid",lua_cocos2dx_if_IFAllianceHelpReportInfo_getuid);
        tolua_function(tolua_S,"setname",lua_cocos2dx_if_IFAllianceHelpReportInfo_setname);
        tolua_function(tolua_S,"gettime",lua_cocos2dx_if_IFAllianceHelpReportInfo_gettime);
        tolua_function(tolua_S,"getname",lua_cocos2dx_if_IFAllianceHelpReportInfo_getname);
        tolua_function(tolua_S,"setcount",lua_cocos2dx_if_IFAllianceHelpReportInfo_setcount);
        tolua_function(tolua_S,"setpic",lua_cocos2dx_if_IFAllianceHelpReportInfo_setpic);
        tolua_function(tolua_S,"getpic",lua_cocos2dx_if_IFAllianceHelpReportInfo_getpic);
        tolua_function(tolua_S,"settime",lua_cocos2dx_if_IFAllianceHelpReportInfo_settime);
        tolua_function(tolua_S,"setpicVer",lua_cocos2dx_if_IFAllianceHelpReportInfo_setpicVer);
        tolua_function(tolua_S,"getcount",lua_cocos2dx_if_IFAllianceHelpReportInfo_getcount);
        tolua_function(tolua_S,"getpicVer",lua_cocos2dx_if_IFAllianceHelpReportInfo_getpicVer);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(IFAllianceHelpReportInfo).name();
    g_luaType[typeName] = "IFAllianceHelpReportInfo";
    g_typeCast["IFAllianceHelpReportInfo"] = "IFAllianceHelpReportInfo";
    return 1;
}

int lua_cocos2dx_if_CCProgressAppear_reverse(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCProgressAppear* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCProgressAppear",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCProgressAppear*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCProgressAppear_reverse'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCProgressAppear_reverse'", nullptr);
            return 0;
        }
        cocos2d::ActionInterval* ret = cobj->reverse();
        object_to_luaval<cocos2d::ActionInterval>(tolua_S, "cc.ActionInterval",(cocos2d::ActionInterval*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCProgressAppear:reverse",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCProgressAppear_reverse'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCProgressAppear_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCProgressAppear",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        double arg0;
        ClipProgressDirection arg1;
        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCProgressAppear:create");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "cc.CCProgressAppear:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCProgressAppear_create'", nullptr);
            return 0;
        }
        cocos2d::CCProgressAppear* ret = cocos2d::CCProgressAppear::create(arg0, arg1);
        object_to_luaval<cocos2d::CCProgressAppear>(tolua_S, "cc.CCProgressAppear",(cocos2d::CCProgressAppear*)ret);
        return 1;
    }
    if (argc == 3)
    {
        double arg0;
        ClipProgressDirection arg1;
        double arg2;
        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCProgressAppear:create");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "cc.CCProgressAppear:create");
        ok &= luaval_to_number(tolua_S, 4,&arg2, "cc.CCProgressAppear:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCProgressAppear_create'", nullptr);
            return 0;
        }
        cocos2d::CCProgressAppear* ret = cocos2d::CCProgressAppear::create(arg0, arg1, arg2);
        object_to_luaval<cocos2d::CCProgressAppear>(tolua_S, "cc.CCProgressAppear",(cocos2d::CCProgressAppear*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCProgressAppear:create",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCProgressAppear_create'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCProgressAppear_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCProgressAppear)");
    return 0;
}

int lua_register_cocos2dx_if_CCProgressAppear(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCProgressAppear");
    tolua_cclass(tolua_S,"CCProgressAppear","cc.CCProgressAppear","cc.CCActionInterval",nullptr);

    tolua_beginmodule(tolua_S,"CCProgressAppear");
        tolua_function(tolua_S,"reverse",lua_cocos2dx_if_CCProgressAppear_reverse);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCProgressAppear_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::CCProgressAppear).name();
    g_luaType[typeName] = "cc.CCProgressAppear";
    g_typeCast["CCProgressAppear"] = "cc.CCProgressAppear";
    return 1;
}

int lua_cocos2dx_if_CCLabelBatchNode_setFntFile(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelBatchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelBatchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelBatchNode_setFntFile'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "cc.CCLabelBatchNode:setFntFile");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelBatchNode_setFntFile'", nullptr);
            return 0;
        }
        cobj->setFntFile(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelBatchNode:setFntFile",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelBatchNode_setFntFile'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelBatchNode_getFntFile(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelBatchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCLabelBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::CCLabelBatchNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCLabelBatchNode_getFntFile'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelBatchNode_getFntFile'", nullptr);
            return 0;
        }
        std::string ret = cobj->getFntFile();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelBatchNode:getFntFile",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelBatchNode_getFntFile'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCLabelBatchNode_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 1)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelBatchNode:create"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CCLabelBatchNode* ret = cocos2d::CCLabelBatchNode::create(arg0);
            object_to_luaval<cocos2d::CCLabelBatchNode>(tolua_S, "cc.CCLabelBatchNode",(cocos2d::CCLabelBatchNode*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 0)
        {
            cocos2d::CCLabelBatchNode* ret = cocos2d::CCLabelBatchNode::create();
            object_to_luaval<cocos2d::CCLabelBatchNode>(tolua_S, "cc.CCLabelBatchNode",(cocos2d::CCLabelBatchNode*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "cc.CCLabelBatchNode:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelBatchNode_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCLabelBatchNode_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::CCLabelBatchNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelBatchNode_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::CCLabelBatchNode();
        tolua_pushusertype(tolua_S,(void*)cobj,"cc.CCLabelBatchNode");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCLabelBatchNode:CCLabelBatchNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelBatchNode_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCLabelBatchNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCLabelBatchNode)");
    return 0;
}

int lua_register_cocos2dx_if_CCLabelBatchNode(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCLabelBatchNode");
    tolua_cclass(tolua_S,"CCLabelBatchNode","cc.CCLabelBatchNode","cc.CCNode",nullptr);

    tolua_beginmodule(tolua_S,"CCLabelBatchNode");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCLabelBatchNode_constructor);
        tolua_function(tolua_S,"setFntFile",lua_cocos2dx_if_CCLabelBatchNode_setFntFile);
        tolua_function(tolua_S,"getFntFile",lua_cocos2dx_if_CCLabelBatchNode_getFntFile);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCLabelBatchNode_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::CCLabelBatchNode).name();
    g_luaType[typeName] = "cc.CCLabelBatchNode";
    g_typeCast["CCLabelBatchNode"] = "cc.CCLabelBatchNode";
    return 1;
}

int lua_cocos2dx_if_CCLabelBatch_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCLabelBatch",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        cocos2d::CCLabelBatchNode* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "cc.CCLabelBatch:create"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CCLabelBatchNode>(tolua_S, 3, "cc.CCLabelBatchNode",&arg1, "cc.CCLabelBatch:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCLabelBatch_create'", nullptr);
            return 0;
        }
        cocos2d::CCLabelBatch* ret = cocos2d::CCLabelBatch::create(arg0, arg1);
        object_to_luaval<cocos2d::CCLabelBatch>(tolua_S, "cc.CCLabelBatch",(cocos2d::CCLabelBatch*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCLabelBatch:create",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCLabelBatch_create'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCLabelBatch_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCLabelBatch)");
    return 0;
}

int lua_register_cocos2dx_if_CCLabelBatch(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCLabelBatch");
    tolua_cclass(tolua_S,"CCLabelBatch","cc.CCLabelBatch","cc.LabelBMFont",nullptr);

    tolua_beginmodule(tolua_S,"CCLabelBatch");
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCLabelBatch_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::CCLabelBatch).name();
    g_luaType[typeName] = "cc.CCLabelBatch";
    g_typeCast["CCLabelBatch"] = "cc.CCLabelBatch";
    return 1;
}

int lua_cocos2dx_if_CCClipNode_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCClipNode",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 1)
        {
            cocos2d::Size arg0;
            ok &= luaval_to_size(tolua_S, 2, &arg0, "cc.CCClipNode:create");
            if (!ok) { break; }
            cocos2d::extension::CCClipNode* ret = cocos2d::extension::CCClipNode::create(arg0);
            object_to_luaval<cocos2d::extension::CCClipNode>(tolua_S, "cc.CCClipNode",(cocos2d::extension::CCClipNode*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCClipNode:create");
            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "cc.CCClipNode:create");
            if (!ok) { break; }
            cocos2d::extension::CCClipNode* ret = cocos2d::extension::CCClipNode::create(arg0, arg1);
            object_to_luaval<cocos2d::extension::CCClipNode>(tolua_S, "cc.CCClipNode",(cocos2d::extension::CCClipNode*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "cc.CCClipNode:create",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipNode_create'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_CCClipNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCClipNode)");
    return 0;
}

int lua_register_cocos2dx_if_CCClipNode(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCClipNode");
    tolua_cclass(tolua_S,"CCClipNode","cc.CCClipNode","cc.CCNode",nullptr);

    tolua_beginmodule(tolua_S,"CCClipNode");
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCClipNode_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCClipNode).name();
    g_luaType[typeName] = "cc.CCClipNode";
    g_typeCast["CCClipNode"] = "cc.CCClipNode";
    return 1;
}

int lua_cocos2dx_if_CCClipSprite_getProgressY(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCClipSprite*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCClipSprite_getProgressY'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_getProgressY'", nullptr);
            return 0;
        }
        double ret = cobj->getProgressY();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:getProgressY",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_getProgressY'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCClipSprite_getProgressX(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCClipSprite*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCClipSprite_getProgressX'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_getProgressX'", nullptr);
            return 0;
        }
        double ret = cobj->getProgressX();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:getProgressX",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_getProgressX'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCClipSprite_getProgressDirection(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCClipSprite*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCClipSprite_getProgressDirection'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_getProgressDirection'", nullptr);
            return 0;
        }
        int ret = (int)cobj->getProgressDirection();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:getProgressDirection",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_getProgressDirection'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCClipSprite_setProgressY(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCClipSprite*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCClipSprite_setProgressY'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCClipSprite:setProgressY");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_setProgressY'", nullptr);
            return 0;
        }
        cobj->setProgressY(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:setProgressY",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_setProgressY'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCClipSprite_setProgressX(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCClipSprite*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCClipSprite_setProgressX'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "cc.CCClipSprite:setProgressX");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_setProgressX'", nullptr);
            return 0;
        }
        cobj->setProgressX(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:setProgressX",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_setProgressX'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCClipSprite_setProgressDirection(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCClipSprite*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCClipSprite_setProgressDirection'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        ClipProgressDirection arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "cc.CCClipSprite:setProgressDirection");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_setProgressDirection'", nullptr);
            return 0;
        }
        cobj->setProgressDirection(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:setProgressDirection",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_setProgressDirection'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCClipSprite_createWithSpriteFrame(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCClipSprite",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::SpriteFrame* arg0;
        ok &= luaval_to_object<cocos2d::SpriteFrame>(tolua_S, 2, "cc.SpriteFrame",&arg0, "cc.CCClipSprite:createWithSpriteFrame");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_createWithSpriteFrame'", nullptr);
            return 0;
        }
        cocos2d::extension::CCClipSprite* ret = cocos2d::extension::CCClipSprite::createWithSpriteFrame(arg0);
        object_to_luaval<cocos2d::extension::CCClipSprite>(tolua_S, "cc.CCClipSprite",(cocos2d::extension::CCClipSprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCClipSprite:createWithSpriteFrame",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_createWithSpriteFrame'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCClipSprite_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCClipSprite* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCClipSprite_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCClipSprite();
        tolua_pushusertype(tolua_S,(void*)cobj,"cc.CCClipSprite");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCClipSprite:CCClipSprite",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCClipSprite_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCClipSprite_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCClipSprite)");
    return 0;
}

int lua_register_cocos2dx_if_CCClipSprite(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCClipSprite");
    tolua_cclass(tolua_S,"CCClipSprite","cc.CCClipSprite","cc.CCSprite",nullptr);

    tolua_beginmodule(tolua_S,"CCClipSprite");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCClipSprite_constructor);
        tolua_function(tolua_S,"getProgressY",lua_cocos2dx_if_CCClipSprite_getProgressY);
        tolua_function(tolua_S,"getProgressX",lua_cocos2dx_if_CCClipSprite_getProgressX);
        tolua_function(tolua_S,"getProgressDirection",lua_cocos2dx_if_CCClipSprite_getProgressDirection);
        tolua_function(tolua_S,"setProgressY",lua_cocos2dx_if_CCClipSprite_setProgressY);
        tolua_function(tolua_S,"setProgressX",lua_cocos2dx_if_CCClipSprite_setProgressX);
        tolua_function(tolua_S,"setProgressDirection",lua_cocos2dx_if_CCClipSprite_setProgressDirection);
        tolua_function(tolua_S,"createWithSpriteFrame", lua_cocos2dx_if_CCClipSprite_createWithSpriteFrame);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCClipSprite).name();
    g_luaType[typeName] = "cc.CCClipSprite";
    g_typeCast["CCClipSprite"] = "cc.CCClipSprite";
    return 1;
}

int lua_cocos2dx_if_CCAniNode_getAnimationManager(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCAniNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCAniNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCAniNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCAniNode_getAnimationManager'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCAniNode_getAnimationManager'", nullptr);
            return 0;
        }
        cocosbuilder::CCBAnimationManager* ret = cobj->getAnimationManager();
        object_to_luaval<cocosbuilder::CCBAnimationManager>(tolua_S, "cc.CCBAnimationManager",(cocosbuilder::CCBAnimationManager*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCAniNode:getAnimationManager",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCAniNode_getAnimationManager'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCAniNode_setAnimationManager(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCAniNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCAniNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCAniNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCAniNode_setAnimationManager'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocosbuilder::CCBAnimationManager* arg0;

        ok &= luaval_to_object<cocosbuilder::CCBAnimationManager>(tolua_S, 2, "cc.CCBAnimationManager",&arg0, "cc.CCAniNode:setAnimationManager");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCAniNode_setAnimationManager'", nullptr);
            return 0;
        }
        cobj->setAnimationManager(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCAniNode:setAnimationManager",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCAniNode_setAnimationManager'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCAniNode_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCAniNode",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCAniNode_create'", nullptr);
            return 0;
        }
        cocos2d::extension::CCAniNode* ret = cocos2d::extension::CCAniNode::create();
        object_to_luaval<cocos2d::extension::CCAniNode>(tolua_S, "cc.CCAniNode",(cocos2d::extension::CCAniNode*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCAniNode:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCAniNode_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCAniNode_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCAniNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCAniNode_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCAniNode();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"cc.CCAniNode");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCAniNode:CCAniNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCAniNode_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCAniNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCAniNode)");
    return 0;
}

int lua_register_cocos2dx_if_CCAniNode(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCAniNode");
    tolua_cclass(tolua_S,"CCAniNode","cc.CCAniNode","cc.CCIFTouchNode",nullptr);

    tolua_beginmodule(tolua_S,"CCAniNode");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCAniNode_constructor);
        tolua_function(tolua_S,"getAnimationManager",lua_cocos2dx_if_CCAniNode_getAnimationManager);
        tolua_function(tolua_S,"setAnimationManager",lua_cocos2dx_if_CCAniNode_setAnimationManager);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCAniNode_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCAniNode).name();
    g_luaType[typeName] = "cc.CCAniNode";
    g_typeCast["CCAniNode"] = "cc.CCAniNode";
    return 1;
}

int lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchMoved(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCTableViewTouchIFCell*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchMoved'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCTableViewTouchIFCell:onTouchMoved");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCTableViewTouchIFCell:onTouchMoved");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchMoved'", nullptr);
            return 0;
        }
        cobj->onTouchMoved(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:onTouchMoved",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchMoved'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchEnded(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCTableViewTouchIFCell*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchEnded'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCTableViewTouchIFCell:onTouchEnded");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCTableViewTouchIFCell:onTouchEnded");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchEnded'", nullptr);
            return 0;
        }
        cobj->onTouchEnded(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:onTouchEnded",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchEnded'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchCancelled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCTableViewTouchIFCell*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchCancelled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCTableViewTouchIFCell:onTouchCancelled");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCTableViewTouchIFCell:onTouchCancelled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchCancelled'", nullptr);
            return 0;
        }
        cobj->onTouchCancelled(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:onTouchCancelled",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchCancelled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchBegan(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCTableViewTouchIFCell*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchBegan'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "cc.CCTableViewTouchIFCell:onTouchBegan");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "cc.CCTableViewTouchIFCell:onTouchBegan");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchBegan'", nullptr);
            return 0;
        }
        bool ret = cobj->onTouchBegan(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:onTouchBegan",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchBegan'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_setSwallowsTouches(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCTableViewTouchIFCell*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_setSwallowsTouches'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCTableViewTouchIFCell:setSwallowsTouches");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_setSwallowsTouches'", nullptr);
            return 0;
        }
        cobj->setSwallowsTouches(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:setSwallowsTouches",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_setSwallowsTouches'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_setTouchEnabled(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (cocos2d::extension::CCTableViewTouchIFCell*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_setTouchEnabled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "cc.CCTableViewTouchIFCell:setTouchEnabled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_setTouchEnabled'", nullptr);
            return 0;
        }
        cobj->setTouchEnabled(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:setTouchEnabled",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_setTouchEnabled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"cc.CCTableViewTouchIFCell",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_create'", nullptr);
            return 0;
        }
        cocos2d::extension::CCTableViewTouchIFCell* ret = cocos2d::extension::CCTableViewTouchIFCell::create();
        object_to_luaval<cocos2d::extension::CCTableViewTouchIFCell>(tolua_S, "cc.CCTableViewTouchIFCell",(cocos2d::extension::CCTableViewTouchIFCell*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "cc.CCTableViewTouchIFCell:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_CCTableViewTouchIFCell_constructor(lua_State* tolua_S)
{
    int argc = 0;
    cocos2d::extension::CCTableViewTouchIFCell* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_constructor'", nullptr);
            return 0;
        }
        cobj = new cocos2d::extension::CCTableViewTouchIFCell();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"cc.CCTableViewTouchIFCell");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "cc.CCTableViewTouchIFCell:CCTableViewTouchIFCell",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_CCTableViewTouchIFCell_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_CCTableViewTouchIFCell_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CCTableViewTouchIFCell)");
    return 0;
}

int lua_register_cocos2dx_if_CCTableViewTouchIFCell(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"cc.CCTableViewTouchIFCell");
    tolua_cclass(tolua_S,"CCTableViewTouchIFCell","cc.CCTableViewTouchIFCell","cc.TableViewCell",nullptr);

    tolua_beginmodule(tolua_S,"CCTableViewTouchIFCell");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_CCTableViewTouchIFCell_constructor);
        tolua_function(tolua_S,"onTouchMoved",lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchMoved);
        tolua_function(tolua_S,"onTouchEnded",lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchEnded);
        tolua_function(tolua_S,"onTouchCancelled",lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchCancelled);
        tolua_function(tolua_S,"onTouchBegan",lua_cocos2dx_if_CCTableViewTouchIFCell_onTouchBegan);
        tolua_function(tolua_S,"setSwallowsTouches",lua_cocos2dx_if_CCTableViewTouchIFCell_setSwallowsTouches);
        tolua_function(tolua_S,"setTouchEnabled",lua_cocos2dx_if_CCTableViewTouchIFCell_setTouchEnabled);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_CCTableViewTouchIFCell_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(cocos2d::extension::CCTableViewTouchIFCell).name();
    g_luaType[typeName] = "cc.CCTableViewTouchIFCell";
    g_typeCast["CCTableViewTouchIFCell"] = "cc.CCTableViewTouchIFCell";
    return 1;
}

int lua_cocos2dx_if_PopupBaseView_getInFlag(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getInFlag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getInFlag'", nullptr);
            return 0;
        }
        bool ret = cobj->getInFlag();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getInFlag",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getInFlag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setModelLayerContentSize(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerContentSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        ok &= luaval_to_size(tolua_S, 2, &arg0, "PopupBaseView:setModelLayerContentSize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerContentSize'", nullptr);
            return 0;
        }
        cobj->setModelLayerContentSize(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setModelLayerContentSize",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerContentSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setModelLayerTouchPriority(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerTouchPriority'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PopupBaseView:setModelLayerTouchPriority");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerTouchPriority'", nullptr);
            return 0;
        }
        cobj->setModelLayerTouchPriority(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setModelLayerTouchPriority",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerTouchPriority'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setInFlag(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setInFlag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:setInFlag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setInFlag'", nullptr);
            return 0;
        }
        cobj->setInFlag(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setInFlag",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setInFlag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_changeBGMaxHeight(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_changeBGMaxHeight'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "PopupBaseView:changeBGMaxHeight");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_changeBGMaxHeight'", nullptr);
            return 0;
        }
        cobj->changeBGMaxHeight(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:changeBGMaxHeight",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_changeBGMaxHeight'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getExtendHeightWithoutTop(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getExtendHeightWithoutTop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getExtendHeightWithoutTop'", nullptr);
            return 0;
        }
        double ret = cobj->getExtendHeightWithoutTop();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getExtendHeightWithoutTop",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getExtendHeightWithoutTop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getTopHeight(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getTopHeight'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getTopHeight'", nullptr);
            return 0;
        }
        double ret = cobj->getTopHeight();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getTopHeight",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getTopHeight'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setViewID(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setViewID'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PopupBaseView:setViewID");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setViewID'", nullptr);
            return 0;
        }
        cobj->setViewID(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setViewID",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setViewID'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_closeSelf(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_closeSelf'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_closeSelf'", nullptr);
            return 0;
        }
        cobj->closeSelf();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:closeSelf",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_closeSelf'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getIsHDPanel(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getIsHDPanel'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getIsHDPanel'", nullptr);
            return 0;
        }
        bool ret = cobj->getIsHDPanel();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getIsHDPanel",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getIsHDPanel'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setModelLayerColor(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        ok &= luaval_to_color3b(tolua_S, 2, &arg0, "PopupBaseView:setModelLayerColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerColor'", nullptr);
            return 0;
        }
        cobj->setModelLayerColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setModelLayerColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getExtendHeight(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getExtendHeight'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getExtendHeight'", nullptr);
            return 0;
        }
        double ret = cobj->getExtendHeight();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getExtendHeight",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getExtendHeight'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setIsSystemMail(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setIsSystemMail'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:setIsSystemMail");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setIsSystemMail'", nullptr);
            return 0;
        }
        cobj->setIsSystemMail(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setIsSystemMail",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setIsSystemMail'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_init(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:init");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        bool arg0;
        int arg1;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:init");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "PopupBaseView:init");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_ForceClear(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_ForceClear'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_ForceClear'", nullptr);
            return 0;
        }
        cobj->ForceClear();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:ForceClear");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_ForceClear'", nullptr);
            return 0;
        }
        cobj->ForceClear(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:ForceClear",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_ForceClear'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getCloseId(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getCloseId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getCloseId'", nullptr);
            return 0;
        }
        int ret = cobj->getCloseId();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getCloseId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getCloseId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setCloseId(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setCloseId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PopupBaseView:setCloseId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setCloseId'", nullptr);
            return 0;
        }
        cobj->setCloseId(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setCloseId",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setCloseId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setChangeAniType(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setChangeAniType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PopupBaseView:setChangeAniType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setChangeAniType'", nullptr);
            return 0;
        }
        cobj->setChangeAniType(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setChangeAniType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setChangeAniType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setHDPanelFlag(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setHDPanelFlag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:setHDPanelFlag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setHDPanelFlag'", nullptr);
            return 0;
        }
        cobj->setHDPanelFlag(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setHDPanelFlag",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setHDPanelFlag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getMailUuid(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getMailUuid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getMailUuid'", nullptr);
            return 0;
        }
        std::string ret = cobj->getMailUuid();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getMailUuid",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getMailUuid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getIsLua(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getIsLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getIsLua'", nullptr);
            return 0;
        }
        bool ret = cobj->getIsLua();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getIsLua",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getIsLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setIsDetectMailFromAndroid(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setIsDetectMailFromAndroid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:setIsDetectMailFromAndroid");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setIsDetectMailFromAndroid'", nullptr);
            return 0;
        }
        cobj->setIsDetectMailFromAndroid(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setIsDetectMailFromAndroid",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setIsDetectMailFromAndroid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setModelLayerOpacity(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerOpacity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PopupBaseView:setModelLayerOpacity");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerOpacity'", nullptr);
            return 0;
        }
        cobj->setModelLayerOpacity(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setModelLayerOpacity",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerOpacity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getIsSystemMail(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getIsSystemMail'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getIsSystemMail'", nullptr);
            return 0;
        }
        bool ret = cobj->getIsSystemMail();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getIsSystemMail",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getIsSystemMail'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_initCommonBg(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_initCommonBg'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_initCommonBg'", nullptr);
            return 0;
        }
        cobj->initCommonBg();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:initCommonBg",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_initCommonBg'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_changeBGHeight(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_changeBGHeight'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "PopupBaseView:changeBGHeight");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_changeBGHeight'", nullptr);
            return 0;
        }
        cobj->changeBGHeight(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:changeBGHeight",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_changeBGHeight'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_onExit(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_onExit'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_onExit'", nullptr);
            return 0;
        }
        cobj->onExit();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:onExit",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_onExit'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getViewID(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getViewID'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getViewID'", nullptr);
            return 0;
        }
        int ret = cobj->getViewID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getViewID",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getViewID'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getChangeAniType(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getChangeAniType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getChangeAniType'", nullptr);
            return 0;
        }
        int ret = cobj->getChangeAniType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getChangeAniType",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getChangeAniType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_isAniComplete(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_isAniComplete'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_isAniComplete'", nullptr);
            return 0;
        }
        bool ret = cobj->isAniComplete();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:isAniComplete",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_isAniComplete'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setModelLayerDisplay(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerDisplay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupBaseView:setModelLayerDisplay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerDisplay'", nullptr);
            return 0;
        }
        cobj->setModelLayerDisplay(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setModelLayerDisplay",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setModelLayerDisplay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_removeModelLayer(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_removeModelLayer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_removeModelLayer'", nullptr);
            return 0;
        }
        cobj->removeModelLayer();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:removeModelLayer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_removeModelLayer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getIsDetectMailFromAndroid(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getIsDetectMailFromAndroid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getIsDetectMailFromAndroid'", nullptr);
            return 0;
        }
        bool ret = cobj->getIsDetectMailFromAndroid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getIsDetectMailFromAndroid",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getIsDetectMailFromAndroid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getBGHeight(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getBGHeight'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getBGHeight'", nullptr);
            return 0;
        }
        double ret = cobj->getBGHeight();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getBGHeight",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getBGHeight'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setTitleName(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setTitleName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PopupBaseView:setTitleName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setTitleName'", nullptr);
            return 0;
        }
        cobj->setTitleName(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setTitleName",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setTitleName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_getOpenAnimation(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_getOpenAnimation'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_getOpenAnimation'", nullptr);
            return 0;
        }
        bool ret = cobj->getOpenAnimation();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:getOpenAnimation",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_getOpenAnimation'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_setMailUuid(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupBaseView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupBaseView_setMailUuid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PopupBaseView:setMailUuid");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_setMailUuid'", nullptr);
            return 0;
        }
        cobj->setMailUuid(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:setMailUuid",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_setMailUuid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupBaseView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"PopupBaseView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_create'", nullptr);
            return 0;
        }
        PopupBaseView* ret = PopupBaseView::create();
        object_to_luaval<PopupBaseView>(tolua_S, "PopupBaseView",(PopupBaseView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "PopupBaseView:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_PopupBaseView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    PopupBaseView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupBaseView_constructor'", nullptr);
            return 0;
        }
        cobj = new PopupBaseView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"PopupBaseView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupBaseView:PopupBaseView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupBaseView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_PopupBaseView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (PopupBaseView)");
    return 0;
}

int lua_register_cocos2dx_if_PopupBaseView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PopupBaseView");
    tolua_cclass(tolua_S,"PopupBaseView","PopupBaseView","cc.CCAniNode",nullptr);

    tolua_beginmodule(tolua_S,"PopupBaseView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_PopupBaseView_constructor);
        tolua_function(tolua_S,"getInFlag",lua_cocos2dx_if_PopupBaseView_getInFlag);
        tolua_function(tolua_S,"setModelLayerContentSize",lua_cocos2dx_if_PopupBaseView_setModelLayerContentSize);
        tolua_function(tolua_S,"setModelLayerTouchPriority",lua_cocos2dx_if_PopupBaseView_setModelLayerTouchPriority);
        tolua_function(tolua_S,"setInFlag",lua_cocos2dx_if_PopupBaseView_setInFlag);
        tolua_function(tolua_S,"changeBGMaxHeight",lua_cocos2dx_if_PopupBaseView_changeBGMaxHeight);
        tolua_function(tolua_S,"getExtendHeightWithoutTop",lua_cocos2dx_if_PopupBaseView_getExtendHeightWithoutTop);
        tolua_function(tolua_S,"getTopHeight",lua_cocos2dx_if_PopupBaseView_getTopHeight);
        tolua_function(tolua_S,"setViewID",lua_cocos2dx_if_PopupBaseView_setViewID);
        tolua_function(tolua_S,"closeSelf",lua_cocos2dx_if_PopupBaseView_closeSelf);
        tolua_function(tolua_S,"getIsHDPanel",lua_cocos2dx_if_PopupBaseView_getIsHDPanel);
        tolua_function(tolua_S,"setModelLayerColor",lua_cocos2dx_if_PopupBaseView_setModelLayerColor);
        tolua_function(tolua_S,"getExtendHeight",lua_cocos2dx_if_PopupBaseView_getExtendHeight);
        tolua_function(tolua_S,"setIsSystemMail",lua_cocos2dx_if_PopupBaseView_setIsSystemMail);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_PopupBaseView_init);
        tolua_function(tolua_S,"ForceClear",lua_cocos2dx_if_PopupBaseView_ForceClear);
        tolua_function(tolua_S,"getCloseId",lua_cocos2dx_if_PopupBaseView_getCloseId);
        tolua_function(tolua_S,"setCloseId",lua_cocos2dx_if_PopupBaseView_setCloseId);
        tolua_function(tolua_S,"setChangeAniType",lua_cocos2dx_if_PopupBaseView_setChangeAniType);
        tolua_function(tolua_S,"setHDPanelFlag",lua_cocos2dx_if_PopupBaseView_setHDPanelFlag);
        tolua_function(tolua_S,"getMailUuid",lua_cocos2dx_if_PopupBaseView_getMailUuid);
        tolua_function(tolua_S,"getIsLua",lua_cocos2dx_if_PopupBaseView_getIsLua);
        tolua_function(tolua_S,"setIsDetectMailFromAndroid",lua_cocos2dx_if_PopupBaseView_setIsDetectMailFromAndroid);
        tolua_function(tolua_S,"setModelLayerOpacity",lua_cocos2dx_if_PopupBaseView_setModelLayerOpacity);
        tolua_function(tolua_S,"getIsSystemMail",lua_cocos2dx_if_PopupBaseView_getIsSystemMail);
        tolua_function(tolua_S,"initCommonBg",lua_cocos2dx_if_PopupBaseView_initCommonBg);
        tolua_function(tolua_S,"changeBGHeight",lua_cocos2dx_if_PopupBaseView_changeBGHeight);
        tolua_function(tolua_S,"onExit",lua_cocos2dx_if_PopupBaseView_onExit);
        tolua_function(tolua_S,"getViewID",lua_cocos2dx_if_PopupBaseView_getViewID);
        tolua_function(tolua_S,"getChangeAniType",lua_cocos2dx_if_PopupBaseView_getChangeAniType);
        tolua_function(tolua_S,"isAniComplete",lua_cocos2dx_if_PopupBaseView_isAniComplete);
        tolua_function(tolua_S,"setModelLayerDisplay",lua_cocos2dx_if_PopupBaseView_setModelLayerDisplay);
        tolua_function(tolua_S,"removeModelLayer",lua_cocos2dx_if_PopupBaseView_removeModelLayer);
        tolua_function(tolua_S,"getIsDetectMailFromAndroid",lua_cocos2dx_if_PopupBaseView_getIsDetectMailFromAndroid);
        tolua_function(tolua_S,"getBGHeight",lua_cocos2dx_if_PopupBaseView_getBGHeight);
        tolua_function(tolua_S,"setTitleName",lua_cocos2dx_if_PopupBaseView_setTitleName);
        tolua_function(tolua_S,"getOpenAnimation",lua_cocos2dx_if_PopupBaseView_getOpenAnimation);
        tolua_function(tolua_S,"setMailUuid",lua_cocos2dx_if_PopupBaseView_setMailUuid);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_PopupBaseView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PopupBaseView).name();
    g_luaType[typeName] = "PopupBaseView";
    g_typeCast["PopupBaseView"] = "PopupBaseView";
    return 1;
}

int lua_cocos2dx_if_TipsView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"TipsView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsView_create'", nullptr);
            return 0;
        }
        TipsView* ret = TipsView::create(arg0);
        object_to_luaval<TipsView>(tolua_S, "TipsView",(TipsView*)ret);
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        cocos2d::TextHAlignment arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsView:create");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "TipsView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsView_create'", nullptr);
            return 0;
        }
        TipsView* ret = TipsView::create(arg0, arg1);
        object_to_luaval<TipsView>(tolua_S, "TipsView",(TipsView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "TipsView:create",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_TipsView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    TipsView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsView_constructor'", nullptr);
            return 0;
        }
        cobj = new TipsView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TipsView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "TipsView:TipsView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_TipsView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TipsView)");
    return 0;
}

int lua_register_cocos2dx_if_TipsView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TipsView");
    tolua_cclass(tolua_S,"TipsView","TipsView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"TipsView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_TipsView_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_TipsView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TipsView).name();
    g_luaType[typeName] = "TipsView";
    g_typeCast["TipsView"] = "TipsView";
    return 1;
}

int lua_cocos2dx_if_TipsVipView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"TipsVipView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsVipView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsVipView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsVipView_create'", nullptr);
            return 0;
        }
        TipsVipView* ret = TipsVipView::create(arg0, arg1);
        object_to_luaval<TipsVipView>(tolua_S, "TipsVipView",(TipsVipView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "TipsVipView:create",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsVipView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_TipsVipView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    TipsVipView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsVipView_constructor'", nullptr);
            return 0;
        }
        cobj = new TipsVipView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TipsVipView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "TipsVipView:TipsVipView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsVipView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_TipsVipView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TipsVipView)");
    return 0;
}

int lua_register_cocos2dx_if_TipsVipView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TipsVipView");
    tolua_cclass(tolua_S,"TipsVipView","TipsVipView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"TipsVipView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_TipsVipView_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_TipsVipView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TipsVipView).name();
    g_luaType[typeName] = "TipsVipView";
    g_typeCast["TipsVipView"] = "TipsVipView";
    return 1;
}

int lua_cocos2dx_if_TipsGuideView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"TipsGuideView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsGuideView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsGuideView_create'", nullptr);
            return 0;
        }
        TipsGuideView* ret = TipsGuideView::create(arg0);
        object_to_luaval<TipsGuideView>(tolua_S, "TipsGuideView",(TipsGuideView*)ret);
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        double arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsGuideView:create");
        ok &= luaval_to_number(tolua_S, 3,&arg1, "TipsGuideView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsGuideView_create'", nullptr);
            return 0;
        }
        TipsGuideView* ret = TipsGuideView::create(arg0, arg1);
        object_to_luaval<TipsGuideView>(tolua_S, "TipsGuideView",(TipsGuideView*)ret);
        return 1;
    }
    if (argc == 3)
    {
        std::string arg0;
        double arg1;
        cocos2d::TextHAlignment arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsGuideView:create");
        ok &= luaval_to_number(tolua_S, 3,&arg1, "TipsGuideView:create");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "TipsGuideView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsGuideView_create'", nullptr);
            return 0;
        }
        TipsGuideView* ret = TipsGuideView::create(arg0, arg1, arg2);
        object_to_luaval<TipsGuideView>(tolua_S, "TipsGuideView",(TipsGuideView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "TipsGuideView:create",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsGuideView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_TipsGuideView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    TipsGuideView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsGuideView_constructor'", nullptr);
            return 0;
        }
        cobj = new TipsGuideView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TipsGuideView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "TipsGuideView:TipsGuideView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsGuideView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_TipsGuideView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TipsGuideView)");
    return 0;
}

int lua_register_cocos2dx_if_TipsGuideView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TipsGuideView");
    tolua_cclass(tolua_S,"TipsGuideView","TipsGuideView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"TipsGuideView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_TipsGuideView_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_TipsGuideView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TipsGuideView).name();
    g_luaType[typeName] = "TipsGuideView";
    g_typeCast["TipsGuideView"] = "TipsGuideView";
    return 1;
}

int lua_cocos2dx_if_TipsNewView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"TipsNewView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsNewView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_create'", nullptr);
            return 0;
        }
        TipsNewView* ret = TipsNewView::create(arg0, arg1);
        object_to_luaval<TipsNewView>(tolua_S, "TipsNewView",(TipsNewView*)ret);
        return 1;
    }
    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "TipsNewView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_create'", nullptr);
            return 0;
        }
        TipsNewView* ret = TipsNewView::create(arg0, arg1, arg2);
        object_to_luaval<TipsNewView>(tolua_S, "TipsNewView",(TipsNewView*)ret);
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        std::string arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "TipsNewView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_create'", nullptr);
            return 0;
        }
        TipsNewView* ret = TipsNewView::create(arg0, arg1, arg2, arg3);
        object_to_luaval<TipsNewView>(tolua_S, "TipsNewView",(TipsNewView*)ret);
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        std::string arg3;
        cocos2d::TextHAlignment arg4;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "TipsNewView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_create'", nullptr);
            return 0;
        }
        TipsNewView* ret = TipsNewView::create(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<TipsNewView>(tolua_S, "TipsNewView",(TipsNewView*)ret);
        return 1;
    }
    if (argc == 6)
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        std::string arg3;
        cocos2d::TextHAlignment arg4;
        double arg5;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "TipsNewView:create");
        ok &= luaval_to_number(tolua_S, 7,&arg5, "TipsNewView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_create'", nullptr);
            return 0;
        }
        TipsNewView* ret = TipsNewView::create(arg0, arg1, arg2, arg3, arg4, arg5);
        object_to_luaval<TipsNewView>(tolua_S, "TipsNewView",(TipsNewView*)ret);
        return 1;
    }
    if (argc == 7)
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        std::string arg3;
        cocos2d::TextHAlignment arg4;
        double arg5;
        double arg6;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "TipsNewView:create");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "TipsNewView:create");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "TipsNewView:create");
        ok &= luaval_to_number(tolua_S, 7,&arg5, "TipsNewView:create");
        ok &= luaval_to_number(tolua_S, 8,&arg6, "TipsNewView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_create'", nullptr);
            return 0;
        }
        TipsNewView* ret = TipsNewView::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        object_to_luaval<TipsNewView>(tolua_S, "TipsNewView",(TipsNewView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "TipsNewView:create",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsNewView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_TipsNewView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    TipsNewView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsNewView_constructor'", nullptr);
            return 0;
        }
        cobj = new TipsNewView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TipsNewView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "TipsNewView:TipsNewView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsNewView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_TipsNewView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TipsNewView)");
    return 0;
}

int lua_register_cocos2dx_if_TipsNewView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TipsNewView");
    tolua_cclass(tolua_S,"TipsNewView","TipsNewView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"TipsNewView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_TipsNewView_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_TipsNewView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TipsNewView).name();
    g_luaType[typeName] = "TipsNewView";
    g_typeCast["TipsNewView"] = "TipsNewView";
    return 1;
}

int lua_cocos2dx_if_YesNoDialog_getCloseCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_getCloseCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_getCloseCallback'", nullptr);
            return 0;
        }
        cocos2d::CallFunc* ret = cobj->getCloseCallback();
        object_to_luaval<cocos2d::CallFunc>(tolua_S, "cc.CallFunc",(cocos2d::CallFunc*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:getCloseCallback",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_getCloseCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_getYesCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_getYesCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_getYesCallback'", nullptr);
            return 0;
        }
        cocos2d::CallFunc* ret = cobj->getYesCallback();
        object_to_luaval<cocos2d::CallFunc>(tolua_S, "cc.CallFunc",(cocos2d::CallFunc*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:getYesCallback",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_getYesCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setSelCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setSelCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::CallFunc* arg0;

        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 2, "cc.CallFunc",&arg0, "YesNoDialog:setSelCallback");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setSelCallback'", nullptr);
            return 0;
        }
        cobj->setSelCallback(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setSelCallback",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setSelCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_getNoCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_getNoCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_getNoCallback'", nullptr);
            return 0;
        }
        cocos2d::CallFunc* ret = cobj->getNoCallback();
        object_to_luaval<cocos2d::CallFunc>(tolua_S, "cc.CallFunc",(cocos2d::CallFunc*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:getNoCallback",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_getNoCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setDisableWhenTouched(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setDisableWhenTouched'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "YesNoDialog:setDisableWhenTouched");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setDisableWhenTouched'", nullptr);
            return 0;
        }
        cobj->setDisableWhenTouched(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setDisableWhenTouched",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setDisableWhenTouched'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setCloseCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setCloseCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::CallFunc* arg0;

        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 2, "cc.CallFunc",&arg0, "YesNoDialog:setCloseCallback");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setCloseCallback'", nullptr);
            return 0;
        }
        cobj->setCloseCallback(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setCloseCallback",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setCloseCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_getDisableWhenTouched(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_getDisableWhenTouched'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_getDisableWhenTouched'", nullptr);
            return 0;
        }
        bool ret = cobj->getDisableWhenTouched();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:getDisableWhenTouched",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_getDisableWhenTouched'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setNoButtonTitle(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setNoButtonTitle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:setNoButtonTitle"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setNoButtonTitle'", nullptr);
            return 0;
        }
        cobj->setNoButtonTitle(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setNoButtonTitle",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setNoButtonTitle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_keypressedBtnCancel(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_keypressedBtnCancel'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        cocos2d::extension::Control::EventType arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "YesNoDialog:keypressedBtnCancel");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "YesNoDialog:keypressedBtnCancel");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_keypressedBtnCancel'", nullptr);
            return 0;
        }
        cobj->keypressedBtnCancel(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:keypressedBtnCancel",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_keypressedBtnCancel'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_goToBetaUpdate(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_goToBetaUpdate'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_goToBetaUpdate'", nullptr);
            return 0;
        }
        cobj->goToBetaUpdate();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:goToBetaUpdate",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_goToBetaUpdate'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setYesText(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setYesText'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:setYesText"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setYesText'", nullptr);
            return 0;
        }
        cobj->setYesText(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setYesText",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setYesText'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_init(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:init"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        const char* arg0;
        const char* arg1;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:init"); arg0 = arg0_tmp.c_str();

        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "YesNoDialog:init"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 3) 
    {
        const char* arg0;
        const char* arg1;
        int arg2;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:init"); arg0 = arg0_tmp.c_str();

        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "YesNoDialog:init"); arg1 = arg1_tmp.c_str();

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:init");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:init",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_getSelCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_getSelCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_getSelCallback'", nullptr);
            return 0;
        }
        cocos2d::CallFunc* ret = cobj->getSelCallback();
        object_to_luaval<cocos2d::CallFunc>(tolua_S, "cc.CallFunc",(cocos2d::CallFunc*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:getSelCallback",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_getSelCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_getCloseOnNoButton(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_getCloseOnNoButton'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_getCloseOnNoButton'", nullptr);
            return 0;
        }
        bool ret = cobj->getCloseOnNoButton();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:getCloseOnNoButton",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_getCloseOnNoButton'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_gotoPayCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_gotoPayCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_gotoPayCallback'", nullptr);
            return 0;
        }
        cobj->gotoPayCallback();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:gotoPayCallback",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_gotoPayCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setYesButtonTitle(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setYesButtonTitle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:setYesButtonTitle"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setYesButtonTitle'", nullptr);
            return 0;
        }
        cobj->setYesButtonTitle(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setYesButtonTitle",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setYesButtonTitle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_onClickNoticeBtn(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_onClickNoticeBtn'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        cocos2d::extension::Control::EventType arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "YesNoDialog:onClickNoticeBtn");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "YesNoDialog:onClickNoticeBtn");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_onClickNoticeBtn'", nullptr);
            return 0;
        }
        cobj->onClickNoticeBtn(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:onClickNoticeBtn",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_onClickNoticeBtn'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setUpAutoClose(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setUpAutoClose'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setUpAutoClose'", nullptr);
            return 0;
        }
        cobj->setUpAutoClose();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setUpAutoClose",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setUpAutoClose'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setYesCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setYesCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::CallFunc* arg0;

        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 2, "cc.CallFunc",&arg0, "YesNoDialog:setYesCallback");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setYesCallback'", nullptr);
            return 0;
        }
        cobj->setYesCallback(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setYesCallback",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setYesCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_hideNoButton(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_hideNoButton'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_hideNoButton'", nullptr);
            return 0;
        }
        cobj->hideNoButton();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:hideNoButton",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_hideNoButton'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_keyPressedBtnClose(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_keyPressedBtnClose'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        cocos2d::extension::Control::EventType arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "YesNoDialog:keyPressedBtnClose");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "YesNoDialog:keyPressedBtnClose");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_keyPressedBtnClose'", nullptr);
            return 0;
        }
        cobj->keyPressedBtnClose(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:keyPressedBtnClose",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_keyPressedBtnClose'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setCloseOnNoButton(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setCloseOnNoButton'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "YesNoDialog:setCloseOnNoButton");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setCloseOnNoButton'", nullptr);
            return 0;
        }
        cobj->setCloseOnNoButton(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setCloseOnNoButton",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setCloseOnNoButton'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showCdToolBtn(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_showCdToolBtn'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "YesNoDialog:showCdToolBtn");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "YesNoDialog:showCdToolBtn");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showCdToolBtn");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showCdToolBtn'", nullptr);
            return 0;
        }
        cobj->showCdToolBtn(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:showCdToolBtn",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showCdToolBtn'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_doAutoClose(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_doAutoClose'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "YesNoDialog:doAutoClose");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_doAutoClose'", nullptr);
            return 0;
        }
        cobj->doAutoClose(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:doAutoClose",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_doAutoClose'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showMuteTimeNode(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_showMuteTimeNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showMuteTimeNode'", nullptr);
            return 0;
        }
        cobj->showMuteTimeNode();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:showMuteTimeNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showMuteTimeNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showCancelButton(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_showCancelButton'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showCancelButton'", nullptr);
            return 0;
        }
        cobj->showCancelButton();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:showCancelButton",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showCancelButton'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_setNoCallback(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (YesNoDialog*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_YesNoDialog_setNoCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::CallFunc* arg0;

        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 2, "cc.CallFunc",&arg0, "YesNoDialog:setNoCallback");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_setNoCallback'", nullptr);
            return 0;
        }
        cobj->setNoCallback(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:setNoCallback",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_setNoCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showQuitDialog(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::CallFunc* arg0;
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 2, "cc.CallFunc",&arg0, "YesNoDialog:showQuitDialog");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showQuitDialog'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showQuitDialog(arg0);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 2)
    {
        cocos2d::CallFunc* arg0;
        bool arg1;
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 2, "cc.CallFunc",&arg0, "YesNoDialog:showQuitDialog");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "YesNoDialog:showQuitDialog");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showQuitDialog'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showQuitDialog(arg0, arg1);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showQuitDialog",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showQuitDialog'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_gotoPayTips(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_gotoPayTips'", nullptr);
            return 0;
        }
        YesNoDialog::gotoPayTips();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:gotoPayTips",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_gotoPayTips'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showResCost(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 6)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        bool arg3;
        int arg4;
        int arg5;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showResCost"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showResCost");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showResCost"); arg2 = arg2_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:showResCost");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "YesNoDialog:showResCost");
        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "YesNoDialog:showResCost");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showResCost'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showResCost(arg0, arg1, arg2, arg3, arg4, arg5);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showResCost",argc, 6);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showResCost'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showButtonAndGold(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        int arg3;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showButtonAndGold"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showButtonAndGold");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showButtonAndGold"); arg2 = arg2_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "YesNoDialog:showButtonAndGold");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showButtonAndGold'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showButtonAndGold(arg0, arg1, arg2, arg3);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 5)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        int arg3;
        const char* arg4;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showButtonAndGold"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showButtonAndGold");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showButtonAndGold"); arg2 = arg2_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "YesNoDialog:showButtonAndGold");
        std::string arg4_tmp; ok &= luaval_to_std_string(tolua_S, 6, &arg4_tmp, "YesNoDialog:showButtonAndGold"); arg4 = arg4_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showButtonAndGold'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showButtonAndGold(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showButtonAndGold",argc, 4);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showButtonAndGold'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_show(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 2)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 3)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 4)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            bool arg3;
            ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:show");
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2, arg3);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 5)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            bool arg3;
            ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg4;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:show");
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2, arg3, arg4);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 6)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            bool arg3;
            ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg4;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg5;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 7, "cc.CallFunc",&arg5, "YesNoDialog:show");
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2, arg3, arg4, arg5);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 7)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            bool arg3;
            ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg4;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg5;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 7, "cc.CallFunc",&arg5, "YesNoDialog:show");
            if (!ok) { break; }
            const char* arg6;
            std::string arg6_tmp; ok &= luaval_to_std_string(tolua_S, 8, &arg6_tmp, "YesNoDialog:show"); arg6 = arg6_tmp.c_str();
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 8)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            cocos2d::CallFunc* arg1;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:show");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            bool arg3;
            ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg4;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:show");
            if (!ok) { break; }
            cocos2d::CallFunc* arg5;
            ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 7, "cc.CallFunc",&arg5, "YesNoDialog:show");
            if (!ok) { break; }
            const char* arg6;
            std::string arg6_tmp; ok &= luaval_to_std_string(tolua_S, 8, &arg6_tmp, "YesNoDialog:show"); arg6 = arg6_tmp.c_str();
            if (!ok) { break; }
            const char* arg7;
            std::string arg7_tmp; ok &= luaval_to_std_string(tolua_S, 9, &arg7_tmp, "YesNoDialog:show"); arg7 = arg7_tmp.c_str();
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 2)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            std::function<void ()> arg1;
            do {
			// Lambda binding for lua is not supported.
			assert(false);
		} while(0)
		;
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 3)
        {
            const char* arg0;
            std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:show"); arg0 = arg0_tmp.c_str();
            if (!ok) { break; }
            std::function<void ()> arg1;
            do {
			// Lambda binding for lua is not supported.
			assert(false);
		} while(0)
		;
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:show");
            if (!ok) { break; }
            YesNoDialog* ret = YesNoDialog::show(arg0, arg1, arg2);
            object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d", "YesNoDialog:show",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_show'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showTime(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showTime"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showTime'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showTime(arg0, arg1, arg2);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 4)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        const char* arg3;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showTime"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showTime");
        std::string arg3_tmp; ok &= luaval_to_std_string(tolua_S, 5, &arg3_tmp, "YesNoDialog:showTime"); arg3 = arg3_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showTime'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showTime(arg0, arg1, arg2, arg3);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 5)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        const char* arg3;
        bool arg4;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showTime"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showTime");
        std::string arg3_tmp; ok &= luaval_to_std_string(tolua_S, 5, &arg3_tmp, "YesNoDialog:showTime"); arg3 = arg3_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "YesNoDialog:showTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showTime'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showTime(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 6)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        const char* arg3;
        bool arg4;
        int arg5;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showTime"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showTime");
        std::string arg3_tmp; ok &= luaval_to_std_string(tolua_S, 5, &arg3_tmp, "YesNoDialog:showTime"); arg3 = arg3_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "YesNoDialog:showTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showTime'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showTime(arg0, arg1, arg2, arg3, arg4, arg5);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 7)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        const char* arg3;
        bool arg4;
        int arg5;
        int arg6;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showTime"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showTime");
        std::string arg3_tmp; ok &= luaval_to_std_string(tolua_S, 5, &arg3_tmp, "YesNoDialog:showTime"); arg3 = arg3_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "YesNoDialog:showTime");
        ok &= luaval_to_int32(tolua_S, 8,(int *)&arg6, "YesNoDialog:showTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showTime'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showTime(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showTime",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showTime'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_lotteryShow(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 3)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:lotteryShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1, arg2);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 4)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        bool arg3;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:lotteryShow");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:lotteryShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1, arg2, arg3);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 5)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        bool arg3;
        cocos2d::CallFunc* arg4;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:lotteryShow");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:lotteryShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 6)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        bool arg3;
        cocos2d::CallFunc* arg4;
        cocos2d::CallFunc* arg5;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:lotteryShow");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 7, "cc.CallFunc",&arg5, "YesNoDialog:lotteryShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1, arg2, arg3, arg4, arg5);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 7)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        bool arg3;
        cocos2d::CallFunc* arg4;
        cocos2d::CallFunc* arg5;
        const char* arg6;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:lotteryShow");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 7, "cc.CallFunc",&arg5, "YesNoDialog:lotteryShow");
        std::string arg6_tmp; ok &= luaval_to_std_string(tolua_S, 8, &arg6_tmp, "YesNoDialog:lotteryShow"); arg6 = arg6_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 8)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        int arg2;
        bool arg3;
        cocos2d::CallFunc* arg4;
        cocos2d::CallFunc* arg5;
        const char* arg6;
        const char* arg7;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:lotteryShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:lotteryShow");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:lotteryShow");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 6, "cc.CallFunc",&arg4, "YesNoDialog:lotteryShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 7, "cc.CallFunc",&arg5, "YesNoDialog:lotteryShow");
        std::string arg6_tmp; ok &= luaval_to_std_string(tolua_S, 8, &arg6_tmp, "YesNoDialog:lotteryShow"); arg6 = arg6_tmp.c_str();
        std::string arg7_tmp; ok &= luaval_to_std_string(tolua_S, 9, &arg7_tmp, "YesNoDialog:lotteryShow"); arg7 = arg7_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::lotteryShow(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:lotteryShow",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_lotteryShow'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showAllianceConfirm(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        const char* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showAllianceConfirm"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "YesNoDialog:showAllianceConfirm"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showAllianceConfirm'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showAllianceConfirm(arg0, arg1);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showAllianceConfirm",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showAllianceConfirm'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_marchAlertShow(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        cocos2d::CallFunc* arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:marchAlertShow"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:marchAlertShow");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 4, "cc.CallFunc",&arg2, "YesNoDialog:marchAlertShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_marchAlertShow'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::marchAlertShow(arg0, arg1, arg2);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:marchAlertShow",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_marchAlertShow'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showYesDialog(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showYesDialog"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showYesDialog'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showYesDialog(arg0);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 2)
    {
        const char* arg0;
        bool arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showYesDialog"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "YesNoDialog:showYesDialog");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showYesDialog'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showYesDialog(arg0, arg1);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 3)
    {
        const char* arg0;
        bool arg1;
        cocos2d::CallFunc* arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showYesDialog"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "YesNoDialog:showYesDialog");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 4, "cc.CallFunc",&arg2, "YesNoDialog:showYesDialog");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showYesDialog'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showYesDialog(arg0, arg1, arg2);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 4)
    {
        const char* arg0;
        bool arg1;
        cocos2d::CallFunc* arg2;
        bool arg3;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showYesDialog"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "YesNoDialog:showYesDialog");
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 4, "cc.CallFunc",&arg2, "YesNoDialog:showYesDialog");
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:showYesDialog");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showYesDialog'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showYesDialog(arg0, arg1, arg2, arg3);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showYesDialog",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showYesDialog'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showConfirmCloseAllView(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        const char* arg0;
        const char* arg1;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showConfirmCloseAllView"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "YesNoDialog:showConfirmCloseAllView"); arg1 = arg1_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showConfirmCloseAllView'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showConfirmCloseAllView(arg0, arg1);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showConfirmCloseAllView",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showConfirmCloseAllView'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showQueueConfirm(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 8)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        const char* arg3;
        int arg4;
        int arg5;
        const char* arg6;
        int arg7;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showQueueConfirm"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showQueueConfirm");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showQueueConfirm"); arg2 = arg2_tmp.c_str();
        std::string arg3_tmp; ok &= luaval_to_std_string(tolua_S, 5, &arg3_tmp, "YesNoDialog:showQueueConfirm"); arg3 = arg3_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "YesNoDialog:showQueueConfirm");
        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "YesNoDialog:showQueueConfirm");
        std::string arg6_tmp; ok &= luaval_to_std_string(tolua_S, 8, &arg6_tmp, "YesNoDialog:showQueueConfirm"); arg6 = arg6_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 9,(int *)&arg7, "YesNoDialog:showQueueConfirm");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showQueueConfirm'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showQueueConfirm(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showQueueConfirm",argc, 8);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showQueueConfirm'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showButtonAndPriceType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 5)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        int arg3;
        int arg4;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showButtonAndPriceType"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showButtonAndPriceType");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showButtonAndPriceType"); arg2 = arg2_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "YesNoDialog:showButtonAndPriceType");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "YesNoDialog:showButtonAndPriceType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showButtonAndPriceType'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showButtonAndPriceType(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showButtonAndPriceType",argc, 5);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showButtonAndPriceType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showVariableTitle(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showVariableTitle"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showVariableTitle");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showVariableTitle"); arg2 = arg2_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showVariableTitle'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showVariableTitle(arg0, arg1, arg2);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 4)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        bool arg3;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showVariableTitle"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showVariableTitle");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showVariableTitle"); arg2 = arg2_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:showVariableTitle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showVariableTitle'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showVariableTitle(arg0, arg1, arg2, arg3);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    if (argc == 5)
    {
        const char* arg0;
        cocos2d::CallFunc* arg1;
        const char* arg2;
        bool arg3;
        int arg4;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showVariableTitle"); arg0 = arg0_tmp.c_str();
        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "YesNoDialog:showVariableTitle");
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "YesNoDialog:showVariableTitle"); arg2 = arg2_tmp.c_str();
        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "YesNoDialog:showVariableTitle");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "YesNoDialog:showVariableTitle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showVariableTitle'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showVariableTitle(arg0, arg1, arg2, arg3, arg4);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showVariableTitle",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showVariableTitle'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_showTimeWithDes(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"YesNoDialog",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        const char* arg0;
        const char* arg1;
        int arg2;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "YesNoDialog:showTimeWithDes"); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "YesNoDialog:showTimeWithDes"); arg1 = arg1_tmp.c_str();
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "YesNoDialog:showTimeWithDes");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_showTimeWithDes'", nullptr);
            return 0;
        }
        YesNoDialog* ret = YesNoDialog::showTimeWithDes(arg0, arg1, arg2);
        object_to_luaval<YesNoDialog>(tolua_S, "YesNoDialog",(YesNoDialog*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "YesNoDialog:showTimeWithDes",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_showTimeWithDes'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_YesNoDialog_constructor(lua_State* tolua_S)
{
    int argc = 0;
    YesNoDialog* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_YesNoDialog_constructor'", nullptr);
            return 0;
        }
        cobj = new YesNoDialog();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"YesNoDialog");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "YesNoDialog:YesNoDialog",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_YesNoDialog_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_YesNoDialog_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (YesNoDialog)");
    return 0;
}

int lua_register_cocos2dx_if_YesNoDialog(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"YesNoDialog");
    tolua_cclass(tolua_S,"YesNoDialog","YesNoDialog","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"YesNoDialog");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_YesNoDialog_constructor);
        tolua_function(tolua_S,"getCloseCallback",lua_cocos2dx_if_YesNoDialog_getCloseCallback);
        tolua_function(tolua_S,"getYesCallback",lua_cocos2dx_if_YesNoDialog_getYesCallback);
        tolua_function(tolua_S,"setSelCallback",lua_cocos2dx_if_YesNoDialog_setSelCallback);
        tolua_function(tolua_S,"getNoCallback",lua_cocos2dx_if_YesNoDialog_getNoCallback);
        tolua_function(tolua_S,"setDisableWhenTouched",lua_cocos2dx_if_YesNoDialog_setDisableWhenTouched);
        tolua_function(tolua_S,"setCloseCallback",lua_cocos2dx_if_YesNoDialog_setCloseCallback);
        tolua_function(tolua_S,"getDisableWhenTouched",lua_cocos2dx_if_YesNoDialog_getDisableWhenTouched);
        tolua_function(tolua_S,"setNoButtonTitle",lua_cocos2dx_if_YesNoDialog_setNoButtonTitle);
        tolua_function(tolua_S,"keypressedBtnCancel",lua_cocos2dx_if_YesNoDialog_keypressedBtnCancel);
        tolua_function(tolua_S,"goToBetaUpdate",lua_cocos2dx_if_YesNoDialog_goToBetaUpdate);
        tolua_function(tolua_S,"setYesText",lua_cocos2dx_if_YesNoDialog_setYesText);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_YesNoDialog_init);
        tolua_function(tolua_S,"getSelCallback",lua_cocos2dx_if_YesNoDialog_getSelCallback);
        tolua_function(tolua_S,"getCloseOnNoButton",lua_cocos2dx_if_YesNoDialog_getCloseOnNoButton);
        tolua_function(tolua_S,"gotoPayCallback",lua_cocos2dx_if_YesNoDialog_gotoPayCallback);
        tolua_function(tolua_S,"setYesButtonTitle",lua_cocos2dx_if_YesNoDialog_setYesButtonTitle);
        tolua_function(tolua_S,"onClickNoticeBtn",lua_cocos2dx_if_YesNoDialog_onClickNoticeBtn);
        tolua_function(tolua_S,"setUpAutoClose",lua_cocos2dx_if_YesNoDialog_setUpAutoClose);
        tolua_function(tolua_S,"setYesCallback",lua_cocos2dx_if_YesNoDialog_setYesCallback);
        tolua_function(tolua_S,"hideNoButton",lua_cocos2dx_if_YesNoDialog_hideNoButton);
        tolua_function(tolua_S,"keyPressedBtnClose",lua_cocos2dx_if_YesNoDialog_keyPressedBtnClose);
        tolua_function(tolua_S,"setCloseOnNoButton",lua_cocos2dx_if_YesNoDialog_setCloseOnNoButton);
        tolua_function(tolua_S,"showCdToolBtn",lua_cocos2dx_if_YesNoDialog_showCdToolBtn);
        tolua_function(tolua_S,"doAutoClose",lua_cocos2dx_if_YesNoDialog_doAutoClose);
        tolua_function(tolua_S,"showMuteTimeNode",lua_cocos2dx_if_YesNoDialog_showMuteTimeNode);
        tolua_function(tolua_S,"showCancelButton",lua_cocos2dx_if_YesNoDialog_showCancelButton);
        tolua_function(tolua_S,"setNoCallback",lua_cocos2dx_if_YesNoDialog_setNoCallback);
        tolua_function(tolua_S,"showQuitDialog", lua_cocos2dx_if_YesNoDialog_showQuitDialog);
        tolua_function(tolua_S,"gotoPayTips", lua_cocos2dx_if_YesNoDialog_gotoPayTips);
        tolua_function(tolua_S,"showResCost", lua_cocos2dx_if_YesNoDialog_showResCost);
        tolua_function(tolua_S,"showButtonAndGold", lua_cocos2dx_if_YesNoDialog_showButtonAndGold);
        tolua_function(tolua_S,"show", lua_cocos2dx_if_YesNoDialog_show);
        tolua_function(tolua_S,"showTime", lua_cocos2dx_if_YesNoDialog_showTime);
        tolua_function(tolua_S,"lotteryShow", lua_cocos2dx_if_YesNoDialog_lotteryShow);
        tolua_function(tolua_S,"showAllianceConfirm", lua_cocos2dx_if_YesNoDialog_showAllianceConfirm);
        tolua_function(tolua_S,"marchAlertShow", lua_cocos2dx_if_YesNoDialog_marchAlertShow);
        tolua_function(tolua_S,"showYesDialog", lua_cocos2dx_if_YesNoDialog_showYesDialog);
        tolua_function(tolua_S,"showConfirmCloseAllView", lua_cocos2dx_if_YesNoDialog_showConfirmCloseAllView);
        tolua_function(tolua_S,"showQueueConfirm", lua_cocos2dx_if_YesNoDialog_showQueueConfirm);
        tolua_function(tolua_S,"showButtonAndPriceType", lua_cocos2dx_if_YesNoDialog_showButtonAndPriceType);
        tolua_function(tolua_S,"showVariableTitle", lua_cocos2dx_if_YesNoDialog_showVariableTitle);
        tolua_function(tolua_S,"showTimeWithDes", lua_cocos2dx_if_YesNoDialog_showTimeWithDes);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(YesNoDialog).name();
    g_luaType[typeName] = "YesNoDialog";
    g_typeCast["YesNoDialog"] = "YesNoDialog";
    return 1;
}

int lua_cocos2dx_if_ConfirmCoinView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"ConfirmCoinView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ConfirmCoinView_create'", nullptr);
            return 0;
        }
        ConfirmCoinView* ret = ConfirmCoinView::create();
        object_to_luaval<ConfirmCoinView>(tolua_S, "ConfirmCoinView",(ConfirmCoinView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "ConfirmCoinView:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ConfirmCoinView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_ConfirmCoinView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ConfirmCoinView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ConfirmCoinView_constructor'", nullptr);
            return 0;
        }
        cobj = new ConfirmCoinView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ConfirmCoinView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ConfirmCoinView:ConfirmCoinView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ConfirmCoinView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_ConfirmCoinView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ConfirmCoinView)");
    return 0;
}

int lua_register_cocos2dx_if_ConfirmCoinView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ConfirmCoinView");
    tolua_cclass(tolua_S,"ConfirmCoinView","ConfirmCoinView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"ConfirmCoinView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_ConfirmCoinView_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_ConfirmCoinView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ConfirmCoinView).name();
    g_luaType[typeName] = "ConfirmCoinView";
    g_typeCast["ConfirmCoinView"] = "ConfirmCoinView";
    return 1;
}

int lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            cocos2d::Sprite* arg0;
            ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            PlayerInfo* arg1;
            ok &= luaval_to_object<PlayerInfo>(tolua_S, 3, "PlayerInfo",&arg1, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            cobj->initHeadImgUrl(arg0, arg1);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            cocos2d::Sprite* arg0;
            ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            PlayerInfo* arg1;
            ok &= luaval_to_object<PlayerInfo>(tolua_S, 3, "PlayerInfo",&arg1, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            cobj->initHeadImgUrl(arg0, arg1, arg2);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            cocos2d::Sprite* arg0;
            ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            std::string arg1;
            ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            cobj->initHeadImgUrl(arg0, arg1);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            cocos2d::Sprite* arg0;
            ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            std::string arg1;
            ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            double arg2;
            ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl");

            if (!ok) { break; }
            cobj->initHeadImgUrl(arg0, arg1, arg2);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "HFHeadImgNode:initHeadImgUrl",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_init(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_initHeadImgBg(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgBg'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImgBg");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgBg'", nullptr);
            return 0;
        }
        cobj->initHeadImgBg(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:initHeadImgBg",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgBg'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        std::string arg1;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;
        cocos2d::Vec2 arg5;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_vec2(tolua_S, 7, &arg5, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 7) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;
        cocos2d::Vec2 arg5;
        cocos2d::Size arg6;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_vec2(tolua_S, 7, &arg5, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_size(tolua_S, 8, &arg6, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 8) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;
        cocos2d::Vec2 arg5;
        cocos2d::Size arg6;
        std::string arg7;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_vec2(tolua_S, 7, &arg5, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_size(tolua_S, 8, &arg6, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 9,&arg7, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 9) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;
        cocos2d::Vec2 arg5;
        cocos2d::Size arg6;
        std::string arg7;
        std::string arg8;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_vec2(tolua_S, 7, &arg5, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_size(tolua_S, 8, &arg6, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 9,&arg7, "HFHeadImgNode:initHeadImgUrl3");

        ok &= luaval_to_std_string(tolua_S, 10,&arg8, "HFHeadImgNode:initHeadImgUrl3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:initHeadImgUrl3",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        std::string arg1;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl2(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl2(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl2(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl2(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;
        double arg3;
        bool arg4;
        cocos2d::Vec2 arg5;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "HFHeadImgNode:initHeadImgUrl2");

        ok &= luaval_to_vec2(tolua_S, 7, &arg5, "HFHeadImgNode:initHeadImgUrl2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'", nullptr);
            return 0;
        }
        cobj->initHeadImgUrl2(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:initHeadImgUrl2",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_initHeadImg(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImg");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg'", nullptr);
            return 0;
        }
        cobj->initHeadImg(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        cocos2d::Sprite* arg0;
        double arg1;

        ok &= luaval_to_object<cocos2d::Sprite>(tolua_S, 2, "cc.Sprite",&arg0, "HFHeadImgNode:initHeadImg");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "HFHeadImgNode:initHeadImg");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg'", nullptr);
            return 0;
        }
        cobj->initHeadImg(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:initHeadImg",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_initHeadImg9Bg(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (HFHeadImgNode*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg9Bg'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::ui::Scale9Sprite* arg0;

        ok &= luaval_to_object<cocos2d::ui::Scale9Sprite>(tolua_S, 2, "ccui.Scale9Sprite",&arg0, "HFHeadImgNode:initHeadImg9Bg");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg9Bg'", nullptr);
            return 0;
        }
        cobj->initHeadImg9Bg(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:initHeadImg9Bg",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_initHeadImg9Bg'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"HFHeadImgNode",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_create'", nullptr);
            return 0;
        }
        HFHeadImgNode* ret = HFHeadImgNode::create();
        object_to_luaval<HFHeadImgNode>(tolua_S, "HFHeadImgNode",(HFHeadImgNode*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "HFHeadImgNode:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_HFHeadImgNode_constructor(lua_State* tolua_S)
{
    int argc = 0;
    HFHeadImgNode* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_HFHeadImgNode_constructor'", nullptr);
            return 0;
        }
        cobj = new HFHeadImgNode();
        tolua_pushusertype(tolua_S,(void*)cobj,"HFHeadImgNode");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "HFHeadImgNode:HFHeadImgNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_HFHeadImgNode_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_HFHeadImgNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (HFHeadImgNode)");
    return 0;
}

int lua_register_cocos2dx_if_HFHeadImgNode(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"HFHeadImgNode");
    tolua_cclass(tolua_S,"HFHeadImgNode","HFHeadImgNode","cc.CCNode",nullptr);

    tolua_beginmodule(tolua_S,"HFHeadImgNode");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_HFHeadImgNode_constructor);
        tolua_function(tolua_S,"initHeadImgUrl",lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_HFHeadImgNode_init);
        tolua_function(tolua_S,"initHeadImgBg",lua_cocos2dx_if_HFHeadImgNode_initHeadImgBg);
        tolua_function(tolua_S,"initHeadImgUrl3",lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl3);
        tolua_function(tolua_S,"initHeadImgUrl2",lua_cocos2dx_if_HFHeadImgNode_initHeadImgUrl2);
        tolua_function(tolua_S,"initHeadImg",lua_cocos2dx_if_HFHeadImgNode_initHeadImg);
        tolua_function(tolua_S,"initHeadImg9Bg",lua_cocos2dx_if_HFHeadImgNode_initHeadImg9Bg);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_HFHeadImgNode_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(HFHeadImgNode).name();
    g_luaType[typeName] = "HFHeadImgNode";
    g_typeCast["HFHeadImgNode"] = "HFHeadImgNode";
    return 1;
}

int lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitCommonBtns(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfoBtnPopUpView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfoBtnPopUpView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfoBtnPopUpView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitCommonBtns'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        std::string arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PlayerInfoBtnPopUpView:InitCommonBtns");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "PlayerInfoBtnPopUpView:InitCommonBtns");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitCommonBtns'", nullptr);
            return 0;
        }
        cobj->InitCommonBtns(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        std::string arg0;
        std::string arg1;
        bool arg2;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PlayerInfoBtnPopUpView:InitCommonBtns");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "PlayerInfoBtnPopUpView:InitCommonBtns");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "PlayerInfoBtnPopUpView:InitCommonBtns");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitCommonBtns'", nullptr);
            return 0;
        }
        cobj->InitCommonBtns(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfoBtnPopUpView:InitCommonBtns",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitCommonBtns'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfoBtnPopUpView_fixTotalNodePos(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfoBtnPopUpView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfoBtnPopUpView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfoBtnPopUpView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_fixTotalNodePos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_fixTotalNodePos'", nullptr);
            return 0;
        }
        cobj->fixTotalNodePos();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfoBtnPopUpView:fixTotalNodePos",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_fixTotalNodePos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfoBtnPopUpView_initHelpBtns(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfoBtnPopUpView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfoBtnPopUpView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfoBtnPopUpView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_initHelpBtns'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        IFAllianceHelpReportInfo* arg0;

        ok &= luaval_to_object<IFAllianceHelpReportInfo>(tolua_S, 2, "IFAllianceHelpReportInfo",&arg0, "PlayerInfoBtnPopUpView:initHelpBtns");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_initHelpBtns'", nullptr);
            return 0;
        }
        cobj->initHelpBtns(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfoBtnPopUpView:initHelpBtns",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_initHelpBtns'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitBtns(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfoBtnPopUpView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfoBtnPopUpView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfoBtnPopUpView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitBtns'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        AllianceDonateInfo* arg0;

        ok &= luaval_to_object<AllianceDonateInfo>(tolua_S, 2, "AllianceDonateInfo",&arg0, "PlayerInfoBtnPopUpView:InitBtns");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitBtns'", nullptr);
            return 0;
        }
        cobj->InitBtns(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfoBtnPopUpView:InitBtns",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitBtns'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfoBtnPopUpView_addMailBtn(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfoBtnPopUpView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PlayerInfoBtnPopUpView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PlayerInfoBtnPopUpView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_addMailBtn'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_addMailBtn'", nullptr);
            return 0;
        }
        cobj->addMailBtn();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfoBtnPopUpView:addMailBtn",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_addMailBtn'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PlayerInfoBtnPopUpView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"PlayerInfoBtnPopUpView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_create'", nullptr);
            return 0;
        }
        PlayerInfoBtnPopUpView* ret = PlayerInfoBtnPopUpView::create();
        object_to_luaval<PlayerInfoBtnPopUpView>(tolua_S, "PlayerInfoBtnPopUpView",(PlayerInfoBtnPopUpView*)ret);
        return 1;
    }
    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PlayerInfoBtnPopUpView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_create'", nullptr);
            return 0;
        }
        PlayerInfoBtnPopUpView* ret = PlayerInfoBtnPopUpView::create(arg0);
        object_to_luaval<PlayerInfoBtnPopUpView>(tolua_S, "PlayerInfoBtnPopUpView",(PlayerInfoBtnPopUpView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "PlayerInfoBtnPopUpView:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_PlayerInfoBtnPopUpView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    PlayerInfoBtnPopUpView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_constructor'", nullptr);
            return 0;
        }
        cobj = new PlayerInfoBtnPopUpView();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"PlayerInfoBtnPopUpView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PlayerInfoBtnPopUpView:PlayerInfoBtnPopUpView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PlayerInfoBtnPopUpView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_PlayerInfoBtnPopUpView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (PlayerInfoBtnPopUpView)");
    return 0;
}

int lua_register_cocos2dx_if_PlayerInfoBtnPopUpView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PlayerInfoBtnPopUpView");
    tolua_cclass(tolua_S,"PlayerInfoBtnPopUpView","PlayerInfoBtnPopUpView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"PlayerInfoBtnPopUpView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_PlayerInfoBtnPopUpView_constructor);
        tolua_function(tolua_S,"InitCommonBtns",lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitCommonBtns);
        tolua_function(tolua_S,"fixTotalNodePos",lua_cocos2dx_if_PlayerInfoBtnPopUpView_fixTotalNodePos);
        tolua_function(tolua_S,"initHelpBtns",lua_cocos2dx_if_PlayerInfoBtnPopUpView_initHelpBtns);
        tolua_function(tolua_S,"InitBtns",lua_cocos2dx_if_PlayerInfoBtnPopUpView_InitBtns);
        tolua_function(tolua_S,"addMailBtn",lua_cocos2dx_if_PlayerInfoBtnPopUpView_addMailBtn);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_PlayerInfoBtnPopUpView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PlayerInfoBtnPopUpView).name();
    g_luaType[typeName] = "PlayerInfoBtnPopUpView";
    g_typeCast["PlayerInfoBtnPopUpView"] = "PlayerInfoBtnPopUpView";
    return 1;
}

int lua_cocos2dx_if_TipsWithPicView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"TipsWithPicView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsWithPicView:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsWithPicView_create'", nullptr);
            return 0;
        }
        TipsWithPicView* ret = TipsWithPicView::create(arg0);
        object_to_luaval<TipsWithPicView>(tolua_S, "TipsWithPicView",(TipsWithPicView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "TipsWithPicView:create",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsWithPicView_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_TipsWithPicView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    TipsWithPicView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "TipsWithPicView:TipsWithPicView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_TipsWithPicView_constructor'", nullptr);
            return 0;
        }
        cobj = new TipsWithPicView(arg0);
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TipsWithPicView");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "TipsWithPicView:TipsWithPicView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_TipsWithPicView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_TipsWithPicView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TipsWithPicView)");
    return 0;
}

int lua_register_cocos2dx_if_TipsWithPicView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TipsWithPicView");
    tolua_cclass(tolua_S,"TipsWithPicView","TipsWithPicView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"TipsWithPicView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_TipsWithPicView_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_TipsWithPicView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TipsWithPicView).name();
    g_luaType[typeName] = "TipsWithPicView";
    g_typeCast["TipsWithPicView"] = "TipsWithPicView";
    return 1;
}

static int lua_cocos2dx_if_Act2RefrshInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Act2RefrshInfo)");
    return 0;
}

static int lua_cocos2dx_if_Act2RefrshInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	Act2RefrshInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"Act2RefrshInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act2RefrshInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (Act2RefrshInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if(strcmp(property.c_str(), "m_excIds") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->m_excIds.begin();
		int idx = 1;
		while(iter!=cobj->m_excIds.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushstring(tolua_S, (*iter).c_str());
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "m_refresh") == 0){
		lua_pushinteger(tolua_S, cobj->m_refresh);
	}else if (strcmp(property.c_str(), "m_freeNum") == 0){
		lua_pushinteger(tolua_S, cobj->m_freeNum);
	}else if (strcmp(property.c_str(), "m_refreshCost") == 0){
		lua_pushinteger(tolua_S, cobj->m_refreshCost);
	}else if (strcmp(property.c_str(), "m_refreshTime") == 0){
		lua_pushinteger(tolua_S, cobj->m_refreshTime);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_Act2RefrshInfo_newindex(lua_State* tolua_S)
{
	Act2RefrshInfo* cobj = *(Act2RefrshInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "m_refresh") == 0){
		cobj->m_refresh= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_freeNum") == 0){
		cobj->m_freeNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_refreshCost") == 0){
		cobj->m_refreshCost= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_refreshTime") == 0){
		cobj->m_refreshTime= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_Act2RefrshInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"Act2RefrshInfo");
    tolua_cclass(tolua_S,"Act2RefrshInfo","Act2RefrshInfo","",nullptr);

    tolua_beginmodule(tolua_S,"Act2RefrshInfo");
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_Act2RefrshInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_Act2RefrshInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(Act2RefrshInfo).name();
    g_luaType[typeName] = "Act2RefrshInfo";
    g_typeCast["Act2RefrshInfo"] = "Act2RefrshInfo";
    return 1;
}

int lua_cocos2dx_if_RewardClass_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"RewardClass",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::Ref* arg0;
        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "RewardClass:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_RewardClass_create'", nullptr);
            return 0;
        }
        RewardClass* ret = RewardClass::create(arg0);
        object_to_luaval<RewardClass>(tolua_S, "RewardClass",(RewardClass*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "RewardClass:create",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_RewardClass_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_RewardClass_constructor(lua_State* tolua_S)
{
    int argc = 0;
    RewardClass* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_RewardClass_constructor'", nullptr);
            return 0;
        }
        cobj = new RewardClass();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"RewardClass");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "RewardClass:RewardClass",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_RewardClass_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_RewardClass_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (RewardClass)");
    return 0;
}

static int lua_cocos2dx_if_RewardClass_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	RewardClass* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"RewardClass",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_RewardClass_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (RewardClass*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "type") == 0){
		lua_pushinteger(tolua_S, cobj->type);
	}else if (strcmp(property.c_str(), "itemId") == 0){
		lua_pushstring(tolua_S, cobj->itemId.c_str());
	}else if (strcmp(property.c_str(), "num") == 0){
		lua_pushinteger(tolua_S, cobj->num);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_RewardClass_newindex(lua_State* tolua_S)
{
	RewardClass* cobj = *(RewardClass**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "type") == 0){
		cobj->type= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "itemId") == 0){
		cobj->itemId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "num") == 0){
		cobj->num= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_RewardClass(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"RewardClass");
    tolua_cclass(tolua_S,"RewardClass","RewardClass","cc.Ref",nullptr);

    tolua_beginmodule(tolua_S,"RewardClass");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_RewardClass_constructor);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_RewardClass_create);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_RewardClass_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_RewardClass_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(RewardClass).name();
    g_luaType[typeName] = "RewardClass";
    g_typeCast["RewardClass"] = "RewardClass";
    return 1;
}

int lua_cocos2dx_if_Act1ExcItem_getRewardCnt(lua_State* tolua_S)
{
    int argc = 0;
    Act1ExcItem* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"Act1ExcItem",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (Act1ExcItem*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1ExcItem_getRewardCnt'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1ExcItem_getRewardCnt'", nullptr);
            return 0;
        }
        int ret = cobj->getRewardCnt();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1ExcItem:getRewardCnt",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1ExcItem_getRewardCnt'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_Act1ExcItem_getRewardByIdx(lua_State* tolua_S)
{
    int argc = 0;
    Act1ExcItem* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"Act1ExcItem",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (Act1ExcItem*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1ExcItem_getRewardByIdx'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "Act1ExcItem:getRewardByIdx");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1ExcItem_getRewardByIdx'", nullptr);
            return 0;
        }
        RewardClass* ret = cobj->getRewardByIdx(arg0);
        object_to_luaval<RewardClass>(tolua_S, "RewardClass",(RewardClass*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1ExcItem:getRewardByIdx",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1ExcItem_getRewardByIdx'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_Act1ExcItem_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"Act1ExcItem",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::Ref* arg0;
        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "Act1ExcItem:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1ExcItem_create'", nullptr);
            return 0;
        }
        Act1ExcItem* ret = Act1ExcItem::create(arg0);
        object_to_luaval<Act1ExcItem>(tolua_S, "Act1ExcItem",(Act1ExcItem*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "Act1ExcItem:create",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1ExcItem_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_Act1ExcItem_constructor(lua_State* tolua_S)
{
    int argc = 0;
    Act1ExcItem* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1ExcItem_constructor'", nullptr);
            return 0;
        }
        cobj = new Act1ExcItem();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Act1ExcItem");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1ExcItem:Act1ExcItem",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1ExcItem_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_Act1ExcItem_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Act1ExcItem)");
    return 0;
}

static int lua_cocos2dx_if_Act1ExcItem_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	Act1ExcItem* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"Act1ExcItem",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1ExcItem_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (Act1ExcItem*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "needNum") == 0){
		lua_pushinteger(tolua_S, cobj->needNum);
	}else if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "color") == 0){
		lua_pushinteger(tolua_S, cobj->color);
	}else if (strcmp(property.c_str(), "isRecieved") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isRecieved);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_Act1ExcItem_newindex(lua_State* tolua_S)
{
	Act1ExcItem* cobj = *(Act1ExcItem**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "needNum") == 0){
		cobj->needNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "color") == 0){
		cobj->color= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isRecieved") == 0){
		cobj->isRecieved= (bool)lua_toboolean(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_Act1ExcItem(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"Act1ExcItem");
    tolua_cclass(tolua_S,"Act1ExcItem","Act1ExcItem","cc.Ref",nullptr);

    tolua_beginmodule(tolua_S,"Act1ExcItem");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_Act1ExcItem_constructor);
        tolua_function(tolua_S,"getRewardCnt",lua_cocos2dx_if_Act1ExcItem_getRewardCnt);
        tolua_function(tolua_S,"getRewardByIdx",lua_cocos2dx_if_Act1ExcItem_getRewardByIdx);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_Act1ExcItem_create);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_Act1ExcItem_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_Act1ExcItem_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(Act1ExcItem).name();
    g_luaType[typeName] = "Act1ExcItem";
    g_typeCast["Act1ExcItem"] = "Act1ExcItem";
    return 1;
}

int lua_cocos2dx_if_Act1Data_getDataSize(lua_State* tolua_S)
{
    int argc = 0;
    Act1Data* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"Act1Data",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (Act1Data*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1Data_getDataSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1Data_getDataSize'", nullptr);
            return 0;
        }
        int ret = cobj->getDataSize();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1Data:getDataSize",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1Data_getDataSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_Act1Data_getAct1ExcKeyByIdx(lua_State* tolua_S)
{
    int argc = 0;
    Act1Data* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"Act1Data",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (Act1Data*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1Data_getAct1ExcKeyByIdx'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "Act1Data:getAct1ExcKeyByIdx");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1Data_getAct1ExcKeyByIdx'", nullptr);
            return 0;
        }
        int ret = cobj->getAct1ExcKeyByIdx(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1Data:getAct1ExcKeyByIdx",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1Data_getAct1ExcKeyByIdx'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_Act1Data_getAct1ExcItemByKey(lua_State* tolua_S)
{
    int argc = 0;
    Act1Data* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"Act1Data",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (Act1Data*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1Data_getAct1ExcItemByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "Act1Data:getAct1ExcItemByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1Data_getAct1ExcItemByKey'", nullptr);
            return 0;
        }
        Act1ExcItem* ret = cobj->getAct1ExcItemByKey(arg0);
        object_to_luaval<Act1ExcItem>(tolua_S, "Act1ExcItem",(Act1ExcItem*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1Data:getAct1ExcItemByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1Data_getAct1ExcItemByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_Act1Data_getPosition(lua_State* tolua_S)
{
    int argc = 0;
    Act1Data* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"Act1Data",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (Act1Data*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1Data_getPosition'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1Data_getPosition'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getPosition();
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1Data:getPosition",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1Data_getPosition'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_Act1Data_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"Act1Data",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "Act1Data:create");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1Data_create'", nullptr);
            return 0;
        }
        Act1Data* ret = Act1Data::create(arg0);
        object_to_luaval<Act1Data>(tolua_S, "Act1Data",(Act1Data*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "Act1Data:create",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1Data_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_Act1Data_constructor(lua_State* tolua_S)
{
    int argc = 0;
    Act1Data* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_Act1Data_constructor'", nullptr);
            return 0;
        }
        cobj = new Act1Data();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Act1Data");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "Act1Data:Act1Data",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_Act1Data_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_Act1Data_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Act1Data)");
    return 0;
}

static int lua_cocos2dx_if_Act1Data_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	Act1Data* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"Act1Data",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_Act1Data_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (Act1Data*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "itemId") == 0){
		lua_pushstring(tolua_S, cobj->itemId.c_str());
	}else if (strcmp(property.c_str(), "actId") == 0){
		lua_pushstring(tolua_S, cobj->actId.c_str());
	}else if (strcmp(property.c_str(), "level") == 0){
		lua_pushinteger(tolua_S, cobj->level);
	}else if (strcmp(property.c_str(), "refreshTime") == 0){
		lua_pushinteger(tolua_S, cobj->refreshTime);
	}else if (strcmp(property.c_str(), "flushTimes") == 0){
		lua_pushinteger(tolua_S, cobj->flushTimes);
	}else if(strcmp(property.c_str(), "recievedLevels") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->recievedLevels.begin();
		int idx = 1;
		while(iter!=cobj->recievedLevels.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushinteger(tolua_S, (*iter).first);
			tolua_pushboolean(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if(strcmp(property.c_str(), "freshCost") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->freshCost.begin();
		int idx = 1;
		while(iter!=cobj->freshCost.end()){
			lua_pushinteger(tolua_S, idx);
			lua_pushinteger(tolua_S, (*iter));
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "freeFreshNum") == 0){
		lua_pushinteger(tolua_S, cobj->freeFreshNum);
	}else if (strcmp(property.c_str(), "lastFreshTime") == 0){
		lua_pushinteger(tolua_S, cobj->lastFreshTime);
	}else if (strcmp(property.c_str(), "isDataInit") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isDataInit);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_Act1Data_newindex(lua_State* tolua_S)
{
	Act1Data* cobj = *(Act1Data**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "itemId") == 0){
		cobj->itemId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "actId") == 0){
		cobj->actId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "level") == 0){
		cobj->level= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "refreshTime") == 0){
		cobj->refreshTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "flushTimes") == 0){
		cobj->flushTimes= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "freeFreshNum") == 0){
		cobj->freeFreshNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastFreshTime") == 0){
		cobj->lastFreshTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isDataInit") == 0){
		cobj->isDataInit= (bool)lua_toboolean(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_Act1Data(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"Act1Data");
    tolua_cclass(tolua_S,"Act1Data","Act1Data","cc.Ref",nullptr);

    tolua_beginmodule(tolua_S,"Act1Data");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_Act1Data_constructor);
        tolua_function(tolua_S,"getDataSize",lua_cocos2dx_if_Act1Data_getDataSize);
        tolua_function(tolua_S,"getAct1ExcKeyByIdx",lua_cocos2dx_if_Act1Data_getAct1ExcKeyByIdx);
        tolua_function(tolua_S,"getAct1ExcItemByKey",lua_cocos2dx_if_Act1Data_getAct1ExcItemByKey);
        tolua_function(tolua_S,"getPosition",lua_cocos2dx_if_Act1Data_getPosition);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_Act1Data_create);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_Act1Data_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_Act1Data_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(Act1Data).name();
    g_luaType[typeName] = "Act1Data";
    g_typeCast["Act1Data"] = "Act1Data";
    return 1;
}

int lua_cocos2dx_if_ActivityController_leaveCKFServer(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_leaveCKFServer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ActivityController:leaveCKFServer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_leaveCKFServer'", nullptr);
            return 0;
        }
        cobj->leaveCKFServer(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:leaveCKFServer",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_leaveCKFServer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getActivityArr(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getActivityArr'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getActivityArr'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getActivityArr();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getActivityArr",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getActivityArr'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_dragonBattleNeedTip(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_dragonBattleNeedTip'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_dragonBattleNeedTip'", nullptr);
            return 0;
        }
        bool ret = cobj->dragonBattleNeedTip();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:dragonBattleNeedTip",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_dragonBattleNeedTip'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getActObj(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getActObj'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:getActObj");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getActObj'", nullptr);
            return 0;
        }
        ActivityEventObj* ret = cobj->getActObj(arg0);
        object_to_luaval<ActivityEventObj>(tolua_S, "ActivityEventObj",(ActivityEventObj*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getActObj",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getActObj'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_setDragonRewards(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_setDragonRewards'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "ActivityController:setDragonRewards");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_setDragonRewards'", nullptr);
            return 0;
        }
        cobj->setDragonRewards(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:setDragonRewards",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_setDragonRewards'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkAct1ReFreshTimes(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkAct1ReFreshTimes'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:checkAct1ReFreshTimes");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkAct1ReFreshTimes'", nullptr);
            return 0;
        }
        bool ret = cobj->checkAct1ReFreshTimes(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkAct1ReFreshTimes",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkAct1ReFreshTimes'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_isAct1ItemHasExchange(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_isAct1ItemHasExchange'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        int arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:isAct1ItemHasExchange");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ActivityController:isAct1ItemHasExchange");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_isAct1ItemHasExchange'", nullptr);
            return 0;
        }
        bool ret = cobj->isAct1ItemHasExchange(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:isAct1ItemHasExchange",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_isAct1ItemHasExchange'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkShowRank(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkShowRank'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkShowRank'", nullptr);
            return 0;
        }
        bool ret = cobj->checkShowRank();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkShowRank",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkShowRank'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_startAct6Refresh(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_startAct6Refresh'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:startAct6Refresh");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_startAct6Refresh'", nullptr);
            return 0;
        }
        cobj->startAct6Refresh(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:startAct6Refresh",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_startAct6Refresh'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getDataForLua(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getDataForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getDataForLua'", nullptr);
            return 0;
        }
        cocos2d::Dictionary* ret = cobj->getDataForLua();
        dictionary_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getDataForLua",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getDataForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_isHasAct(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_isHasAct'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:isHasAct");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_isHasAct'", nullptr);
            return 0;
        }
        bool ret = cobj->isHasAct(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:isHasAct",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_isHasAct'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_setCkfMemberReward(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_setCkfMemberReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "ActivityController:setCkfMemberReward");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_setCkfMemberReward'", nullptr);
            return 0;
        }
        cobj->setCkfMemberReward(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:setCkfMemberReward",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_setCkfMemberReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_retRank(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_retRank'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ActivityController:retRank");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_retRank'", nullptr);
            return 0;
        }
        cobj->retRank(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:retRank",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_retRank'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getCkfMemberReward(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getCkfMemberReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getCkfMemberReward'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getCkfMemberReward();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getCkfMemberReward",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getCkfMemberReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getAct2RefrshInfoByKey(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getAct2RefrshInfoByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:getAct2RefrshInfoByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getAct2RefrshInfoByKey'", nullptr);
            return 0;
        }
        Act2RefrshInfo* ret = cobj->getAct2RefrshInfoByKey(arg0);
        object_to_luaval<Act2RefrshInfo>(tolua_S, "Act2RefrshInfo",(Act2RefrshInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getAct2RefrshInfoByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getAct2RefrshInfoByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_changeServerByInfo(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_changeServerByInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ActivityController:changeServerByInfo");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_changeServerByInfo'", nullptr);
            return 0;
        }
        cobj->changeServerByInfo(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:changeServerByInfo",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_changeServerByInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkIsToday(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkIsToday'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        long arg0;

        ok &= luaval_to_long(tolua_S, 2, &arg0, "ActivityController:checkIsToday");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkIsToday'", nullptr);
            return 0;
        }
        bool ret = cobj->checkIsToday(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkIsToday",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkIsToday'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkCanExchange2(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkCanExchange2'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        int arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:checkCanExchange2");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ActivityController:checkCanExchange2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkCanExchange2'", nullptr);
            return 0;
        }
        bool ret = cobj->checkCanExchange2(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkCanExchange2",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkCanExchange2'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkShengDianOpen(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkShengDianOpen'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkShengDianOpen'", nullptr);
            return 0;
        }
        bool ret = cobj->checkShengDianOpen();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkShengDianOpen",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkShengDianOpen'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_showTrainingView(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_showTrainingView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_showTrainingView'", nullptr);
            return 0;
        }
        cobj->showTrainingView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:showTrainingView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_showTrainingView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkHaveWK(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkHaveWK'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkHaveWK'", nullptr);
            return 0;
        }
        bool ret = cobj->checkHaveWK();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkHaveWK",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkHaveWK'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_onEnterFrame(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_onEnterFrame'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ActivityController:onEnterFrame");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_onEnterFrame'", nullptr);
            return 0;
        }
        cobj->onEnterFrame(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:onEnterFrame",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_onEnterFrame'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getCkfKingdomReward(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getCkfKingdomReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getCkfKingdomReward'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getCkfKingdomReward();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getCkfKingdomReward",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getCkfKingdomReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getRunningPopEvent(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getRunningPopEvent'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getRunningPopEvent'", nullptr);
            return 0;
        }
        std::string ret = cobj->getRunningPopEvent();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getRunningPopEvent",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getRunningPopEvent'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_isAct1DataShouldRefresh(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_isAct1DataShouldRefresh'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:isAct1DataShouldRefresh");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_isAct1DataShouldRefresh'", nullptr);
            return 0;
        }
        bool ret = cobj->isAct1DataShouldRefresh(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:isAct1DataShouldRefresh",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_isAct1DataShouldRefresh'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getExc2DataSize(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getExc2DataSize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:getExc2DataSize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getExc2DataSize'", nullptr);
            return 0;
        }
        int ret = cobj->getExc2DataSize(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getExc2DataSize",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getExc2DataSize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getRandomPopActId(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getRandomPopActId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getRandomPopActId'", nullptr);
            return 0;
        }
        std::string ret = cobj->getRandomPopActId();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getRandomPopActId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getRandomPopActId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_isInExc2Data(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_isInExc2Data'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:isInExc2Data");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_isInExc2Data'", nullptr);
            return 0;
        }
        bool ret = cobj->isInExc2Data(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:isInExc2Data",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_isInExc2Data'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkServerCanJoin(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkServerCanJoin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ActivityController:checkServerCanJoin");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkServerCanJoin'", nullptr);
            return 0;
        }
        bool ret = cobj->checkServerCanJoin(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkServerCanJoin",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkServerCanJoin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_sortActivityArr(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_sortActivityArr'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_sortActivityArr'", nullptr);
            return 0;
        }
        cobj->sortActivityArr();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:sortActivityArr",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_sortActivityArr'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_openCrossServerActivity(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_openCrossServerActivity'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_openCrossServerActivity'", nullptr);
            return 0;
        }
        cobj->openCrossServerActivity();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:openCrossServerActivity",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_openCrossServerActivity'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getActivityInfo(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getActivityInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getActivityInfo'", nullptr);
            return 0;
        }
        std::string ret = cobj->getActivityInfo();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getActivityInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getActivityInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkHaveActivityByType(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkHaveActivityByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ActivityController:checkHaveActivityByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkHaveActivityByType'", nullptr);
            return 0;
        }
        bool ret = cobj->checkHaveActivityByType(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkHaveActivityByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkHaveActivityByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_setDataForLua(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_setDataForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        std::string arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ActivityController:setDataForLua");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "ActivityController:setDataForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_setDataForLua'", nullptr);
            return 0;
        }
        cobj->setDataForLua(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:setDataForLua",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_setDataForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkServerCanBattle(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkServerCanBattle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ActivityController:checkServerCanBattle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkServerCanBattle'", nullptr);
            return 0;
        }
        bool ret = cobj->checkServerCanBattle(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkServerCanBattle",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkServerCanBattle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_isCanRefreshByhand(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_isCanRefreshByhand'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:isCanRefreshByhand");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_isCanRefreshByhand'", nullptr);
            return 0;
        }
        bool ret = cobj->isCanRefreshByhand(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:isCanRefreshByhand",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_isCanRefreshByhand'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkUseCKFMassTime(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkUseCKFMassTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkUseCKFMassTime'", nullptr);
            return 0;
        }
        bool ret = cobj->checkUseCKFMassTime();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkUseCKFMassTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkUseCKFMassTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_isAct1DataInit(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_isAct1DataInit'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:isAct1DataInit");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_isAct1DataInit'", nullptr);
            return 0;
        }
        bool ret = cobj->isAct1DataInit(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:isAct1DataInit",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_isAct1DataInit'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_createGoodsIcon(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_createGoodsIcon'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "ActivityController:createGoodsIcon");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "ActivityController:createGoodsIcon");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ActivityController:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_createGoodsIcon'", nullptr);
            return 0;
        }
        cobj->createGoodsIcon(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:createGoodsIcon",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_createGoodsIcon'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_createGoodsIconWithGray(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_createGoodsIconWithGray'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "ActivityController:createGoodsIconWithGray");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "ActivityController:createGoodsIconWithGray");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ActivityController:createGoodsIconWithGray");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_createGoodsIconWithGray'", nullptr);
            return 0;
        }
        cobj->createGoodsIconWithGray(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:createGoodsIconWithGray",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_createGoodsIconWithGray'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_createEquipIcon(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_createEquipIcon'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        cocos2d::Node* arg0;
        std::string arg1;
        double arg2;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "ActivityController:createEquipIcon");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "ActivityController:createEquipIcon");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ActivityController:createEquipIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_createEquipIcon'", nullptr);
            return 0;
        }
        cobj->createEquipIcon(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:createEquipIcon",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_createEquipIcon'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getRank(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getRank'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:getRank");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getRank'", nullptr);
            return 0;
        }
        cobj->getRank(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getRank",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getRank'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_facebookPostMethod(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_facebookPostMethod'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:facebookPostMethod");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_facebookPostMethod'", nullptr);
            return 0;
        }
        cobj->facebookPostMethod(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        std::string arg0;
        cocos2d::__Array* arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:facebookPostMethod");

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 3, "CCArray",&arg1, "ActivityController:facebookPostMethod");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_facebookPostMethod'", nullptr);
            return 0;
        }
        cobj->facebookPostMethod(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:facebookPostMethod",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_facebookPostMethod'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getExc1DataByKey(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getExc1DataByKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:getExc1DataByKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getExc1DataByKey'", nullptr);
            return 0;
        }
        Act1Data* ret = cobj->getExc1DataByKey(arg0);
        object_to_luaval<Act1Data>(tolua_S, "Act1Data",(Act1Data*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getExc1DataByKey",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getExc1DataByKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_CleanAllianceScoreData(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_CleanAllianceScoreData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_CleanAllianceScoreData'", nullptr);
            return 0;
        }
        cobj->CleanAllianceScoreData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:CleanAllianceScoreData",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_CleanAllianceScoreData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_setCkfKingdomReward(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_setCkfKingdomReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "ActivityController:setCkfKingdomReward");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_setCkfKingdomReward'", nullptr);
            return 0;
        }
        cobj->setCkfKingdomReward(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:setCkfKingdomReward",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_setCkfKingdomReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_checkLianShengOpen(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_checkLianShengOpen'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_checkLianShengOpen'", nullptr);
            return 0;
        }
        bool ret = cobj->checkLianShengOpen();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:checkLianShengOpen",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_checkLianShengOpen'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getDragonRewards(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_getDragonRewards'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getDragonRewards'", nullptr);
            return 0;
        }
        cocos2d::__Array* ret = cobj->getDragonRewards();
        object_to_luaval<cocos2d::__Array>(tolua_S, "CCArray",(cocos2d::__Array*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:getDragonRewards",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getDragonRewards'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_startGetAct6Data(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_startGetAct6Data'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_startGetAct6Data'", nullptr);
            return 0;
        }
        cobj->startGetAct6Data();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:startGetAct6Data",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_startGetAct6Data'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_startAct6Exchange(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_startAct6Exchange'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        int arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:startAct6Exchange");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ActivityController:startAct6Exchange");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_startAct6Exchange'", nullptr);
            return 0;
        }
        bool ret = cobj->startAct6Exchange(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:startAct6Exchange",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_startAct6Exchange'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_createRandomGoodsId(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ActivityController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ActivityController_createRandomGoodsId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        int arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ActivityController:createRandomGoodsId");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ActivityController:createRandomGoodsId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_createRandomGoodsId'", nullptr);
            return 0;
        }
        std::string ret = cobj->createRandomGoodsId(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:createRandomGoodsId",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_createRandomGoodsId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ActivityController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"ActivityController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_getInstance'", nullptr);
            return 0;
        }
        ActivityController* ret = ActivityController::getInstance();
        object_to_luaval<ActivityController>(tolua_S, "ActivityController",(ActivityController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "ActivityController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_getInstance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_ActivityController_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ActivityController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ActivityController_constructor'", nullptr);
            return 0;
        }
        cobj = new ActivityController();
        tolua_pushusertype(tolua_S,(void*)cobj,"ActivityController");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ActivityController:ActivityController",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ActivityController_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_ActivityController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActivityController)");
    return 0;
}

int lua_register_cocos2dx_if_ActivityController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ActivityController");
    tolua_cclass(tolua_S,"ActivityController","ActivityController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"ActivityController");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_ActivityController_constructor);
        tolua_function(tolua_S,"leaveCKFServer",lua_cocos2dx_if_ActivityController_leaveCKFServer);
        tolua_function(tolua_S,"getActivityArr",lua_cocos2dx_if_ActivityController_getActivityArr);
        tolua_function(tolua_S,"dragonBattleNeedTip",lua_cocos2dx_if_ActivityController_dragonBattleNeedTip);
        tolua_function(tolua_S,"getActObj",lua_cocos2dx_if_ActivityController_getActObj);
        tolua_function(tolua_S,"setDragonRewards",lua_cocos2dx_if_ActivityController_setDragonRewards);
        tolua_function(tolua_S,"checkAct1ReFreshTimes",lua_cocos2dx_if_ActivityController_checkAct1ReFreshTimes);
        tolua_function(tolua_S,"isAct1ItemHasExchange",lua_cocos2dx_if_ActivityController_isAct1ItemHasExchange);
        tolua_function(tolua_S,"checkShowRank",lua_cocos2dx_if_ActivityController_checkShowRank);
        tolua_function(tolua_S,"startAct6Refresh",lua_cocos2dx_if_ActivityController_startAct6Refresh);
        tolua_function(tolua_S,"getDataForLua",lua_cocos2dx_if_ActivityController_getDataForLua);
        tolua_function(tolua_S,"isHasAct",lua_cocos2dx_if_ActivityController_isHasAct);
        tolua_function(tolua_S,"setCkfMemberReward",lua_cocos2dx_if_ActivityController_setCkfMemberReward);
        tolua_function(tolua_S,"retRank",lua_cocos2dx_if_ActivityController_retRank);
        tolua_function(tolua_S,"getCkfMemberReward",lua_cocos2dx_if_ActivityController_getCkfMemberReward);
        tolua_function(tolua_S,"getAct2RefrshInfoByKey",lua_cocos2dx_if_ActivityController_getAct2RefrshInfoByKey);
        tolua_function(tolua_S,"changeServerByInfo",lua_cocos2dx_if_ActivityController_changeServerByInfo);
        tolua_function(tolua_S,"checkIsToday",lua_cocos2dx_if_ActivityController_checkIsToday);
        tolua_function(tolua_S,"checkCanExchange2",lua_cocos2dx_if_ActivityController_checkCanExchange2);
        tolua_function(tolua_S,"checkShengDianOpen",lua_cocos2dx_if_ActivityController_checkShengDianOpen);
        tolua_function(tolua_S,"showTrainingView",lua_cocos2dx_if_ActivityController_showTrainingView);
        tolua_function(tolua_S,"checkHaveWK",lua_cocos2dx_if_ActivityController_checkHaveWK);
        tolua_function(tolua_S,"onEnterFrame",lua_cocos2dx_if_ActivityController_onEnterFrame);
        tolua_function(tolua_S,"getCkfKingdomReward",lua_cocos2dx_if_ActivityController_getCkfKingdomReward);
        tolua_function(tolua_S,"getRunningPopEvent",lua_cocos2dx_if_ActivityController_getRunningPopEvent);
        tolua_function(tolua_S,"isAct1DataShouldRefresh",lua_cocos2dx_if_ActivityController_isAct1DataShouldRefresh);
        tolua_function(tolua_S,"getExc2DataSize",lua_cocos2dx_if_ActivityController_getExc2DataSize);
        tolua_function(tolua_S,"getRandomPopActId",lua_cocos2dx_if_ActivityController_getRandomPopActId);
        tolua_function(tolua_S,"isInExc2Data",lua_cocos2dx_if_ActivityController_isInExc2Data);
        tolua_function(tolua_S,"checkServerCanJoin",lua_cocos2dx_if_ActivityController_checkServerCanJoin);
        tolua_function(tolua_S,"sortActivityArr",lua_cocos2dx_if_ActivityController_sortActivityArr);
        tolua_function(tolua_S,"openCrossServerActivity",lua_cocos2dx_if_ActivityController_openCrossServerActivity);
        tolua_function(tolua_S,"getActivityInfo",lua_cocos2dx_if_ActivityController_getActivityInfo);
        tolua_function(tolua_S,"checkHaveActivityByType",lua_cocos2dx_if_ActivityController_checkHaveActivityByType);
        tolua_function(tolua_S,"setDataForLua",lua_cocos2dx_if_ActivityController_setDataForLua);
        tolua_function(tolua_S,"checkServerCanBattle",lua_cocos2dx_if_ActivityController_checkServerCanBattle);
        tolua_function(tolua_S,"isCanRefreshByhand",lua_cocos2dx_if_ActivityController_isCanRefreshByhand);
        tolua_function(tolua_S,"checkUseCKFMassTime",lua_cocos2dx_if_ActivityController_checkUseCKFMassTime);
        tolua_function(tolua_S,"isAct1DataInit",lua_cocos2dx_if_ActivityController_isAct1DataInit);
        tolua_function(tolua_S,"createGoodsIcon",lua_cocos2dx_if_ActivityController_createGoodsIcon);
        tolua_function(tolua_S,"createGoodsIconWithGray",lua_cocos2dx_if_ActivityController_createGoodsIconWithGray);
        tolua_function(tolua_S,"createEquipIcon",lua_cocos2dx_if_ActivityController_createEquipIcon);
        tolua_function(tolua_S,"getRank",lua_cocos2dx_if_ActivityController_getRank);
        tolua_function(tolua_S,"facebookPostMethod",lua_cocos2dx_if_ActivityController_facebookPostMethod);
        tolua_function(tolua_S,"getExc1DataByKey",lua_cocos2dx_if_ActivityController_getExc1DataByKey);
        tolua_function(tolua_S,"CleanAllianceScoreData",lua_cocos2dx_if_ActivityController_CleanAllianceScoreData);
        tolua_function(tolua_S,"setCkfKingdomReward",lua_cocos2dx_if_ActivityController_setCkfKingdomReward);
        tolua_function(tolua_S,"checkLianShengOpen",lua_cocos2dx_if_ActivityController_checkLianShengOpen);
        tolua_function(tolua_S,"getDragonRewards",lua_cocos2dx_if_ActivityController_getDragonRewards);
        tolua_function(tolua_S,"startGetAct6Data",lua_cocos2dx_if_ActivityController_startGetAct6Data);
        tolua_function(tolua_S,"startAct6Exchange",lua_cocos2dx_if_ActivityController_startAct6Exchange);
        tolua_function(tolua_S,"createRandomGoodsId",lua_cocos2dx_if_ActivityController_createRandomGoodsId);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_ActivityController_getInstance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ActivityController).name();
    g_luaType[typeName] = "ActivityController";
    g_typeCast["ActivityController"] = "ActivityController";
    return 1;
}

int lua_cocos2dx_if_PortActController_isCanRwd(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_isCanRwd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_isCanRwd'", nullptr);
            return 0;
        }
        bool ret = cobj->isCanRwd();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:isCanRwd",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_isCanRwd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_startGetDailyRwdData(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_startGetDailyRwdData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetDailyRwdData'", nullptr);
            return 0;
        }
        cobj->startGetDailyRwdData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:startGetDailyRwdData",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_startGetDailyRwdData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_particleComplete(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_particleComplete'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "PortActController:particleComplete");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_particleComplete'", nullptr);
            return 0;
        }
        cobj->particleComplete(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:particleComplete",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_particleComplete'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_endGetCheckInRwd(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_endGetCheckInRwd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Dictionary* arg0;
        bool arg1;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endGetCheckInRwd");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PortActController:endGetCheckInRwd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endGetCheckInRwd'", nullptr);
            return 0;
        }
        cobj->endGetCheckInRwd(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:endGetCheckInRwd",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_endGetCheckInRwd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_initNewPlayerDailyRwdData(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_initNewPlayerDailyRwdData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:initNewPlayerDailyRwdData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_initNewPlayerDailyRwdData'", nullptr);
            return 0;
        }
        cobj->initNewPlayerDailyRwdData(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:initNewPlayerDailyRwdData",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_initNewPlayerDailyRwdData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_startGetCheckInRwd(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_startGetCheckInRwd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PortActController:startGetCheckInRwd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetCheckInRwd'", nullptr);
            return 0;
        }
        cobj->startGetCheckInRwd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        bool arg0;
        int arg1;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PortActController:startGetCheckInRwd");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "PortActController:startGetCheckInRwd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetCheckInRwd'", nullptr);
            return 0;
        }
        cobj->startGetCheckInRwd(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        bool arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PortActController:startGetCheckInRwd");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "PortActController:startGetCheckInRwd");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "PortActController:startGetCheckInRwd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetCheckInRwd'", nullptr);
            return 0;
        }
        cobj->startGetCheckInRwd(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        bool arg0;
        int arg1;
        int arg2;
        int arg3;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PortActController:startGetCheckInRwd");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "PortActController:startGetCheckInRwd");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "PortActController:startGetCheckInRwd");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "PortActController:startGetCheckInRwd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetCheckInRwd'", nullptr);
            return 0;
        }
        cobj->startGetCheckInRwd(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:startGetCheckInRwd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_startGetCheckInRwd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_getMaxRwdLv(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_getMaxRwdLv'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_getMaxRwdLv'", nullptr);
            return 0;
        }
        int ret = cobj->getMaxRwdLv();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:getMaxRwdLv",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_getMaxRwdLv'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_isLastDayFirstIn(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_isLastDayFirstIn'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_isLastDayFirstIn'", nullptr);
            return 0;
        }
        bool ret = cobj->isLastDayFirstIn();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:isLastDayFirstIn",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_isLastDayFirstIn'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_endTimeRwd(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_endTimeRwd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endTimeRwd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endTimeRwd'", nullptr);
            return 0;
        }
        cobj->endTimeRwd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:endTimeRwd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_endTimeRwd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_startTimeRwd(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_startTimeRwd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startTimeRwd'", nullptr);
            return 0;
        }
        cobj->startTimeRwd();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:startTimeRwd",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_startTimeRwd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_startGetNewPlayerRD(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_startGetNewPlayerRD'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetNewPlayerRD'", nullptr);
            return 0;
        }
        cobj->startGetNewPlayerRD();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "PortActController:startGetNewPlayerRD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetNewPlayerRD'", nullptr);
            return 0;
        }
        cobj->startGetNewPlayerRD(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:startGetNewPlayerRD",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_startGetNewPlayerRD'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_startGetExchangeData(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_startGetExchangeData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetExchangeData'", nullptr);
            return 0;
        }
        cobj->startGetExchangeData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PortActController:startGetExchangeData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startGetExchangeData'", nullptr);
            return 0;
        }
        cobj->startGetExchangeData(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:startGetExchangeData",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_startGetExchangeData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_addParticle(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_addParticle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "PortActController:addParticle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_addParticle'", nullptr);
            return 0;
        }
        cobj->addParticle(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:addParticle",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_addParticle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_endGetExchangeData(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_endGetExchangeData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endGetExchangeData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endGetExchangeData'", nullptr);
            return 0;
        }
        cobj->endGetExchangeData(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        cocos2d::__Dictionary* arg0;
        int arg1;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endGetExchangeData");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "PortActController:endGetExchangeData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endGetExchangeData'", nullptr);
            return 0;
        }
        cobj->endGetExchangeData(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:endGetExchangeData",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_endGetExchangeData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_endGetNewPlayerRD(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_endGetNewPlayerRD'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endGetNewPlayerRD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endGetNewPlayerRD'", nullptr);
            return 0;
        }
        cobj->endGetNewPlayerRD(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:endGetNewPlayerRD",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_endGetNewPlayerRD'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_removeLayerColor(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_removeLayerColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "PortActController:removeLayerColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_removeLayerColor'", nullptr);
            return 0;
        }
        cobj->removeLayerColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:removeLayerColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_removeLayerColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_endGetDailyRwdData(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_endGetDailyRwdData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endGetDailyRwdData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endGetDailyRwdData'", nullptr);
            return 0;
        }
        cobj->endGetDailyRwdData(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:endGetDailyRwdData",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_endGetDailyRwdData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_isNewDay(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_isNewDay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_isNewDay'", nullptr);
            return 0;
        }
        bool ret = cobj->isNewDay();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:isNewDay",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_isNewDay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_endExchange(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_endExchange'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:endExchange");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_endExchange'", nullptr);
            return 0;
        }
        cobj->endExchange(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:endExchange",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_endExchange'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_aniComplete(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_aniComplete'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "PortActController:aniComplete");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_aniComplete'", nullptr);
            return 0;
        }
        cobj->aniComplete(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:aniComplete",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_aniComplete'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_parseTimeDiv(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_parseTimeDiv'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "PortActController:parseTimeDiv");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_parseTimeDiv'", nullptr);
            return 0;
        }
        cobj->parseTimeDiv(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:parseTimeDiv",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_parseTimeDiv'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_showRwdParticle(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_showRwdParticle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_showRwdParticle'", nullptr);
            return 0;
        }
        cobj->showRwdParticle();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:showRwdParticle",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_showRwdParticle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_startExchange(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_startExchange'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PortActController:startExchange");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_startExchange'", nullptr);
            return 0;
        }
        cobj->startExchange(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:startExchange",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_startExchange'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_canPopNewRDView(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_canPopNewRDView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_canPopNewRDView'", nullptr);
            return 0;
        }
        bool ret = cobj->canPopNewRDView();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:canPopNewRDView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_canPopNewRDView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_flyToolReward(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_flyToolReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Array* arg0;
        bool arg1;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "PortActController:flyToolReward");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PortActController:flyToolReward");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_flyToolReward'", nullptr);
            return 0;
        }
        cobj->flyToolReward(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:flyToolReward",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_flyToolReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_addPush(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_addPush'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_addPush'", nullptr);
            return 0;
        }
        cobj->addPush();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:addPush",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_addPush'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_flyReward(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_flyReward'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Array* arg0;
        bool arg1;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "PortActController:flyReward");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PortActController:flyReward");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_flyReward'", nullptr);
            return 0;
        }
        cobj->flyReward(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:flyReward",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_flyReward'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_getLvByTime(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PortActController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PortActController_getLvByTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        long arg0;

        ok &= luaval_to_long(tolua_S, 2, &arg0, "PortActController:getLvByTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_getLvByTime'", nullptr);
            return 0;
        }
        int ret = cobj->getLvByTime(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:getLvByTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_getLvByTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PortActController_purgeData(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_purgeData'", nullptr);
            return 0;
        }
        PortActController::purgeData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "PortActController:purgeData",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_purgeData'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_PortActController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"PortActController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_getInstance'", nullptr);
            return 0;
        }
        PortActController* ret = PortActController::getInstance();
        object_to_luaval<PortActController>(tolua_S, "PortActController",(PortActController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "PortActController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_getInstance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_PortActController_constructor(lua_State* tolua_S)
{
    int argc = 0;
    PortActController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PortActController_constructor'", nullptr);
            return 0;
        }
        cobj = new PortActController();
        tolua_pushusertype(tolua_S,(void*)cobj,"PortActController");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PortActController:PortActController",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PortActController_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_PortActController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (PortActController)");
    return 0;
}

int lua_register_cocos2dx_if_PortActController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PortActController");
    tolua_cclass(tolua_S,"PortActController","PortActController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"PortActController");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_PortActController_constructor);
        tolua_function(tolua_S,"isCanRwd",lua_cocos2dx_if_PortActController_isCanRwd);
        tolua_function(tolua_S,"startGetDailyRwdData",lua_cocos2dx_if_PortActController_startGetDailyRwdData);
        tolua_function(tolua_S,"particleComplete",lua_cocos2dx_if_PortActController_particleComplete);
        tolua_function(tolua_S,"endGetCheckInRwd",lua_cocos2dx_if_PortActController_endGetCheckInRwd);
        tolua_function(tolua_S,"initNewPlayerDailyRwdData",lua_cocos2dx_if_PortActController_initNewPlayerDailyRwdData);
        tolua_function(tolua_S,"startGetCheckInRwd",lua_cocos2dx_if_PortActController_startGetCheckInRwd);
        tolua_function(tolua_S,"getMaxRwdLv",lua_cocos2dx_if_PortActController_getMaxRwdLv);
        tolua_function(tolua_S,"isLastDayFirstIn",lua_cocos2dx_if_PortActController_isLastDayFirstIn);
        tolua_function(tolua_S,"endTimeRwd",lua_cocos2dx_if_PortActController_endTimeRwd);
        tolua_function(tolua_S,"startTimeRwd",lua_cocos2dx_if_PortActController_startTimeRwd);
        tolua_function(tolua_S,"startGetNewPlayerRD",lua_cocos2dx_if_PortActController_startGetNewPlayerRD);
        tolua_function(tolua_S,"startGetExchangeData",lua_cocos2dx_if_PortActController_startGetExchangeData);
        tolua_function(tolua_S,"addParticle",lua_cocos2dx_if_PortActController_addParticle);
        tolua_function(tolua_S,"endGetExchangeData",lua_cocos2dx_if_PortActController_endGetExchangeData);
        tolua_function(tolua_S,"endGetNewPlayerRD",lua_cocos2dx_if_PortActController_endGetNewPlayerRD);
        tolua_function(tolua_S,"removeLayerColor",lua_cocos2dx_if_PortActController_removeLayerColor);
        tolua_function(tolua_S,"endGetDailyRwdData",lua_cocos2dx_if_PortActController_endGetDailyRwdData);
        tolua_function(tolua_S,"isNewDay",lua_cocos2dx_if_PortActController_isNewDay);
        tolua_function(tolua_S,"endExchange",lua_cocos2dx_if_PortActController_endExchange);
        tolua_function(tolua_S,"aniComplete",lua_cocos2dx_if_PortActController_aniComplete);
        tolua_function(tolua_S,"parseTimeDiv",lua_cocos2dx_if_PortActController_parseTimeDiv);
        tolua_function(tolua_S,"showRwdParticle",lua_cocos2dx_if_PortActController_showRwdParticle);
        tolua_function(tolua_S,"startExchange",lua_cocos2dx_if_PortActController_startExchange);
        tolua_function(tolua_S,"canPopNewRDView",lua_cocos2dx_if_PortActController_canPopNewRDView);
        tolua_function(tolua_S,"flyToolReward",lua_cocos2dx_if_PortActController_flyToolReward);
        tolua_function(tolua_S,"addPush",lua_cocos2dx_if_PortActController_addPush);
        tolua_function(tolua_S,"flyReward",lua_cocos2dx_if_PortActController_flyReward);
        tolua_function(tolua_S,"getLvByTime",lua_cocos2dx_if_PortActController_getLvByTime);
        tolua_function(tolua_S,"purgeData", lua_cocos2dx_if_PortActController_purgeData);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_PortActController_getInstance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PortActController).name();
    g_luaType[typeName] = "PortActController";
    g_typeCast["PortActController"] = "PortActController";
    return 1;
}

int lua_cocos2dx_if_LuaController_getAdvCellContainer(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getAdvCellContainer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getAdvCellContainer'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getAdvCellContainer();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getAdvCellContainer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getAdvCellContainer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getImperialTouchLayer(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getImperialTouchLayer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getImperialTouchLayer'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getImperialTouchLayer();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getImperialTouchLayer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getImperialTouchLayer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_sendNotification(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_sendNotification'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:sendNotification");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_sendNotification'", nullptr);
            return 0;
        }
        cobj->sendNotification(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:sendNotification",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_sendNotification'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_openJoinAllianceView(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_openJoinAllianceView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_openJoinAllianceView'", nullptr);
            return 0;
        }
        cobj->openJoinAllianceView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:openJoinAllianceView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_openJoinAllianceView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getActivityInfo(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getActivityInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getActivityInfo");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getActivityInfo'", nullptr);
            return 0;
        }
        LuaActivityInfo* ret = cobj->getActivityInfo(arg0);
        object_to_luaval<LuaActivityInfo>(tolua_S, "LuaActivityInfo",(LuaActivityInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getActivityInfo",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getActivityInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_showActRwdViewByActId(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_showActRwdViewByActId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:showActRwdViewByActId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_showActRwdViewByActId'", nullptr);
            return 0;
        }
        cobj->showActRwdViewByActId(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:showActRwdViewByActId",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_showActRwdViewByActId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_isInTutorial(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_isInTutorial'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_isInTutorial'", nullptr);
            return 0;
        }
        bool ret = cobj->isInTutorial();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:isInTutorial",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_isInTutorial'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_sendCMD(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_sendCMD'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:sendCMD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_sendCMD'", nullptr);
            return 0;
        }
        cobj->sendCMD(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        std::string arg0;
        cocos2d::__Dictionary* arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:sendCMD");

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 3, "CCDictionary",&arg1, "LuaController:sendCMD");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_sendCMD'", nullptr);
            return 0;
        }
        cobj->sendCMD(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:sendCMD",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_sendCMD'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getDicLuaData(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getDicLuaData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "LuaController:getDicLuaData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getDicLuaData'", nullptr);
            return 0;
        }
        cocos2d::Dictionary* ret = cobj->getDicLuaData(arg0);
        dictionary_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getDicLuaData",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getDicLuaData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getIconContainer(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getIconContainer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getIconContainer'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getIconContainer();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getIconContainer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getIconContainer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getArrLuaData(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getArrLuaData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "LuaController:getArrLuaData");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getArrLuaData'", nullptr);
            return 0;
        }
        cocos2d::Array* ret = cobj->getArrLuaData(arg0);
        array_to_luaval(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getArrLuaData",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getArrLuaData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getActExcData(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getActExcData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getActExcData'", nullptr);
            return 0;
        }
        cobj->getActExcData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getActExcData",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getActExcData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getAdvCell(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getAdvCell'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getAdvCell'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getAdvCell();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getAdvCell",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getAdvCell'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getFileVersion(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getFileVersion'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getFileVersion");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getFileVersion'", nullptr);
            return 0;
        }
        int ret = cobj->getFileVersion(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getFileVersion",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getFileVersion'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_closeChatNotice(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_closeChatNotice'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_closeChatNotice'", nullptr);
            return 0;
        }
        cobj->closeChatNotice();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:closeChatNotice",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_closeChatNotice'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getChatNoticeContainer(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getChatNoticeContainer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getChatNoticeContainer'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getChatNoticeContainer();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getChatNoticeContainer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getChatNoticeContainer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_getSaleViewContainer(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (LuaController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_LuaController_getSaleViewContainer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getSaleViewContainer'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getSaleViewContainer();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:getSaleViewContainer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getSaleViewContainer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_LuaController_removeAllPopupView(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_removeAllPopupView'", nullptr);
            return 0;
        }
        LuaController::removeAllPopupView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:removeAllPopupView",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_removeAllPopupView'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_showBindGuide(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_showBindGuide'", nullptr);
            return 0;
        }
        LuaController::showBindGuide();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:showBindGuide",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_showBindGuide'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_createParticleForLua(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "LuaController:createParticleForLua"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_createParticleForLua'", nullptr);
            return 0;
        }
        cocos2d::ParticleSystemQuad* ret = LuaController::createParticleForLua(arg0);
        object_to_luaval<cocos2d::ParticleSystemQuad>(tolua_S, "cc.ParticleSystemQuad",(cocos2d::ParticleSystemQuad*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:createParticleForLua",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_createParticleForLua'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_addButtonLight(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::Node* arg0;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "LuaController:addButtonLight");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_addButtonLight'", nullptr);
            return 0;
        }
        LuaController::addButtonLight(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:addButtonLight",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_addButtonLight'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_openBagView(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "LuaController:openBagView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_openBagView'", nullptr);
            return 0;
        }
        LuaController::openBagView(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:openBagView",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_openBagView'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_checkSkeletonFile(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "LuaController:checkSkeletonFile"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_checkSkeletonFile'", nullptr);
            return 0;
        }
        bool ret = LuaController::checkSkeletonFile(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:checkSkeletonFile",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_checkSkeletonFile'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getWorldTime(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getWorldTime'", nullptr);
            return 0;
        }
        int ret = LuaController::getWorldTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getWorldTime",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getWorldTime'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_callPaymentToFriend(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:callPaymentToFriend");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:callPaymentToFriend");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "LuaController:callPaymentToFriend");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_callPaymentToFriend'", nullptr);
            return 0;
        }
        LuaController::callPaymentToFriend(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:callPaymentToFriend",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_callPaymentToFriend'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_callPayment(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:callPayment");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_callPayment'", nullptr);
            return 0;
        }
        LuaController::callPayment(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:callPayment",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_callPayment'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getInstance'", nullptr);
            return 0;
        }
        LuaController* ret = LuaController::getInstance();
        object_to_luaval<LuaController>(tolua_S, "LuaController",(LuaController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getInstance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_retReward(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::__Array* arg0;
        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "LuaController:retReward");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_retReward'", nullptr);
            return 0;
        }
        std::string ret = LuaController::retReward(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:retReward",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_retReward'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getCMDLang(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getCMDLang");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getCMDLang'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getCMDLang(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getCMDLang",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getCMDLang'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLang(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getLang");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLang'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLang(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLang",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLang'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_addItemIcon(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        cocos2d::Node* arg0;
        std::string arg1;
        cocos2d::Label* arg2;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "LuaController:addItemIcon");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:addItemIcon");
        ok &= luaval_to_object<cocos2d::Label>(tolua_S, 4, "cc.Label",&arg2, "LuaController:addItemIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_addItemIcon'", nullptr);
            return 0;
        }
        LuaController::addItemIcon(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:addItemIcon",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_addItemIcon'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_createParticleInPoolForLua(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        const char* arg0;
        std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp, "LuaController:createParticleInPoolForLua"); arg0 = arg0_tmp.c_str();
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_createParticleInPoolForLua'", nullptr);
            return 0;
        }
        cocos2d::ParticleSystemQuad* ret = LuaController::createParticleInPoolForLua(arg0);
        object_to_luaval<cocos2d::ParticleSystemQuad>(tolua_S, "cc.ParticleSystemQuad",(cocos2d::ParticleSystemQuad*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:createParticleInPoolForLua",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_createParticleInPoolForLua'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getResourceNameByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "LuaController:getResourceNameByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getResourceNameByType'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getResourceNameByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getResourceNameByType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getResourceNameByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_removeLastPopup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_removeLastPopup'", nullptr);
            return 0;
        }
        LuaController::removeLastPopup();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:removeLastPopup",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_removeLastPopup'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_isIosAndroidPad(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_isIosAndroidPad'", nullptr);
            return 0;
        }
        bool ret = LuaController::isIosAndroidPad();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:isIosAndroidPad",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_isIosAndroidPad'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLang1(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getLang1");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:getLang1");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLang1'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLang1(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLang1",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLang1'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLang2(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getLang2");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:getLang2");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "LuaController:getLang2");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLang2'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLang2(arg0, arg1, arg2);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLang2",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLang2'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLang3(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getLang3");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:getLang3");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "LuaController:getLang3");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "LuaController:getLang3");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLang3'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLang3(arg0, arg1, arg2, arg3);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLang3",argc, 4);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLang3'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLang4(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 5)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        std::string arg4;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getLang4");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:getLang4");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "LuaController:getLang4");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "LuaController:getLang4");
        ok &= luaval_to_std_string(tolua_S, 6,&arg4, "LuaController:getLang4");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLang4'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLang4(arg0, arg1, arg2, arg3, arg4);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLang4",argc, 5);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLang4'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLang5(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 6)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        std::string arg4;
        std::string arg5;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getLang5");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:getLang5");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "LuaController:getLang5");
        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "LuaController:getLang5");
        ok &= luaval_to_std_string(tolua_S, 6,&arg4, "LuaController:getLang5");
        ok &= luaval_to_std_string(tolua_S, 7,&arg5, "LuaController:getLang5");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLang5'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLang5(arg0, arg1, arg2, arg3, arg4, arg5);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLang5",argc, 6);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLang5'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getStringLength(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getStringLength");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getStringLength'", nullptr);
            return 0;
        }
        int ret = LuaController::getStringLength(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getStringLength",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getStringLength'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_showDetailPopup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:showDetailPopup");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_showDetailPopup'", nullptr);
            return 0;
        }
        LuaController::showDetailPopup(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:showDetailPopup",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_showDetailPopup'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getPlatform(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getPlatform'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getPlatform();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getPlatform",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getPlatform'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_showFAQ(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:showFAQ");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_showFAQ'", nullptr);
            return 0;
        }
        LuaController::showFAQ(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:showFAQ",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_showFAQ'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_createGoodsIcon(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        int arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:createGoodsIcon");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "LuaController:createGoodsIcon");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_createGoodsIcon'", nullptr);
            return 0;
        }
        cocos2d::Sprite* ret = LuaController::createGoodsIcon(arg0, arg1);
        object_to_luaval<cocos2d::Sprite>(tolua_S, "cc.Sprite",(cocos2d::Sprite*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:createGoodsIcon",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_createGoodsIcon'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getLanguage(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getLanguage'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getLanguage();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getLanguage",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getLanguage'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getTimeStamp(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getTimeStamp'", nullptr);
            return 0;
        }
        int ret = LuaController::getTimeStamp();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getTimeStamp",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getTimeStamp'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_doResourceByCommonIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        int arg0;
        bool arg1;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "LuaController:doResourceByCommonIndex");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "LuaController:doResourceByCommonIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_doResourceByCommonIndex'", nullptr);
            return 0;
        }
        LuaController::doResourceByCommonIndex(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:doResourceByCommonIndex",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_doResourceByCommonIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_addIconByType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 5)
    {
        cocos2d::Node* arg0;
        std::string arg1;
        cocos2d::Label* arg2;
        int arg3;
        int arg4;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "LuaController:addIconByType");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:addIconByType");
        ok &= luaval_to_object<cocos2d::Label>(tolua_S, 4, "cc.Label",&arg2, "LuaController:addIconByType");
        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "LuaController:addIconByType");
        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "LuaController:addIconByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_addIconByType'", nullptr);
            return 0;
        }
        LuaController::addIconByType(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:addIconByType",argc, 5);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_addIconByType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getGoodsInfo(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getGoodsInfo");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getGoodsInfo'", nullptr);
            return 0;
        }
        cocos2d::__Dictionary* ret = LuaController::getGoodsInfo(arg0);
        object_to_luaval<cocos2d::__Dictionary>(tolua_S, "CCDictionary",(cocos2d::__Dictionary*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getGoodsInfo",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getGoodsInfo'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_removeAllPopup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_removeAllPopup'", nullptr);
            return 0;
        }
        LuaController::removeAllPopup();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:removeAllPopup",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_removeAllPopup'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_flyHint(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:flyHint");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:flyHint");
        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "LuaController:flyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_flyHint'", nullptr);
            return 0;
        }
        LuaController::flyHint(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:flyHint",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_flyHint'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_toSelectUser(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        bool arg1;
        int arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:toSelectUser");
        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "LuaController:toSelectUser");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "LuaController:toSelectUser");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_toSelectUser'", nullptr);
            return 0;
        }
        LuaController::toSelectUser(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:toSelectUser",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_toSelectUser'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getObjectType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::Ref* arg0;
        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "LuaController:getObjectType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getObjectType'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getObjectType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getObjectType",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getObjectType'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getUTF8SubString(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        std::string arg0;
        int arg1;
        int arg2;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getUTF8SubString");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "LuaController:getUTF8SubString");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "LuaController:getUTF8SubString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getUTF8SubString'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getUTF8SubString(arg0, arg1, arg2);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getUTF8SubString",argc, 3);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getUTF8SubString'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_playEffects(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:playEffects");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_playEffects'", nullptr);
            return 0;
        }
        LuaController::playEffects(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:playEffects",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_playEffects'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getSECLang(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "LuaController:getSECLang");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getSECLang'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getSECLang(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getSECLang",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getSECLang'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_showTipsView(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:showTipsView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_showTipsView'", nullptr);
            return 0;
        }
        LuaController::showTipsView(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        cocos2d::TextHAlignment arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:showTipsView");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "LuaController:showTipsView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_showTipsView'", nullptr);
            return 0;
        }
        LuaController::showTipsView(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:showTipsView",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_showTipsView'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_setTitleName(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:setTitleName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_setTitleName'", nullptr);
            return 0;
        }
        LuaController::setTitleName(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:setTitleName",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_setTitleName'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_addSkeletonAnimation(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 5)
    {
        cocos2d::Node* arg0;
        const char* arg1;
        const char* arg2;
        const char* arg3;
        double arg4;
        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "LuaController:addSkeletonAnimation");
        std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp, "LuaController:addSkeletonAnimation"); arg1 = arg1_tmp.c_str();
        std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp, "LuaController:addSkeletonAnimation"); arg2 = arg2_tmp.c_str();
        std::string arg3_tmp; ok &= luaval_to_std_string(tolua_S, 5, &arg3_tmp, "LuaController:addSkeletonAnimation"); arg3 = arg3_tmp.c_str();
        ok &= luaval_to_number(tolua_S, 6,&arg4, "LuaController:addSkeletonAnimation");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_addSkeletonAnimation'", nullptr);
            return 0;
        }
        LuaController::addSkeletonAnimation(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:addSkeletonAnimation",argc, 5);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_addSkeletonAnimation'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_getDollarString(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"LuaController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "LuaController:getDollarString");
        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "LuaController:getDollarString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_getDollarString'", nullptr);
            return 0;
        }
        std::string ret = LuaController::getDollarString(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "LuaController:getDollarString",argc, 2);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_getDollarString'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_LuaController_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LuaController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_LuaController_constructor'", nullptr);
            return 0;
        }
        cobj = new LuaController();
        tolua_pushusertype(tolua_S,(void*)cobj,"LuaController");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "LuaController:LuaController",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_LuaController_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_LuaController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LuaController)");
    return 0;
}

int lua_register_cocos2dx_if_LuaController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LuaController");
    tolua_cclass(tolua_S,"LuaController","LuaController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"LuaController");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_LuaController_constructor);
        tolua_function(tolua_S,"getAdvCellContainer",lua_cocos2dx_if_LuaController_getAdvCellContainer);
        tolua_function(tolua_S,"getImperialTouchLayer",lua_cocos2dx_if_LuaController_getImperialTouchLayer);
        tolua_function(tolua_S,"sendNotification",lua_cocos2dx_if_LuaController_sendNotification);
        tolua_function(tolua_S,"openJoinAllianceView",lua_cocos2dx_if_LuaController_openJoinAllianceView);
        tolua_function(tolua_S,"getActivityInfo",lua_cocos2dx_if_LuaController_getActivityInfo);
        tolua_function(tolua_S,"showActRwdViewByActId",lua_cocos2dx_if_LuaController_showActRwdViewByActId);
        tolua_function(tolua_S,"isInTutorial",lua_cocos2dx_if_LuaController_isInTutorial);
        tolua_function(tolua_S,"sendCMD",lua_cocos2dx_if_LuaController_sendCMD);
        tolua_function(tolua_S,"getDicLuaData",lua_cocos2dx_if_LuaController_getDicLuaData);
        tolua_function(tolua_S,"getIconContainer",lua_cocos2dx_if_LuaController_getIconContainer);
        tolua_function(tolua_S,"getArrLuaData",lua_cocos2dx_if_LuaController_getArrLuaData);
        tolua_function(tolua_S,"getActExcData",lua_cocos2dx_if_LuaController_getActExcData);
        tolua_function(tolua_S,"getAdvCell",lua_cocos2dx_if_LuaController_getAdvCell);
        tolua_function(tolua_S,"getFileVersion",lua_cocos2dx_if_LuaController_getFileVersion);
        tolua_function(tolua_S,"closeChatNotice",lua_cocos2dx_if_LuaController_closeChatNotice);
        tolua_function(tolua_S,"getChatNoticeContainer",lua_cocos2dx_if_LuaController_getChatNoticeContainer);
        tolua_function(tolua_S,"getSaleViewContainer",lua_cocos2dx_if_LuaController_getSaleViewContainer);
        tolua_function(tolua_S,"removeAllPopupView", lua_cocos2dx_if_LuaController_removeAllPopupView);
        tolua_function(tolua_S,"showBindGuide", lua_cocos2dx_if_LuaController_showBindGuide);
        tolua_function(tolua_S,"createParticleForLua", lua_cocos2dx_if_LuaController_createParticleForLua);
        tolua_function(tolua_S,"addButtonLight", lua_cocos2dx_if_LuaController_addButtonLight);
        tolua_function(tolua_S,"openBagView", lua_cocos2dx_if_LuaController_openBagView);
        tolua_function(tolua_S,"checkSkeletonFile", lua_cocos2dx_if_LuaController_checkSkeletonFile);
        tolua_function(tolua_S,"getWorldTime", lua_cocos2dx_if_LuaController_getWorldTime);
        tolua_function(tolua_S,"callPaymentToFriend", lua_cocos2dx_if_LuaController_callPaymentToFriend);
        tolua_function(tolua_S,"callPayment", lua_cocos2dx_if_LuaController_callPayment);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_LuaController_getInstance);
        tolua_function(tolua_S,"retReward", lua_cocos2dx_if_LuaController_retReward);
        tolua_function(tolua_S,"getCMDLang", lua_cocos2dx_if_LuaController_getCMDLang);
        tolua_function(tolua_S,"getLang", lua_cocos2dx_if_LuaController_getLang);
        tolua_function(tolua_S,"addItemIcon", lua_cocos2dx_if_LuaController_addItemIcon);
        tolua_function(tolua_S,"createParticleInPoolForLua", lua_cocos2dx_if_LuaController_createParticleInPoolForLua);
        tolua_function(tolua_S,"getResourceNameByType", lua_cocos2dx_if_LuaController_getResourceNameByType);
        tolua_function(tolua_S,"removeLastPopup", lua_cocos2dx_if_LuaController_removeLastPopup);
        tolua_function(tolua_S,"isIosAndroidPad", lua_cocos2dx_if_LuaController_isIosAndroidPad);
        tolua_function(tolua_S,"getLang1", lua_cocos2dx_if_LuaController_getLang1);
        tolua_function(tolua_S,"getLang2", lua_cocos2dx_if_LuaController_getLang2);
        tolua_function(tolua_S,"getLang3", lua_cocos2dx_if_LuaController_getLang3);
        tolua_function(tolua_S,"getLang4", lua_cocos2dx_if_LuaController_getLang4);
        tolua_function(tolua_S,"getLang5", lua_cocos2dx_if_LuaController_getLang5);
        tolua_function(tolua_S,"getStringLength", lua_cocos2dx_if_LuaController_getStringLength);
        tolua_function(tolua_S,"showDetailPopup", lua_cocos2dx_if_LuaController_showDetailPopup);
        tolua_function(tolua_S,"getPlatform", lua_cocos2dx_if_LuaController_getPlatform);
        tolua_function(tolua_S,"showFAQ", lua_cocos2dx_if_LuaController_showFAQ);
        tolua_function(tolua_S,"createGoodsIcon", lua_cocos2dx_if_LuaController_createGoodsIcon);
        tolua_function(tolua_S,"getLanguage", lua_cocos2dx_if_LuaController_getLanguage);
        tolua_function(tolua_S,"getTimeStamp", lua_cocos2dx_if_LuaController_getTimeStamp);
        tolua_function(tolua_S,"doResourceByCommonIndex", lua_cocos2dx_if_LuaController_doResourceByCommonIndex);
        tolua_function(tolua_S,"addIconByType", lua_cocos2dx_if_LuaController_addIconByType);
        tolua_function(tolua_S,"getGoodsInfo", lua_cocos2dx_if_LuaController_getGoodsInfo);
        tolua_function(tolua_S,"removeAllPopup", lua_cocos2dx_if_LuaController_removeAllPopup);
        tolua_function(tolua_S,"flyHint", lua_cocos2dx_if_LuaController_flyHint);
        tolua_function(tolua_S,"toSelectUser", lua_cocos2dx_if_LuaController_toSelectUser);
        tolua_function(tolua_S,"getObjectType", lua_cocos2dx_if_LuaController_getObjectType);
        tolua_function(tolua_S,"getUTF8SubString", lua_cocos2dx_if_LuaController_getUTF8SubString);
        tolua_function(tolua_S,"playEffects", lua_cocos2dx_if_LuaController_playEffects);
        tolua_function(tolua_S,"getSECLang", lua_cocos2dx_if_LuaController_getSECLang);
        tolua_function(tolua_S,"showTipsView", lua_cocos2dx_if_LuaController_showTipsView);
        tolua_function(tolua_S,"setTitleName", lua_cocos2dx_if_LuaController_setTitleName);
        tolua_function(tolua_S,"addSkeletonAnimation", lua_cocos2dx_if_LuaController_addSkeletonAnimation);
        tolua_function(tolua_S,"getDollarString", lua_cocos2dx_if_LuaController_getDollarString);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LuaController).name();
    g_luaType[typeName] = "LuaController";
    g_typeCast["LuaController"] = "LuaController";
    return 1;
}

int lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim'", nullptr);
            return 0;
        }
        int ret = cobj->goBackPopupViewWithAnim();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:goBackPopupViewWithAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim'", nullptr);
            return 0;
        }
        int ret = cobj->goBackPopupViewWithAnim(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        PopupBaseView* arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:goBackPopupViewWithAnim");

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 3, "PopupBaseView",&arg1, "PopupViewController:goBackPopupViewWithAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim'", nullptr);
            return 0;
        }
        int ret = cobj->goBackPopupViewWithAnim(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:goBackPopupViewWithAnim",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getPlayingInAnim(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getPlayingInAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getPlayingInAnim'", nullptr);
            return 0;
        }
        bool ret = cobj->getPlayingInAnim();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getPlayingInAnim",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getPlayingInAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_removeLastPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_removeLastPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removeLastPopupView'", nullptr);
            return 0;
        }
        cobj->removeLastPopupView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:removeLastPopupView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_removeLastPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getCurrViewCount(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getCurrViewCount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getCurrViewCount'", nullptr);
            return 0;
        }
        int ret = cobj->getCurrViewCount();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getCurrViewCount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getCurrViewCount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_forceClearAll(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_forceClearAll'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_forceClearAll'", nullptr);
            return 0;
        }
        cobj->forceClearAll();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupViewController:forceClearAll");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_forceClearAll'", nullptr);
            return 0;
        }
        cobj->forceClearAll(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:forceClearAll",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_forceClearAll'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addPopupFromAndroidInView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addPopupFromAndroidInView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupFromAndroidInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupFromAndroidInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupFromAndroidInView(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        bool arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupFromAndroidInView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupFromAndroidInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupFromAndroidInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupFromAndroidInView(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addPopupFromAndroidInView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addPopupFromAndroidInView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_setPrincessShow(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_setPrincessShow'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupViewController:setPrincessShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_setPrincessShow'", nullptr);
            return 0;
        }
        cobj->setPrincessShow(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:setPrincessShow",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_setPrincessShow'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addGoBackViewFromAndroidWithAnim(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewFromAndroidWithAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupViewController:addGoBackViewFromAndroidWithAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewFromAndroidWithAnim'", nullptr);
            return 0;
        }
        cobj->addGoBackViewFromAndroidWithAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addGoBackViewFromAndroidWithAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewFromAndroidWithAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_removePopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_removePopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:removePopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removePopupView'", nullptr);
            return 0;
        }
        cobj->removePopupView(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        bool arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:removePopupView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:removePopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removePopupView'", nullptr);
            return 0;
        }
        cobj->removePopupView(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        PopupBaseView* arg0;
        bool arg1;
        bool arg2;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:removePopupView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:removePopupView");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "PopupViewController:removePopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removePopupView'", nullptr);
            return 0;
        }
        cobj->removePopupView(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:removePopupView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_removePopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_setTouchPos(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_setTouchPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "PopupViewController:setTouchPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_setTouchPos'", nullptr);
            return 0;
        }
        cobj->setTouchPos(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:setTouchPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_setTouchPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_goBackPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_goBackPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_goBackPopupView'", nullptr);
            return 0;
        }
        int ret = cobj->goBackPopupView();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:goBackPopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_goBackPopupView'", nullptr);
            return 0;
        }
        int ret = cobj->goBackPopupView(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:goBackPopupView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_goBackPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addGoBackStack(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addGoBackStack'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addGoBackStack'", nullptr);
            return 0;
        }
        cobj->addGoBackStack();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupViewController:addGoBackStack");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addGoBackStack'", nullptr);
            return 0;
        }
        cobj->addGoBackStack(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addGoBackStack",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addGoBackStack'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_pushPop(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_pushPop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:pushPop");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_pushPop'", nullptr);
            return 0;
        }
        bool ret = cobj->pushPop(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        bool arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:pushPop");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:pushPop");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_pushPop'", nullptr);
            return 0;
        }
        bool ret = cobj->pushPop(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:pushPop",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_pushPop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_removeAllPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_removeAllPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removeAllPopupView'", nullptr);
            return 0;
        }
        cobj->removeAllPopupView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:removeAllPopupView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_removeAllPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "PopupViewController:getPopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getPopupView'", nullptr);
            return 0;
        }
        PopupBaseView* ret = cobj->getPopupView(arg0);
        object_to_luaval<PopupBaseView>(tolua_S, "PopupBaseView",(PopupBaseView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getPopupView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_removeLastSystemMailPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_removeLastSystemMailPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removeLastSystemMailPopupView'", nullptr);
            return 0;
        }
        cobj->removeLastSystemMailPopupView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:removeLastSystemMailPopupView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_removeLastSystemMailPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addPopFlyHint(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addPopFlyHint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        FlyHint* arg0;

        ok &= luaval_to_object<FlyHint>(tolua_S, 2, "FlyHint",&arg0, "PopupViewController:addPopFlyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopFlyHint'", nullptr);
            return 0;
        }
        cobj->addPopFlyHint(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addPopFlyHint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addPopFlyHint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getPrincessShow(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getPrincessShow'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getPrincessShow'", nullptr);
            return 0;
        }
        bool ret = cobj->getPrincessShow();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getPrincessShow",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getPrincessShow'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getGoBackViewCount(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getGoBackViewCount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getGoBackViewCount'", nullptr);
            return 0;
        }
        int ret = cobj->getGoBackViewCount();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getGoBackViewCount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getGoBackViewCount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_removePopFlyHint(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_removePopFlyHint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        FlyHint* arg0;

        ok &= luaval_to_object<FlyHint>(tolua_S, 2, "FlyHint",&arg0, "PopupViewController:removePopFlyHint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_removePopFlyHint'", nullptr);
            return 0;
        }
        cobj->removePopFlyHint(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:removePopFlyHint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_removePopFlyHint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_changePopInView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_changePopInView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        int arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:changePopInView");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "PopupViewController:changePopInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_changePopInView'", nullptr);
            return 0;
        }
        int ret = cobj->changePopInView(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:changePopInView",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_changePopInView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addGoBackViewWithAnim(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewWithAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewWithAnim'", nullptr);
            return 0;
        }
        cobj->addGoBackViewWithAnim();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "PopupViewController:addGoBackViewWithAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewWithAnim'", nullptr);
            return 0;
        }
        cobj->addGoBackViewWithAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addGoBackViewWithAnim",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addGoBackViewWithAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_showPushPop(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_showPushPop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_showPushPop'", nullptr);
            return 0;
        }
        cobj->showPushPop();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:showPushPop",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_showPushPop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addPopupInView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInView(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        bool arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInView(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 3) 
    {
        PopupBaseView* arg0;
        bool arg1;
        bool arg2;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "PopupViewController:addPopupInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInView(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 4) 
    {
        PopupBaseView* arg0;
        bool arg1;
        bool arg2;
        bool arg3;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "PopupViewController:addPopupInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInView(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 5) 
    {
        PopupBaseView* arg0;
        bool arg1;
        bool arg2;
        bool arg3;
        bool arg4;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "PopupViewController:addPopupInView");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "PopupViewController:addPopupInView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInView(arg0, arg1, arg2, arg3, arg4);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addPopupInView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addPopupInView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getTouchPoint(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getTouchPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getTouchPoint'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getTouchPoint();
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getTouchPoint",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getTouchPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupView(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        bool arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupView(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 3) 
    {
        PopupBaseView* arg0;
        bool arg1;
        bool arg2;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupView");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupView");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "PopupViewController:addPopupView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupView'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupView(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addPopupView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_addPopupInViewWithAnim(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_addPopupInViewWithAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PopupBaseView* arg0;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInViewWithAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInViewWithAnim'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInViewWithAnim(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        PopupBaseView* arg0;
        bool arg1;

        ok &= luaval_to_object<PopupBaseView>(tolua_S, 2, "PopupBaseView",&arg0, "PopupViewController:addPopupInViewWithAnim");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "PopupViewController:addPopupInViewWithAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_addPopupInViewWithAnim'", nullptr);
            return 0;
        }
        int ret = cobj->addPopupInViewWithAnim(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:addPopupInViewWithAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_addPopupInViewWithAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getCurrentPopupView(lua_State* tolua_S)
{
    int argc = 0;
    PopupViewController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (PopupViewController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_PopupViewController_getCurrentPopupView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getCurrentPopupView'", nullptr);
            return 0;
        }
        PopupBaseView* ret = cobj->getCurrentPopupView();
        object_to_luaval<PopupBaseView>(tolua_S, "PopupBaseView",(PopupBaseView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "PopupViewController:getCurrentPopupView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getCurrentPopupView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_PopupViewController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"PopupViewController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_PopupViewController_getInstance'", nullptr);
            return 0;
        }
        PopupViewController* ret = PopupViewController::getInstance();
        object_to_luaval<PopupViewController>(tolua_S, "PopupViewController",(PopupViewController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "PopupViewController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_PopupViewController_getInstance'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_PopupViewController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (PopupViewController)");
    return 0;
}

int lua_register_cocos2dx_if_PopupViewController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PopupViewController");
    tolua_cclass(tolua_S,"PopupViewController","PopupViewController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"PopupViewController");
        tolua_function(tolua_S,"goBackPopupViewWithAnim",lua_cocos2dx_if_PopupViewController_goBackPopupViewWithAnim);
        tolua_function(tolua_S,"getPlayingInAnim",lua_cocos2dx_if_PopupViewController_getPlayingInAnim);
        tolua_function(tolua_S,"removeLastPopupView",lua_cocos2dx_if_PopupViewController_removeLastPopupView);
        tolua_function(tolua_S,"getCurrViewCount",lua_cocos2dx_if_PopupViewController_getCurrViewCount);
        tolua_function(tolua_S,"forceClearAll",lua_cocos2dx_if_PopupViewController_forceClearAll);
        tolua_function(tolua_S,"addPopupFromAndroidInView",lua_cocos2dx_if_PopupViewController_addPopupFromAndroidInView);
        tolua_function(tolua_S,"setPrincessShow",lua_cocos2dx_if_PopupViewController_setPrincessShow);
        tolua_function(tolua_S,"addGoBackViewFromAndroidWithAnim",lua_cocos2dx_if_PopupViewController_addGoBackViewFromAndroidWithAnim);
        tolua_function(tolua_S,"removePopupView",lua_cocos2dx_if_PopupViewController_removePopupView);
        tolua_function(tolua_S,"setTouchPos",lua_cocos2dx_if_PopupViewController_setTouchPos);
        tolua_function(tolua_S,"goBackPopupView",lua_cocos2dx_if_PopupViewController_goBackPopupView);
        tolua_function(tolua_S,"addGoBackStack",lua_cocos2dx_if_PopupViewController_addGoBackStack);
        tolua_function(tolua_S,"pushPop",lua_cocos2dx_if_PopupViewController_pushPop);
        tolua_function(tolua_S,"removeAllPopupView",lua_cocos2dx_if_PopupViewController_removeAllPopupView);
        tolua_function(tolua_S,"getPopupView",lua_cocos2dx_if_PopupViewController_getPopupView);
        tolua_function(tolua_S,"removeLastSystemMailPopupView",lua_cocos2dx_if_PopupViewController_removeLastSystemMailPopupView);
        tolua_function(tolua_S,"addPopFlyHint",lua_cocos2dx_if_PopupViewController_addPopFlyHint);
        tolua_function(tolua_S,"getPrincessShow",lua_cocos2dx_if_PopupViewController_getPrincessShow);
        tolua_function(tolua_S,"getGoBackViewCount",lua_cocos2dx_if_PopupViewController_getGoBackViewCount);
        tolua_function(tolua_S,"removePopFlyHint",lua_cocos2dx_if_PopupViewController_removePopFlyHint);
        tolua_function(tolua_S,"changePopInView",lua_cocos2dx_if_PopupViewController_changePopInView);
        tolua_function(tolua_S,"addGoBackViewWithAnim",lua_cocos2dx_if_PopupViewController_addGoBackViewWithAnim);
        tolua_function(tolua_S,"showPushPop",lua_cocos2dx_if_PopupViewController_showPushPop);
        tolua_function(tolua_S,"addPopupInView",lua_cocos2dx_if_PopupViewController_addPopupInView);
        tolua_function(tolua_S,"getTouchPoint",lua_cocos2dx_if_PopupViewController_getTouchPoint);
        tolua_function(tolua_S,"addPopupView",lua_cocos2dx_if_PopupViewController_addPopupView);
        tolua_function(tolua_S,"addPopupInViewWithAnim",lua_cocos2dx_if_PopupViewController_addPopupInViewWithAnim);
        tolua_function(tolua_S,"getCurrentPopupView",lua_cocos2dx_if_PopupViewController_getCurrentPopupView);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_PopupViewController_getInstance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PopupViewController).name();
    g_luaType[typeName] = "PopupViewController";
    g_typeCast["PopupViewController"] = "PopupViewController";
    return 1;
}

int lua_cocos2dx_if_ToolController_endTrimVipPoint(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_endTrimVipPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ToolController:endTrimVipPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_endTrimVipPoint'", nullptr);
            return 0;
        }
        cobj->endTrimVipPoint(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:endTrimVipPoint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_endTrimVipPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_haveSkin(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_haveSkin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_haveSkin'", nullptr);
            return 0;
        }
        bool ret = cobj->haveSkin();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:haveSkin",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_haveSkin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getToolInfoForLua(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_getToolInfoForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:getToolInfoForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getToolInfoForLua'", nullptr);
            return 0;
        }
        ToolInfo* ret = cobj->getToolInfoForLua(arg0);
        object_to_luaval<ToolInfo>(tolua_S, "ToolInfo",(ToolInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:getToolInfoForLua",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getToolInfoForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_setMerchante_state(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_setMerchante_state'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:setMerchante_state");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_setMerchante_state'", nullptr);
            return 0;
        }
        cobj->setMerchante_state(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:setMerchante_state",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_setMerchante_state'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_useSkin(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_useSkin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ToolController:useSkin");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useSkin'", nullptr);
            return 0;
        }
        cobj->useSkin(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:useSkin",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_useSkin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getMaincitySkin(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_getMaincitySkin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getMaincitySkin'", nullptr);
            return 0;
        }
        std::string ret = cobj->getMaincitySkin();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:getMaincitySkin",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getMaincitySkin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_retBuyEquip(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_retBuyEquip'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ToolController:retBuyEquip");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_retBuyEquip'", nullptr);
            return 0;
        }
        cobj->retBuyEquip(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:retBuyEquip",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_retBuyEquip'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_isProtectItem(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_isProtectItem'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:isProtectItem");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_isProtectItem'", nullptr);
            return 0;
        }
        bool ret = cobj->isProtectItem(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:isProtectItem",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_isProtectItem'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_isNewVersionGoods(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_isNewVersionGoods'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ToolController:isNewVersionGoods");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_isNewVersionGoods'", nullptr);
            return 0;
        }
        bool ret = cobj->isNewVersionGoods(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:isNewVersionGoods",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_isNewVersionGoods'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_buyEquip(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_buyEquip'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:buyEquip");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_buyEquip'", nullptr);
            return 0;
        }
        bool ret = cobj->buyEquip(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:buyEquip");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:buyEquip");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_buyEquip'", nullptr);
            return 0;
        }
        bool ret = cobj->buyEquip(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:buyEquip",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_buyEquip'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_useTool(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_useTool'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:useTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useTool'", nullptr);
            return 0;
        }
        bool ret = cobj->useTool(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:useTool");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:useTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useTool'", nullptr);
            return 0;
        }
        bool ret = cobj->useTool(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:useTool");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:useTool");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "ToolController:useTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useTool'", nullptr);
            return 0;
        }
        bool ret = cobj->useTool(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 4) 
    {
        int arg0;
        int arg1;
        bool arg2;
        bool arg3;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:useTool");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:useTool");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "ToolController:useTool");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "ToolController:useTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useTool'", nullptr);
            return 0;
        }
        bool ret = cobj->useTool(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:useTool",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_useTool'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getMerchanteCostTip(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_getMerchanteCostTip'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getMerchanteCostTip'", nullptr);
            return 0;
        }
        int ret = cobj->getMerchanteCostTip();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:getMerchanteCostTip",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getMerchanteCostTip'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getMerchante_animation(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_getMerchante_animation'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getMerchante_animation'", nullptr);
            return 0;
        }
        bool ret = cobj->getMerchante_animation();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:getMerchante_animation",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getMerchante_animation'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_aniComplete(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_aniComplete'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ToolController:aniComplete");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_aniComplete'", nullptr);
            return 0;
        }
        cobj->aniComplete(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:aniComplete",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_aniComplete'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getEndProtectTimeById(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_getEndProtectTimeById'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:getEndProtectTimeById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getEndProtectTimeById'", nullptr);
            return 0;
        }
        int ret = cobj->getEndProtectTimeById(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:getEndProtectTimeById",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getEndProtectTimeById'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_retUseSkin(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_retUseSkin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "ToolController:retUseSkin");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_retUseSkin'", nullptr);
            return 0;
        }
        cobj->retUseSkin(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:retUseSkin",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_retUseSkin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_removeLayerColor(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_removeLayerColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ToolController:removeLayerColor");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_removeLayerColor'", nullptr);
            return 0;
        }
        cobj->removeLayerColor(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:removeLayerColor",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_removeLayerColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_startTrimVipPoint(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_startTrimVipPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_startTrimVipPoint'", nullptr);
            return 0;
        }
        bool ret = cobj->startTrimVipPoint();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:startTrimVipPoint",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_startTrimVipPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getMerchante_state(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_getMerchante_state'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getMerchante_state'", nullptr);
            return 0;
        }
        int ret = cobj->getMerchante_state();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:getMerchante_state",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getMerchante_state'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_addTool(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_addTool'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:addTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_addTool'", nullptr);
            return 0;
        }
        cobj->addTool(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:addTool");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:addTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_addTool'", nullptr);
            return 0;
        }
        cobj->addTool(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        std::string arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:addTool");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:addTool");

        ok &= luaval_to_std_string(tolua_S, 4,&arg2, "ToolController:addTool");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_addTool'", nullptr);
            return 0;
        }
        cobj->addTool(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:addTool",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_addTool'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_useToolForFuse(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_useToolForFuse'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:useToolForFuse");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:useToolForFuse");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useToolForFuse'", nullptr);
            return 0;
        }
        bool ret = cobj->useToolForFuse(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ToolController:useToolForFuse");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ToolController:useToolForFuse");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "ToolController:useToolForFuse");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_useToolForFuse'", nullptr);
            return 0;
        }
        bool ret = cobj->useToolForFuse(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:useToolForFuse",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_useToolForFuse'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_setMerchante_animation(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_setMerchante_animation'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "ToolController:setMerchante_animation");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_setMerchante_animation'", nullptr);
            return 0;
        }
        cobj->setMerchante_animation(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:setMerchante_animation",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_setMerchante_animation'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_gotoStore(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ToolController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ToolController_gotoStore'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_gotoStore'", nullptr);
            return 0;
        }
        cobj->gotoStore();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:gotoStore",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_gotoStore'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ToolController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"ToolController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_getInstance'", nullptr);
            return 0;
        }
        ToolController* ret = ToolController::getInstance();
        object_to_luaval<ToolController>(tolua_S, "ToolController",(ToolController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "ToolController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_getInstance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_ToolController_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ToolController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ToolController_constructor'", nullptr);
            return 0;
        }
        cobj = new ToolController();
        tolua_pushusertype(tolua_S,(void*)cobj,"ToolController");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ToolController:ToolController",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ToolController_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_ToolController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ToolController)");
    return 0;
}

int lua_register_cocos2dx_if_ToolController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ToolController");
    tolua_cclass(tolua_S,"ToolController","ToolController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"ToolController");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_ToolController_constructor);
        tolua_function(tolua_S,"endTrimVipPoint",lua_cocos2dx_if_ToolController_endTrimVipPoint);
        tolua_function(tolua_S,"haveSkin",lua_cocos2dx_if_ToolController_haveSkin);
        tolua_function(tolua_S,"getToolInfoForLua",lua_cocos2dx_if_ToolController_getToolInfoForLua);
        tolua_function(tolua_S,"setMerchante_state",lua_cocos2dx_if_ToolController_setMerchante_state);
        tolua_function(tolua_S,"useSkin",lua_cocos2dx_if_ToolController_useSkin);
        tolua_function(tolua_S,"getMaincitySkin",lua_cocos2dx_if_ToolController_getMaincitySkin);
        tolua_function(tolua_S,"retBuyEquip",lua_cocos2dx_if_ToolController_retBuyEquip);
        tolua_function(tolua_S,"isProtectItem",lua_cocos2dx_if_ToolController_isProtectItem);
        tolua_function(tolua_S,"isNewVersionGoods",lua_cocos2dx_if_ToolController_isNewVersionGoods);
        tolua_function(tolua_S,"buyEquip",lua_cocos2dx_if_ToolController_buyEquip);
        tolua_function(tolua_S,"useTool",lua_cocos2dx_if_ToolController_useTool);
        tolua_function(tolua_S,"getMerchanteCostTip",lua_cocos2dx_if_ToolController_getMerchanteCostTip);
        tolua_function(tolua_S,"getMerchante_animation",lua_cocos2dx_if_ToolController_getMerchante_animation);
        tolua_function(tolua_S,"aniComplete",lua_cocos2dx_if_ToolController_aniComplete);
        tolua_function(tolua_S,"getEndProtectTimeById",lua_cocos2dx_if_ToolController_getEndProtectTimeById);
        tolua_function(tolua_S,"retUseSkin",lua_cocos2dx_if_ToolController_retUseSkin);
        tolua_function(tolua_S,"removeLayerColor",lua_cocos2dx_if_ToolController_removeLayerColor);
        tolua_function(tolua_S,"startTrimVipPoint",lua_cocos2dx_if_ToolController_startTrimVipPoint);
        tolua_function(tolua_S,"getMerchante_state",lua_cocos2dx_if_ToolController_getMerchante_state);
        tolua_function(tolua_S,"addTool",lua_cocos2dx_if_ToolController_addTool);
        tolua_function(tolua_S,"useToolForFuse",lua_cocos2dx_if_ToolController_useToolForFuse);
        tolua_function(tolua_S,"setMerchante_animation",lua_cocos2dx_if_ToolController_setMerchante_animation);
        tolua_function(tolua_S,"gotoStore",lua_cocos2dx_if_ToolController_gotoStore);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_ToolController_getInstance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ToolController).name();
    g_luaType[typeName] = "ToolController";
    g_typeCast["ToolController"] = "ToolController";
    return 1;
}

int lua_cocos2dx_if_FunBuildController_isExistBuildByTypeStarnum(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_isExistBuildByTypeStarnum'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:isExistBuildByTypeStarnum");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "FunBuildController:isExistBuildByTypeStarnum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_isExistBuildByTypeStarnum'", nullptr);
            return 0;
        }
        bool ret = cobj->isExistBuildByTypeStarnum(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:isExistBuildByTypeStarnum",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_isExistBuildByTypeStarnum'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getTalkTips(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getTalkTips'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getTalkTips'", nullptr);
            return 0;
        }
        std::string ret = cobj->getTalkTips();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getTalkTips",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getTalkTips'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getMaxOutPut(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getMaxOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getMaxOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getMaxOutPut'", nullptr);
            return 0;
        }
        int ret = cobj->getMaxOutPut(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getMaxOutPut",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getMaxOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getOutPutPerSecond(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getOutPutPerSecond'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getOutPutPerSecond");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getOutPutPerSecond'", nullptr);
            return 0;
        }
        double ret = cobj->getOutPutPerSecond(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getOutPutPerSecond",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getOutPutPerSecond'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getOutPutPreH(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getOutPutPreH'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getOutPutPreH");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getOutPutPreH'", nullptr);
            return 0;
        }
        int ret = cobj->getOutPutPreH(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getOutPutPreH",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getOutPutPreH'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getFunbuildForLua(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getFunbuildForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getFunbuildForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getFunbuildForLua'", nullptr);
            return 0;
        }
        FunBuildInfo* ret = cobj->getFunbuildForLua(arg0);
        object_to_luaval<FunBuildInfo>(tolua_S, "FunBuildInfo",(FunBuildInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getFunbuildForLua",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getFunbuildForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_checkOpenUpstar(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_checkOpenUpstar'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:checkOpenUpstar");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_checkOpenUpstar'", nullptr);
            return 0;
        }
        bool ret = cobj->checkOpenUpstar(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:checkOpenUpstar",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_checkOpenUpstar'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_isExistBuildByTypeLv(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_isExistBuildByTypeLv'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:isExistBuildByTypeLv");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "FunBuildController:isExistBuildByTypeLv");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_isExistBuildByTypeLv'", nullptr);
            return 0;
        }
        bool ret = cobj->isExistBuildByTypeLv(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:isExistBuildByTypeLv",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_isExistBuildByTypeLv'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_checkFreeTime(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_checkFreeTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_checkFreeTime'", nullptr);
            return 0;
        }
        cobj->checkFreeTime();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "FunBuildController:checkFreeTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_checkFreeTime'", nullptr);
            return 0;
        }
        cobj->checkFreeTime(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:checkFreeTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_checkFreeTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getMaxStarnumBuildByType(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getMaxStarnumBuildByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getMaxStarnumBuildByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getMaxStarnumBuildByType'", nullptr);
            return 0;
        }
        int ret = cobj->getMaxStarnumBuildByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getMaxStarnumBuildByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getMaxStarnumBuildByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_findBdRoPos(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_findBdRoPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_findBdRoPos'", nullptr);
            return 0;
        }
        int ret = cobj->findBdRoPos();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:findBdRoPos",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_findBdRoPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_canHavest(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_canHavest'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:canHavest");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_canHavest'", nullptr);
            return 0;
        }
        bool ret = cobj->canHavest(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:canHavest",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_canHavest'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_isReadyToUpstar(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_isReadyToUpstar'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:isReadyToUpstar");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_isReadyToUpstar'", nullptr);
            return 0;
        }
        bool ret = cobj->isReadyToUpstar(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:isReadyToUpstar",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_isReadyToUpstar'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getOutPut(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getOutPut'", nullptr);
            return 0;
        }
        int ret = cobj->getOutPut(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getOutPut",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getMaxLvBuildByType(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getMaxLvBuildByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getMaxLvBuildByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getMaxLvBuildByType'", nullptr);
            return 0;
        }
        int ret = cobj->getMaxLvBuildByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getMaxLvBuildByType");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "FunBuildController:getMaxLvBuildByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getMaxLvBuildByType'", nullptr);
            return 0;
        }
        int ret = cobj->getMaxLvBuildByType(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getMaxLvBuildByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getMaxLvBuildByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_orderBuild(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_orderBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "FunBuildController:orderBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_orderBuild'", nullptr);
            return 0;
        }
        std::string ret = cobj->orderBuild(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:orderBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_orderBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_canShowOutPut(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_canShowOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:canShowOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_canShowOutPut'", nullptr);
            return 0;
        }
        bool ret = cobj->canShowOutPut(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:canShowOutPut",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_canShowOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getWatchTowerStarLv(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getWatchTowerStarLv'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getWatchTowerStarLv'", nullptr);
            return 0;
        }
        int ret = cobj->getWatchTowerStarLv();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getWatchTowerStarLv",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getWatchTowerStarLv'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getStrory(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getStrory'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getStrory");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getStrory'", nullptr);
            return 0;
        }
        int ret = cobj->getStrory(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getStrory",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getStrory'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getBuildNumByType(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getBuildNumByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getBuildNumByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getBuildNumByType'", nullptr);
            return 0;
        }
        int ret = cobj->getBuildNumByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getBuildNumByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getBuildNumByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_isGigTileExist(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_isGigTileExist'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:isGigTileExist");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_isGigTileExist'", nullptr);
            return 0;
        }
        bool ret = cobj->isGigTileExist(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:isGigTileExist",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_isGigTileExist'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_hasGetOneStar(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_hasGetOneStar'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:hasGetOneStar");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_hasGetOneStar'", nullptr);
            return 0;
        }
        bool ret = cobj->hasGetOneStar(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:hasGetOneStar",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_hasGetOneStar'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getBuildIdByPos(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getBuildIdByPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getBuildIdByPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getBuildIdByPos'", nullptr);
            return 0;
        }
        int ret = cobj->getBuildIdByPos(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getBuildIdByPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getBuildIdByPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_isFullOutPut(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_isFullOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:isFullOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_isFullOutPut'", nullptr);
            return 0;
        }
        bool ret = cobj->isFullOutPut(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:isFullOutPut",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_isFullOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getBuildByPos(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getBuildByPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getBuildByPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getBuildByPos'", nullptr);
            return 0;
        }
        std::string ret = cobj->getBuildByPos(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getBuildByPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getBuildByPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getMainCityLv(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getMainCityLv'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getMainCityLv'", nullptr);
            return 0;
        }
        int ret = cobj->getMainCityLv();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getMainCityLv",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getMainCityLv'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getFullCostTime(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getFullCostTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getFullCostTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getFullCostTime'", nullptr);
            return 0;
        }
        int ret = cobj->getFullCostTime(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getFullCostTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getFullCostTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getTileType(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getTileType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getTileType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getTileType'", nullptr);
            return 0;
        }
        int ret = cobj->getTileType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getTileType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getTileType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getCanBoostBuild(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getCanBoostBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getCanBoostBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getCanBoostBuild'", nullptr);
            return 0;
        }
        int ret = cobj->getCanBoostBuild(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getCanBoostBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getCanBoostBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getBuildKey(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getBuildKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "FunBuildController:getBuildKey");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "FunBuildController:getBuildKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getBuildKey'", nullptr);
            return 0;
        }
        int ret = cobj->getBuildKey(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getBuildKey",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getBuildKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getTalkTipsTime(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (FunBuildController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_FunBuildController_getTalkTipsTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getTalkTipsTime'", nullptr);
            return 0;
        }
        int ret = cobj->getTalkTipsTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:getTalkTipsTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getTalkTipsTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_FunBuildController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"FunBuildController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_getInstance'", nullptr);
            return 0;
        }
        FunBuildController* ret = FunBuildController::getInstance();
        object_to_luaval<FunBuildController>(tolua_S, "FunBuildController",(FunBuildController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "FunBuildController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_getInstance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_FunBuildController_constructor(lua_State* tolua_S)
{
    int argc = 0;
    FunBuildController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_FunBuildController_constructor'", nullptr);
            return 0;
        }
        cobj = new FunBuildController();
        tolua_pushusertype(tolua_S,(void*)cobj,"FunBuildController");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "FunBuildController:FunBuildController",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_FunBuildController_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_FunBuildController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FunBuildController)");
    return 0;
}

int lua_register_cocos2dx_if_FunBuildController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"FunBuildController");
    tolua_cclass(tolua_S,"FunBuildController","FunBuildController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"FunBuildController");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_FunBuildController_constructor);
        tolua_function(tolua_S,"isExistBuildByTypeStarnum",lua_cocos2dx_if_FunBuildController_isExistBuildByTypeStarnum);
        tolua_function(tolua_S,"getTalkTips",lua_cocos2dx_if_FunBuildController_getTalkTips);
        tolua_function(tolua_S,"getMaxOutPut",lua_cocos2dx_if_FunBuildController_getMaxOutPut);
        tolua_function(tolua_S,"getOutPutPerSecond",lua_cocos2dx_if_FunBuildController_getOutPutPerSecond);
        tolua_function(tolua_S,"getOutPutPreH",lua_cocos2dx_if_FunBuildController_getOutPutPreH);
        tolua_function(tolua_S,"getFunbuildForLua",lua_cocos2dx_if_FunBuildController_getFunbuildForLua);
        tolua_function(tolua_S,"checkOpenUpstar",lua_cocos2dx_if_FunBuildController_checkOpenUpstar);
        tolua_function(tolua_S,"isExistBuildByTypeLv",lua_cocos2dx_if_FunBuildController_isExistBuildByTypeLv);
        tolua_function(tolua_S,"checkFreeTime",lua_cocos2dx_if_FunBuildController_checkFreeTime);
        tolua_function(tolua_S,"getMaxStarnumBuildByType",lua_cocos2dx_if_FunBuildController_getMaxStarnumBuildByType);
        tolua_function(tolua_S,"findBdRoPos",lua_cocos2dx_if_FunBuildController_findBdRoPos);
        tolua_function(tolua_S,"canHavest",lua_cocos2dx_if_FunBuildController_canHavest);
        tolua_function(tolua_S,"isReadyToUpstar",lua_cocos2dx_if_FunBuildController_isReadyToUpstar);
        tolua_function(tolua_S,"getOutPut",lua_cocos2dx_if_FunBuildController_getOutPut);
        tolua_function(tolua_S,"getMaxLvBuildByType",lua_cocos2dx_if_FunBuildController_getMaxLvBuildByType);
        tolua_function(tolua_S,"orderBuild",lua_cocos2dx_if_FunBuildController_orderBuild);
        tolua_function(tolua_S,"canShowOutPut",lua_cocos2dx_if_FunBuildController_canShowOutPut);
        tolua_function(tolua_S,"getWatchTowerStarLv",lua_cocos2dx_if_FunBuildController_getWatchTowerStarLv);
        tolua_function(tolua_S,"getStrory",lua_cocos2dx_if_FunBuildController_getStrory);
        tolua_function(tolua_S,"getBuildNumByType",lua_cocos2dx_if_FunBuildController_getBuildNumByType);
        tolua_function(tolua_S,"isGigTileExist",lua_cocos2dx_if_FunBuildController_isGigTileExist);
        tolua_function(tolua_S,"hasGetOneStar",lua_cocos2dx_if_FunBuildController_hasGetOneStar);
        tolua_function(tolua_S,"getBuildIdByPos",lua_cocos2dx_if_FunBuildController_getBuildIdByPos);
        tolua_function(tolua_S,"isFullOutPut",lua_cocos2dx_if_FunBuildController_isFullOutPut);
        tolua_function(tolua_S,"getBuildByPos",lua_cocos2dx_if_FunBuildController_getBuildByPos);
        tolua_function(tolua_S,"getMainCityLv",lua_cocos2dx_if_FunBuildController_getMainCityLv);
        tolua_function(tolua_S,"getFullCostTime",lua_cocos2dx_if_FunBuildController_getFullCostTime);
        tolua_function(tolua_S,"getTileType",lua_cocos2dx_if_FunBuildController_getTileType);
        tolua_function(tolua_S,"getCanBoostBuild",lua_cocos2dx_if_FunBuildController_getCanBoostBuild);
        tolua_function(tolua_S,"getBuildKey",lua_cocos2dx_if_FunBuildController_getBuildKey);
        tolua_function(tolua_S,"getTalkTipsTime",lua_cocos2dx_if_FunBuildController_getTalkTipsTime);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_FunBuildController_getInstance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(FunBuildController).name();
    g_luaType[typeName] = "FunBuildController";
    g_typeCast["FunBuildController"] = "FunBuildController";
    return 1;
}

int lua_cocos2dx_if_MarchInfo_getCurrentLineTimeLeft(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineTimeLeft'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineTimeLeft'", nullptr);
            return 0;
        }
        double ret = cobj->getCurrentLineTimeLeft();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:getCurrentLineTimeLeft",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineTimeLeft'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_updateSoldiers(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_updateSoldiers'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Dictionary* arg0;

        ok &= luaval_to_object<cocos2d::__Dictionary>(tolua_S, 2, "CCDictionary",&arg0, "MarchInfo:updateSoldiers");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_updateSoldiers'", nullptr);
            return 0;
        }
        cobj->updateSoldiers(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:updateSoldiers",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_updateSoldiers'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_getDigEndTime(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getDigEndTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_getDigEndTime'", nullptr);
            return 0;
        }
        double ret = cobj->getDigEndTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:getDigEndTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_getDigEndTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_isStatus(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_isStatus'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "MarchInfo:isStatus");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_isStatus'", nullptr);
            return 0;
        }
        bool ret = cobj->isStatus(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:isStatus",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_isStatus'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_getCurrentLineTotalTime(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineTotalTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineTotalTime'", nullptr);
            return 0;
        }
        double ret = cobj->getCurrentLineTotalTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:getCurrentLineTotalTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineTotalTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_isDelay(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_isDelay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_isDelay'", nullptr);
            return 0;
        }
        bool ret = cobj->isDelay();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:isDelay",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_isDelay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_getCurrentLineIndex(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineIndex'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineIndex'", nullptr);
            return 0;
        }
        int ret = cobj->getCurrentLineIndex();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:getCurrentLineIndex",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_getCurrentLineIndex'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_getCurrentPos(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getCurrentPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "MarchInfo:getCurrentPos");

        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "MarchInfo:getCurrentPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_getCurrentPos'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getCurrentPos(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:getCurrentPos",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_getCurrentPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_isLightning(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_isLightning'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_isLightning'", nullptr);
            return 0;
        }
        bool ret = cobj->isLightning();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:isLightning",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_isLightning'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_getMarchColor(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getMarchColor'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_getMarchColor'", nullptr);
            return 0;
        }
        cocos2d::Color3B ret = cobj->getMarchColor();
        color3b_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:getMarchColor",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_getMarchColor'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_calculateCurrentLine(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_calculateCurrentLine'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "MarchInfo:calculateCurrentLine");

        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "MarchInfo:calculateCurrentLine");

        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "MarchInfo:calculateCurrentLine");

        ok &= luaval_to_vec2(tolua_S, 5, &arg3, "MarchInfo:calculateCurrentLine");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_calculateCurrentLine'", nullptr);
            return 0;
        }
        cobj->calculateCurrentLine(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:calculateCurrentLine",argc, 4);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_calculateCurrentLine'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_calculateCurrentLineLeft(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_calculateCurrentLineLeft'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "MarchInfo:calculateCurrentLineLeft");

        ok &= luaval_to_vec2(tolua_S, 3, &arg1, "MarchInfo:calculateCurrentLineLeft");

        ok &= luaval_to_vec2(tolua_S, 4, &arg2, "MarchInfo:calculateCurrentLineLeft");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_calculateCurrentLineLeft'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->calculateCurrentLineLeft(arg0, arg1, arg2);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:calculateCurrentLineLeft",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_calculateCurrentLineLeft'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_MarchInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MarchInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_MarchInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new MarchInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"MarchInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "MarchInfo:MarchInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_MarchInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_MarchInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MarchInfo)");
    return 0;
}

static int lua_cocos2dx_if_MarchInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	MarchInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"MarchInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_MarchInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (MarchInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "serverId") == 0){
		lua_pushinteger(tolua_S, cobj->serverId);
	}else if (strcmp(property.c_str(), "uuid") == 0){
		lua_pushstring(tolua_S, cobj->uuid.c_str());
	}else if (strcmp(property.c_str(), "ouid") == 0){
		lua_pushstring(tolua_S, cobj->ouid.c_str());
	}else if (strcmp(property.c_str(), "monsterLevel") == 0){
		lua_pushinteger(tolua_S, cobj->monsterLevel);
	}else if (strcmp(property.c_str(), "monsterCount") == 0){
		lua_pushinteger(tolua_S, cobj->monsterCount);
	}else if (strcmp(property.c_str(), "startPointIndex") == 0){
		lua_pushnumber(tolua_S, cobj->startPointIndex);
	}else if (strcmp(property.c_str(), "endPointIndex") == 0){
		lua_pushnumber(tolua_S, cobj->endPointIndex);
	}else if (strcmp(property.c_str(), "ownerType") == 0){
		lua_pushinteger(tolua_S, cobj->ownerType);
	}else if (strcmp(property.c_str(), "targetType") == 0){
		lua_pushinteger(tolua_S, cobj->targetType);
	}else if (strcmp(property.c_str(), "marchType") == 0){
		lua_pushinteger(tolua_S, cobj->marchType);
	}else if (strcmp(property.c_str(), "stateType") == 0){
		lua_pushinteger(tolua_S, cobj->stateType);
	}else if (strcmp(property.c_str(), "marchColor") == 0){
		lua_pushnumber(tolua_S, cobj->marchColor);
	}else if (strcmp(property.c_str(), "playerName") == 0){
		lua_pushstring(tolua_S, cobj->playerName.c_str());
	}else if (strcmp(property.c_str(), "startStamp") == 0){
		lua_pushnumber(tolua_S, cobj->startStamp);
	}else if (strcmp(property.c_str(), "endStamp") == 0){
		lua_pushnumber(tolua_S, cobj->endStamp);
	}else if (strcmp(property.c_str(), "allianceTeamCreateTime") == 0){
		lua_pushnumber(tolua_S, cobj->allianceTeamCreateTime);
	}else if (strcmp(property.c_str(), "teamUid") == 0){
		lua_pushstring(tolua_S, cobj->teamUid.c_str());
	}else if (strcmp(property.c_str(), "speedX") == 0){
		lua_pushnumber(tolua_S, cobj->speedX);
	}else if (strcmp(property.c_str(), "speedY") == 0){
		lua_pushnumber(tolua_S, cobj->speedY);
	}else if (strcmp(property.c_str(), "rotate") == 0){
		lua_pushnumber(tolua_S, cobj->rotate);
	}else if (strcmp(property.c_str(), "isChangingSpeed") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isChangingSpeed);
	}else if (strcmp(property.c_str(), "action") == 0){
		lua_pushinteger(tolua_S, cobj->action);
	}else if (strcmp(property.c_str(), "marchTag") == 0){
		lua_pushnumber(tolua_S, cobj->marchTag);
	}else if (strcmp(property.c_str(), "marchToIndexLeague") == 0){
		lua_pushstring(tolua_S, cobj->marchToIndexLeague.c_str());
	}else if (strcmp(property.c_str(), "asn") == 0){
		lua_pushstring(tolua_S, cobj->asn.c_str());
	}else if (strcmp(property.c_str(), "troopMax") == 0){
		lua_pushinteger(tolua_S, cobj->troopMax);
	}else if (strcmp(property.c_str(), "digSpeed") == 0){
		lua_pushnumber(tolua_S, cobj->digSpeed);
	}else if (strcmp(property.c_str(), "digStartTime") == 0){
		lua_pushnumber(tolua_S, cobj->digStartTime);
	}else if (strcmp(property.c_str(), "digStartNum") == 0){
		lua_pushinteger(tolua_S, cobj->digStartNum);
	}else if (strcmp(property.c_str(), "changeCollectSpdTime") == 0){
		lua_pushnumber(tolua_S, cobj->changeCollectSpdTime);
	}else if (strcmp(property.c_str(), "territoryStat") == 0){
		lua_pushinteger(tolua_S, cobj->territoryStat);
	}else if (strcmp(property.c_str(), "territoryStartTime") == 0){
		lua_pushnumber(tolua_S, cobj->territoryStartTime);
	}else if (strcmp(property.c_str(), "territoryFinishTime") == 0){
		lua_pushnumber(tolua_S, cobj->territoryFinishTime);
	}else if (strcmp(property.c_str(), "treasureMapFinishTime") == 0){
		lua_pushnumber(tolua_S, cobj->treasureMapFinishTime);
	}else if (strcmp(property.c_str(), "mazeStartTime") == 0){
		lua_pushnumber(tolua_S, cobj->mazeStartTime);
	}else if (strcmp(property.c_str(), "mazeEndTime") == 0){
		lua_pushnumber(tolua_S, cobj->mazeEndTime);
	}else if (strcmp(property.c_str(), "mt") == 0){
		lua_pushnumber(tolua_S, cobj->mt);
	}else if (strcmp(property.c_str(), "isKilled") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isKilled);
	}else if (strcmp(property.c_str(), "officer") == 0){
		lua_pushstring(tolua_S, cobj->officer.c_str());
	}else if (strcmp(property.c_str(), "slowDown") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->slowDown);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_MarchInfo_newindex(lua_State* tolua_S)
{
	MarchInfo* cobj = *(MarchInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "serverId") == 0){
		cobj->serverId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "uuid") == 0){
		cobj->uuid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "ouid") == 0){
		cobj->ouid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "monsterLevel") == 0){
		cobj->monsterLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "monsterCount") == 0){
		cobj->monsterCount= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startPointIndex") == 0){
		cobj->startPointIndex= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "endPointIndex") == 0){
		cobj->endPointIndex= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "ownerType") == 0){
		cobj->ownerType= (PlayerType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "targetType") == 0){
		cobj->targetType= (WorldCityType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "marchType") == 0){
		cobj->marchType= (MarchMethodType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "stateType") == 0){
		cobj->stateType= (MarchStateType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "marchColor") == 0){
		cobj->marchColor= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "playerName") == 0){
		cobj->playerName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startStamp") == 0){
		cobj->startStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "endStamp") == 0){
		cobj->endStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceTeamCreateTime") == 0){
		cobj->allianceTeamCreateTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "teamUid") == 0){
		cobj->teamUid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "speedX") == 0){
		cobj->speedX= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "speedY") == 0){
		cobj->speedY= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "rotate") == 0){
		cobj->rotate= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isChangingSpeed") == 0){
		cobj->isChangingSpeed= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "action") == 0){
		cobj->action= (MarchEndAction)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "marchTag") == 0){
		cobj->marchTag= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "marchToIndexLeague") == 0){
		cobj->marchToIndexLeague= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "asn") == 0){
		cobj->asn= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "troopMax") == 0){
		cobj->troopMax= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "digSpeed") == 0){
		cobj->digSpeed= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "digStartTime") == 0){
		cobj->digStartTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "digStartNum") == 0){
		cobj->digStartNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "changeCollectSpdTime") == 0){
		cobj->changeCollectSpdTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "territoryStat") == 0){
		cobj->territoryStat= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "territoryStartTime") == 0){
		cobj->territoryStartTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "territoryFinishTime") == 0){
		cobj->territoryFinishTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "treasureMapFinishTime") == 0){
		cobj->treasureMapFinishTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mazeStartTime") == 0){
		cobj->mazeStartTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mazeEndTime") == 0){
		cobj->mazeEndTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mt") == 0){
		cobj->mt= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isKilled") == 0){
		cobj->isKilled= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "officer") == 0){
		cobj->officer= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "slowDown") == 0){
		cobj->slowDown= (bool)lua_toboolean(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_MarchInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MarchInfo");
    tolua_cclass(tolua_S,"MarchInfo","MarchInfo","",nullptr);

    tolua_beginmodule(tolua_S,"MarchInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_MarchInfo_constructor);
        tolua_function(tolua_S,"getCurrentLineTimeLeft",lua_cocos2dx_if_MarchInfo_getCurrentLineTimeLeft);
        tolua_function(tolua_S,"updateSoldiers",lua_cocos2dx_if_MarchInfo_updateSoldiers);
        tolua_function(tolua_S,"getDigEndTime",lua_cocos2dx_if_MarchInfo_getDigEndTime);
        tolua_function(tolua_S,"isStatus",lua_cocos2dx_if_MarchInfo_isStatus);
        tolua_function(tolua_S,"getCurrentLineTotalTime",lua_cocos2dx_if_MarchInfo_getCurrentLineTotalTime);
        tolua_function(tolua_S,"isDelay",lua_cocos2dx_if_MarchInfo_isDelay);
        tolua_function(tolua_S,"getCurrentLineIndex",lua_cocos2dx_if_MarchInfo_getCurrentLineIndex);
        tolua_function(tolua_S,"getCurrentPos",lua_cocos2dx_if_MarchInfo_getCurrentPos);
        tolua_function(tolua_S,"isLightning",lua_cocos2dx_if_MarchInfo_isLightning);
        tolua_function(tolua_S,"getMarchColor",lua_cocos2dx_if_MarchInfo_getMarchColor);
        tolua_function(tolua_S,"calculateCurrentLine",lua_cocos2dx_if_MarchInfo_calculateCurrentLine);
        tolua_function(tolua_S,"calculateCurrentLineLeft",lua_cocos2dx_if_MarchInfo_calculateCurrentLineLeft);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_MarchInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_MarchInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MarchInfo).name();
    g_luaType[typeName] = "MarchInfo";
    g_typeCast["MarchInfo"] = "MarchInfo";
    return 1;
}

int lua_cocos2dx_if_WorldCityInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WorldCityInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldCityInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new WorldCityInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"WorldCityInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldCityInfo:WorldCityInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldCityInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_WorldCityInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (WorldCityInfo)");
    return 0;
}

static int lua_cocos2dx_if_WorldCityInfo_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	WorldCityInfo* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"WorldCityInfo",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldCityInfo_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (WorldCityInfo*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "cityIndex") == 0){
		lua_pushinteger(tolua_S, cobj->cityIndex);
	}else if (strcmp(property.c_str(), "parentCityIndex") == 0){
		lua_pushinteger(tolua_S, cobj->parentCityIndex);
	}else if (strcmp(property.c_str(), "parentAAreCicyIndex") == 0){
		lua_pushinteger(tolua_S, cobj->parentAAreCicyIndex);
	}else if (strcmp(property.c_str(), "cityType") == 0){
		lua_pushinteger(tolua_S, cobj->cityType);
	}else if (strcmp(property.c_str(), "cityName") == 0){
		lua_pushstring(tolua_S, cobj->cityName.c_str());
	}else if (strcmp(property.c_str(), "playerName") == 0){
		lua_pushstring(tolua_S, cobj->playerName.c_str());
	}else if (strcmp(property.c_str(), "pic") == 0){
		lua_pushstring(tolua_S, cobj->pic.c_str());
	}else if (strcmp(property.c_str(), "resource") == 0){
		ResourceTileInfotoLua(tolua_S, cobj->resource);
	}else if (strcmp(property.c_str(), "battle") == 0){
		BattleTileInfotoLua(tolua_S, cobj->battle);
	}else if (strcmp(property.c_str(), "fieldMonsterInfo") == 0){
		FieldMonsterInfotoLua(tolua_S, cobj->fieldMonsterInfo);
	}else if (strcmp(property.c_str(), "m_allianceAreaInfo") == 0){
		AllianceAreaInfotoLua(tolua_S, cobj->m_allianceAreaInfo);
	}else if (strcmp(property.c_str(), "m_superMineInfo") == 0){
		SuperMineInfotoLua(tolua_S, cobj->m_superMineInfo);
	}else if (strcmp(property.c_str(), "m_towerInfo") == 0){
		TowerInfotoLua(tolua_S, cobj->m_towerInfo);
	}else if (strcmp(property.c_str(), "m_bannerInfo") == 0){
		BannerInfotoLua(tolua_S, cobj->m_bannerInfo);
	}else if (strcmp(property.c_str(), "m_warehouseInfo") == 0){
		WarehouseInfotoLua(tolua_S, cobj->m_warehouseInfo);
	}else if (strcmp(property.c_str(), "trebuchetInfo") == 0){
		TrebuchetInfotoLua(tolua_S, cobj->trebuchetInfo);
	}else if (strcmp(property.c_str(), "kingBuildInfo") == 0){
		KingActivityBuildInfotoLua(tolua_S, cobj->kingBuildInfo);
	}else if (strcmp(property.c_str(), "m_allianceAreaOwnerInfo") == 0){
		AllianceAreaOwnerInfotoLua(tolua_S, cobj->m_allianceAreaOwnerInfo);
	}else if (strcmp(property.c_str(), "dragonTileInfo") == 0){
		DragonTileInfotoLua(tolua_S, cobj->dragonTileInfo);
	}else if (strcmp(property.c_str(), "isScouted") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isScouted);
	}else if (strcmp(property.c_str(), "cityOriginType") == 0){
		lua_pushstring(tolua_S, cobj->cityOriginType.c_str());
	}else if (strcmp(property.c_str(), "leagueAsn") == 0){
		lua_pushstring(tolua_S, cobj->leagueAsn.c_str());
	}else if (strcmp(property.c_str(), "tileGid") == 0){
		lua_pushinteger(tolua_S, cobj->tileGid);
	}else if (strcmp(property.c_str(), "startStamp") == 0){
		lua_pushnumber(tolua_S, cobj->startStamp);
	}else if (strcmp(property.c_str(), "refreshStamp") == 0){
		lua_pushnumber(tolua_S, cobj->refreshStamp);
	}else if (strcmp(property.c_str(), "allianceName") == 0){
		lua_pushstring(tolua_S, cobj->allianceName.c_str());
	}else if (strcmp(property.c_str(), "throne_pic") == 0){
		lua_pushstring(tolua_S, cobj->throne_pic.c_str());
	}else if (strcmp(property.c_str(), "locateTime") == 0){
		lua_pushnumber(tolua_S, cobj->locateTime);
	}else if (strcmp(property.c_str(), "mc_state") == 0){
		lua_pushinteger(tolua_S, cobj->mc_state);
	}else if (strcmp(property.c_str(), "m_isInAArea") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_isInAArea);
	}else if (strcmp(property.c_str(), "m_isMyAArea") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_isMyAArea);
	}else if (strcmp(property.c_str(), "m_forceActive") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_forceActive);
	}else if (strcmp(property.c_str(), "m_isInTowerRange") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_isInTowerRange);
	}else if (strcmp(property.c_str(), "m_isInTowerAttackRange") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->m_isInTowerAttackRange);
	}else if (strcmp(property.c_str(), "m_bigRangeAid") == 0){
		lua_pushstring(tolua_S, cobj->m_bigRangeAid.c_str());
	}else if (strcmp(property.c_str(), "m_parentTowerIndex") == 0){
		lua_pushinteger(tolua_S, cobj->m_parentTowerIndex);
	}else if (strcmp(property.c_str(), "m_parentTowerIndex2") == 0){
		lua_pushinteger(tolua_S, cobj->m_parentTowerIndex2);
	}else if (strcmp(property.c_str(), "m_aArea_id") == 0){
		lua_pushstring(tolua_S, cobj->m_aArea_id.c_str());
	}else if (strcmp(property.c_str(), "m_aArea_pointId") == 0){
		lua_pushinteger(tolua_S, cobj->m_aArea_pointId);
	}else if (strcmp(property.c_str(), "m_aArea_isActive") == 0){
		lua_pushinteger(tolua_S, cobj->m_aArea_isActive);
	}else if (strcmp(property.c_str(), "m_aArea_name") == 0){
		lua_pushstring(tolua_S, cobj->m_aArea_name.c_str());
	}else if (strcmp(property.c_str(), "m_aArea_simpleName") == 0){
		lua_pushstring(tolua_S, cobj->m_aArea_simpleName.c_str());
	}else if (strcmp(property.c_str(), "m_aArea_flag") == 0){
		lua_pushstring(tolua_S, cobj->m_aArea_flag.c_str());
	}else if (strcmp(property.c_str(), "m_aArea_lv") == 0){
		lua_pushinteger(tolua_S, cobj->m_aArea_lv);
	}else if (strcmp(property.c_str(), "m_aArea_nickname") == 0){
		lua_pushstring(tolua_S, cobj->m_aArea_nickname.c_str());
	}else if (strcmp(property.c_str(), "m_aArea_direction") == 0){
		lua_pushstring(tolua_S, cobj->m_aArea_direction.c_str());
	}else if (strcmp(property.c_str(), "cross") == 0){
		lua_pushinteger(tolua_S, cobj->cross);
	}else if (strcmp(property.c_str(), "srcServer") == 0){
		lua_pushinteger(tolua_S, cobj->srcServer);
	}else if (strcmp(property.c_str(), "winNum") == 0){
		lua_pushinteger(tolua_S, cobj->winNum);
	}else if (strcmp(property.c_str(), "tileServerId") == 0){
		lua_pushinteger(tolua_S, cobj->tileServerId);
	}else if (strcmp(property.c_str(), "beDetected_Time") == 0){
		lua_pushnumber(tolua_S, cobj->beDetected_Time);
	}else if (strcmp(property.c_str(), "beDetected_mailUid") == 0){
		lua_pushstring(tolua_S, cobj->beDetected_mailUid.c_str());
	}else if (strcmp(property.c_str(), "isUpdatePlayerInfo") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isUpdatePlayerInfo);
	}else if (strcmp(property.c_str(), "openTime") == 0){
		lua_pushnumber(tolua_S, cobj->openTime);
	}else if (strcmp(property.c_str(), "startTime") == 0){
		lua_pushnumber(tolua_S, cobj->startTime);
	}else if (strcmp(property.c_str(), "endTime") == 0){
		lua_pushnumber(tolua_S, cobj->endTime);
	}else if (strcmp(property.c_str(), "isUpdateTime") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isUpdateTime);
	}else if (strcmp(property.c_str(), "luaType") == 0){
		lua_pushinteger(tolua_S, cobj->luaType);
	}else if (strcmp(property.c_str(), "luaResName") == 0){
		lua_pushstring(tolua_S, cobj->luaResName.c_str());
	}else if (strcmp(property.c_str(), "otherJson") == 0){
		lua_pushstring(tolua_S, cobj->otherJson.c_str());
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_WorldCityInfo_newindex(lua_State* tolua_S)
{
	WorldCityInfo* cobj = *(WorldCityInfo**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "cityIndex") == 0){
		cobj->cityIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "parentCityIndex") == 0){
		cobj->parentCityIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "parentAAreCicyIndex") == 0){
		cobj->parentAAreCicyIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityType") == 0){
		cobj->cityType= (WorldCityType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityName") == 0){
		cobj->cityName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "playerName") == 0){
		cobj->playerName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "pic") == 0){
		cobj->pic= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isScouted") == 0){
		cobj->isScouted= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cityOriginType") == 0){
		cobj->cityOriginType= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "leagueAsn") == 0){
		cobj->leagueAsn= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "tileGid") == 0){
		cobj->tileGid= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startStamp") == 0){
		cobj->startStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "refreshStamp") == 0){
		cobj->refreshStamp= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceName") == 0){
		cobj->allianceName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "throne_pic") == 0){
		cobj->throne_pic= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "locateTime") == 0){
		cobj->locateTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "mc_state") == 0){
		cobj->mc_state= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_isInAArea") == 0){
		cobj->m_isInAArea= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_isMyAArea") == 0){
		cobj->m_isMyAArea= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_forceActive") == 0){
		cobj->m_forceActive= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_isInTowerRange") == 0){
		cobj->m_isInTowerRange= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_isInTowerAttackRange") == 0){
		cobj->m_isInTowerAttackRange= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_bigRangeAid") == 0){
		cobj->m_bigRangeAid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_parentTowerIndex") == 0){
		cobj->m_parentTowerIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_parentTowerIndex2") == 0){
		cobj->m_parentTowerIndex2= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_id") == 0){
		cobj->m_aArea_id= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_pointId") == 0){
		cobj->m_aArea_pointId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_isActive") == 0){
		cobj->m_aArea_isActive= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_name") == 0){
		cobj->m_aArea_name= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_simpleName") == 0){
		cobj->m_aArea_simpleName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_flag") == 0){
		cobj->m_aArea_flag= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_lv") == 0){
		cobj->m_aArea_lv= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_nickname") == 0){
		cobj->m_aArea_nickname= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aArea_direction") == 0){
		cobj->m_aArea_direction= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "cross") == 0){
		cobj->cross= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "srcServer") == 0){
		cobj->srcServer= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "winNum") == 0){
		cobj->winNum= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "tileServerId") == 0){
		cobj->tileServerId= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "beDetected_Time") == 0){
		cobj->beDetected_Time= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "beDetected_mailUid") == 0){
		cobj->beDetected_mailUid= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isUpdatePlayerInfo") == 0){
		cobj->isUpdatePlayerInfo= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "openTime") == 0){
		cobj->openTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startTime") == 0){
		cobj->startTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "endTime") == 0){
		cobj->endTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isUpdateTime") == 0){
		cobj->isUpdateTime= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "luaType") == 0){
		cobj->luaType= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "luaResName") == 0){
		cobj->luaResName= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "otherJson") == 0){
		cobj->otherJson= (string)lua_tostring(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_WorldCityInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WorldCityInfo");
    tolua_cclass(tolua_S,"WorldCityInfo","WorldCityInfo","",nullptr);

    tolua_beginmodule(tolua_S,"WorldCityInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_WorldCityInfo_constructor);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_WorldCityInfo_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_WorldCityInfo_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WorldCityInfo).name();
    g_luaType[typeName] = "WorldCityInfo";
    g_typeCast["WorldCityInfo"] = "WorldCityInfo";
    return 1;
}

int lua_cocos2dx_if_WorldController_showMarchAlert(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_showMarchAlert'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:showMarchAlert");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_showMarchAlert'", nullptr);
            return 0;
        }
        cobj->showMarchAlert(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:showMarchAlert",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_showMarchAlert'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_isInCrossMap(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_isInCrossMap'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isInCrossMap'", nullptr);
            return 0;
        }
        bool ret = cobj->isInCrossMap();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:isInCrossMap",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isInCrossMap'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getTime(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getTime'", nullptr);
            return 0;
        }
        double ret = cobj->getTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_isInFresherForbidenArea(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_isInFresherForbidenArea'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isInFresherForbidenArea");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isInFresherForbidenArea'", nullptr);
            return 0;
        }
        bool ret = cobj->isInFresherForbidenArea(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isInFresherForbidenArea");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "WorldController:isInFresherForbidenArea");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isInFresherForbidenArea'", nullptr);
            return 0;
        }
        bool ret = cobj->isInFresherForbidenArea(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:isInFresherForbidenArea",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isInFresherForbidenArea'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_isHasMonsterAttackMarch(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_isHasMonsterAttackMarch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isHasMonsterAttackMarch'", nullptr);
            return 0;
        }
        bool ret = cobj->isHasMonsterAttackMarch();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:isHasMonsterAttackMarch",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isHasMonsterAttackMarch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getCurrentMarchCount(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getCurrentMarchCount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getCurrentMarchCount'", nullptr);
            return 0;
        }
        unsigned int ret = cobj->getCurrentMarchCount();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getCurrentMarchCount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getCurrentMarchCount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMonsterUsePower(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMonsterUsePower'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getMonsterUsePower");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMonsterUsePower'", nullptr);
            return 0;
        }
        int ret = cobj->getMonsterUsePower(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMonsterUsePower",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMonsterUsePower'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_doResumeForGLSource(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_doResumeForGLSource'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:doResumeForGLSource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_doResumeForGLSource'", nullptr);
            return 0;
        }
        cobj->doResumeForGLSource(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:doResumeForGLSource",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_doResumeForGLSource'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_resetTime(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_resetTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:resetTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_resetTime'", nullptr);
            return 0;
        }
        cobj->resetTime(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:resetTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_resetTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_autoAddStamine(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_autoAddStamine'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_autoAddStamine'", nullptr);
            return 0;
        }
        cobj->autoAddStamine();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:autoAddStamine",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_autoAddStamine'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getChangeViewPosByServerPos(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getChangeViewPosByServerPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getChangeViewPosByServerPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getChangeViewPosByServerPos'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getChangeViewPosByServerPos(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        bool arg1;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getChangeViewPosByServerPos");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "WorldController:getChangeViewPosByServerPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getChangeViewPosByServerPos'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getChangeViewPosByServerPos(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getChangeViewPosByServerPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getChangeViewPosByServerPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getFavoriteKey(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getFavoriteKey'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getFavoriteKey");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getFavoriteKey");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getFavoriteKey'", nullptr);
            return 0;
        }
        double ret = cobj->getFavoriteKey(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getFavoriteKey",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getFavoriteKey'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_changeScoutStateByName(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_changeScoutStateByName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        int arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "WorldController:changeScoutStateByName");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:changeScoutStateByName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_changeScoutStateByName'", nullptr);
            return 0;
        }
        cobj->changeScoutStateByName(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:changeScoutStateByName",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_changeScoutStateByName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_doWhenBackToGame(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_doWhenBackToGame'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::__Array* arg0;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "WorldController:doWhenBackToGame");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_doWhenBackToGame'", nullptr);
            return 0;
        }
        cobj->doWhenBackToGame(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        cocos2d::__Array* arg0;
        bool arg1;

        ok &= luaval_to_object<cocos2d::__Array>(tolua_S, 2, "CCArray",&arg0, "WorldController:doWhenBackToGame");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "WorldController:doWhenBackToGame");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_doWhenBackToGame'", nullptr);
            return 0;
        }
        cobj->doWhenBackToGame(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:doWhenBackToGame",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_doWhenBackToGame'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMinSpeed(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMinSpeed'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMinSpeed'", nullptr);
            return 0;
        }
        int ret = cobj->getMinSpeed();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMinSpeed",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMinSpeed'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_isCityCanSettle(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_isCityCanSettle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned int arg0;
        int arg1;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:isCityCanSettle");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:isCityCanSettle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isCityCanSettle'", nullptr);
            return 0;
        }
        bool ret = cobj->isCityCanSettle(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:isCityCanSettle",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isCityCanSettle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_removeAllQueue(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_removeAllQueue'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_removeAllQueue'", nullptr);
            return 0;
        }
        cobj->removeAllQueue();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:removeAllQueue",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_removeAllQueue'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getisAsyEnd(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getisAsyEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getisAsyEnd'", nullptr);
            return 0;
        }
        bool ret = cobj->getisAsyEnd();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getisAsyEnd",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getisAsyEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_enterMap(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_enterMap'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 3) {
            MapType arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:enterMap");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:enterMap");

            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:enterMap");

            if (!ok) { break; }
            cobj->enterMap(arg0, arg1, arg2);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj->enterMap();
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            MapType arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:enterMap");

            if (!ok) { break; }
            cobj->enterMap(arg0);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "WorldController:enterMap",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_enterMap'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getRoundServer(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getRoundServer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getRoundServer");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getRoundServer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getRoundServer'", nullptr);
            return 0;
        }
        int ret = cobj->getRoundServer(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getRoundServer",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getRoundServer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_initServerMapPos(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_initServerMapPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_initServerMapPos'", nullptr);
            return 0;
        }
        cobj->initServerMapPos();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:initServerMapPos",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_initServerMapPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMaxMarchCount(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMaxMarchCount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMaxMarchCount'", nullptr);
            return 0;
        }
        unsigned int ret = cobj->getMaxMarchCount();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMaxMarchCount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMaxMarchCount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_inFavoriteForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_inFavoriteForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        WorldCityInfo* arg0;
        int arg1;

        ok &= luaval_to_object<WorldCityInfo>(tolua_S, 2, "WorldCityInfo",&arg0, "WorldController:inFavoriteForLua");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:inFavoriteForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_inFavoriteForLua'", nullptr);
            return 0;
        }
        bool ret = cobj->inFavoriteForLua(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:inFavoriteForLua",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_inFavoriteForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_selfThroneForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_selfThroneForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        WorldCityInfo* arg0;

        ok &= luaval_to_object<WorldCityInfo>(tolua_S, 2, "WorldCityInfo",&arg0, "WorldController:selfThroneForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_selfThroneForLua'", nullptr);
            return 0;
        }
        bool ret = cobj->selfThroneForLua(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:selfThroneForLua",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_selfThroneForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_resetStaime(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_resetStaime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        double arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:resetStaime");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "WorldController:resetStaime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_resetStaime'", nullptr);
            return 0;
        }
        cobj->resetStaime(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:resetStaime",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_resetStaime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_isInMap(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_isInMap'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:isInMap");

            if (!ok) { break; }
            bool ret = cobj->isInMap(arg0);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:isInMap");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:isInMap");

            if (!ok) { break; }
            bool ret = cobj->isInMap(arg0, arg1);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:isInMap");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:isInMap");

            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:isInMap");

            if (!ok) { break; }
            bool ret = cobj->isInMap(arg0, arg1, arg2);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isInMap");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:isInMap");

            if (!ok) { break; }
            bool ret = cobj->isInMap(arg0, arg1);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isInMap");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:isInMap");

            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:isInMap");

            if (!ok) { break; }
            bool ret = cobj->isInMap(arg0, arg1, arg2);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 4) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isInMap");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:isInMap");

            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:isInMap");

            if (!ok) { break; }
            int arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:isInMap");

            if (!ok) { break; }
            bool ret = cobj->isInMap(arg0, arg1, arg2, arg3);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "WorldController:isInMap",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isInMap'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getCrossPointForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getCrossPointForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        MarchInfo* arg0;

        ok &= luaval_to_object<MarchInfo>(tolua_S, 2, "MarchInfo",&arg0, "WorldController:getCrossPointForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getCrossPointForLua'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getCrossPointForLua(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    if (argc == 2) 
    {
        MarchInfo* arg0;
        double arg1;

        ok &= luaval_to_object<MarchInfo>(tolua_S, 2, "MarchInfo",&arg0, "WorldController:getCrossPointForLua");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "WorldController:getCrossPointForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getCrossPointForLua'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getCrossPointForLua(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getCrossPointForLua",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getCrossPointForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_openMarchDeploy(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned int arg0;
        unsigned int arg1;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        unsigned int arg0;
        unsigned int arg1;
        int arg2;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        unsigned int arg0;
        unsigned int arg1;
        int arg2;
        int arg3;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        unsigned int arg0;
        unsigned int arg1;
        int arg2;
        int arg3;
        int arg4;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6) 
    {
        unsigned int arg0;
        unsigned int arg1;
        int arg2;
        int arg3;
        int arg4;
        std::string arg5;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "WorldController:openMarchDeploy");

        ok &= luaval_to_std_string(tolua_S, 7,&arg5, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 7) 
    {
        unsigned int arg0;
        unsigned int arg1;
        int arg2;
        int arg3;
        int arg4;
        std::string arg5;
        int arg6;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "WorldController:openMarchDeploy");

        ok &= luaval_to_std_string(tolua_S, 7,&arg5, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 8,(int *)&arg6, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 8) 
    {
        unsigned int arg0;
        unsigned int arg1;
        int arg2;
        int arg3;
        int arg4;
        std::string arg5;
        int arg6;
        double arg7;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:openMarchDeploy");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "WorldController:openMarchDeploy");

        ok &= luaval_to_std_string(tolua_S, 7,&arg5, "WorldController:openMarchDeploy");

        ok &= luaval_to_int32(tolua_S, 8,(int *)&arg6, "WorldController:openMarchDeploy");

        ok &= luaval_to_number(tolua_S, 9,&arg7, "WorldController:openMarchDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'", nullptr);
            return 0;
        }
        cobj->openMarchDeploy(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:openMarchDeploy",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_openMarchDeploy'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_marchTimeForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_marchTimeForLua'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            double arg0;
            ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            double arg0;
            ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            MarchMethodType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1, arg2);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 4) {
            double arg0;
            ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            MarchMethodType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double arg3;
            ok &= luaval_to_number(tolua_S, 5,&arg3, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1, arg2, arg3);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            MarchInfo* arg0;
            ok &= luaval_to_object<MarchInfo>(tolua_S, 2, "MarchInfo",&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1, arg2);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 4) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            MarchMethodType arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1, arg2, arg3);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 5) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            MarchMethodType arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            bool arg4;
            ok &= luaval_to_boolean(tolua_S, 6,&arg4, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1, arg2, arg3, arg4);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 6) {
            int arg0;
            ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            WorldCityType arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            MarchMethodType arg3;
            ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            bool arg4;
            ok &= luaval_to_boolean(tolua_S, 6,&arg4, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            bool arg5;
            ok &= luaval_to_boolean(tolua_S, 7,&arg5, "WorldController:marchTimeForLua");

            if (!ok) { break; }
            double ret = cobj->marchTimeForLua(arg0, arg1, arg2, arg3, arg4, arg5);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "WorldController:marchTimeForLua",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_marchTimeForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_clearMarchInfo(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_clearMarchInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_clearMarchInfo'", nullptr);
            return 0;
        }
        cobj->clearMarchInfo();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:clearMarchInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_clearMarchInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_setisAsyEnd(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_setisAsyEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "WorldController:setisAsyEnd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_setisAsyEnd'", nullptr);
            return 0;
        }
        cobj->setisAsyEnd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:setisAsyEnd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_setisAsyEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_isFourGrid(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_isFourGrid'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        WorldCityType arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isFourGrid");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isFourGrid'", nullptr);
            return 0;
        }
        bool ret = cobj->isFourGrid(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:isFourGrid",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isFourGrid'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMapXByType(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMapXByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        MapType arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getMapXByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMapXByType'", nullptr);
            return 0;
        }
        int ret = cobj->getMapXByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMapXByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMapXByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getKingActivityStateByType(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getKingActivityStateByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        WorldActivityType arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getKingActivityStateByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getKingActivityStateByType'", nullptr);
            return 0;
        }
        int ret = (int)cobj->getKingActivityStateByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getKingActivityStateByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getKingActivityStateByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_onTroopBack(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_onTroopBack'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "WorldController:onTroopBack");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_onTroopBack'", nullptr);
            return 0;
        }
        cobj->onTroopBack(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:onTroopBack",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_onTroopBack'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getChangePointByTypeNum(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getChangePointByTypeNum'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getChangePointByTypeNum");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getChangePointByTypeNum'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getChangePointByTypeNum(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getChangePointByTypeNum",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getChangePointByTypeNum'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_canAttackMonster(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_canAttackMonster'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_canAttackMonster'", nullptr);
            return 0;
        }
        bool ret = cobj->canAttackMonster();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "WorldController:canAttackMonster");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_canAttackMonster'", nullptr);
            return 0;
        }
        bool ret = cobj->canAttackMonster(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:canAttackMonster",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_canAttackMonster'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_settouchIndex(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_settouchIndex'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:settouchIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_settouchIndex'", nullptr);
            return 0;
        }
        cobj->settouchIndex(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:settouchIndex",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_settouchIndex'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMapYByType(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMapYByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        MapType arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getMapYByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMapYByType'", nullptr);
            return 0;
        }
        int ret = cobj->getMapYByType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMapYByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMapYByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getDisForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getDisForLua'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            WorldCityInfo* arg0;
            ok &= luaval_to_object<WorldCityInfo>(tolua_S, 2, "WorldCityInfo",&arg0, "WorldController:getDisForLua");

            if (!ok) { break; }
            double ret = cobj->getDisForLua(arg0);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            WorldCityInfo* arg0;
            ok &= luaval_to_object<WorldCityInfo>(tolua_S, 2, "WorldCityInfo",&arg0, "WorldController:getDisForLua");

            if (!ok) { break; }
            WorldCityInfo* arg1;
            ok &= luaval_to_object<WorldCityInfo>(tolua_S, 3, "WorldCityInfo",&arg1, "WorldController:getDisForLua");

            if (!ok) { break; }
            double ret = cobj->getDisForLua(arg0, arg1);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 5) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getDisForLua");

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            ok &= luaval_to_vec2(tolua_S, 3, &arg1, "WorldController:getDisForLua");

            if (!ok) { break; }
            bool arg2;
            ok &= luaval_to_boolean(tolua_S, 4,&arg2, "WorldController:getDisForLua");

            if (!ok) { break; }
            bool arg3;
            ok &= luaval_to_boolean(tolua_S, 5,&arg3, "WorldController:getDisForLua");

            if (!ok) { break; }
            bool arg4;
            ok &= luaval_to_boolean(tolua_S, 6,&arg4, "WorldController:getDisForLua");

            if (!ok) { break; }
            double ret = cobj->getDisForLua(arg0, arg1, arg2, arg3, arg4);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getDisForLua");

            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,&arg1, "WorldController:getDisForLua");

            if (!ok) { break; }
            bool arg2;
            ok &= luaval_to_boolean(tolua_S, 4,&arg2, "WorldController:getDisForLua");

            if (!ok) { break; }
            double ret = cobj->getDisForLua(arg0, arg1, arg2);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "WorldController:getDisForLua",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getDisForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_setCastleSkinSwitch(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_setCastleSkinSwitch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "WorldController:setCastleSkinSwitch");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_setCastleSkinSwitch'", nullptr);
            return 0;
        }
        cobj->setCastleSkinSwitch(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:setCastleSkinSwitch",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_setCastleSkinSwitch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getCastleSkinSwitch(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getCastleSkinSwitch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getCastleSkinSwitch'", nullptr);
            return 0;
        }
        bool ret = cobj->getCastleSkinSwitch();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getCastleSkinSwitch",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getCastleSkinSwitch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getWalkTime(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getWalkTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:getWalkTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getWalkTime'", nullptr);
            return 0;
        }
        int ret = cobj->getWalkTime(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getWalkTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getWalkTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getServerList(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getServerList'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getServerList'", nullptr);
            return 0;
        }
        cobj->getServerList();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getServerList",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getServerList'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getStatmineIntervalTime(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getStatmineIntervalTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getStatmineIntervalTime'", nullptr);
            return 0;
        }
        int ret = cobj->getStatmineIntervalTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getStatmineIntervalTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getStatmineIntervalTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getKingActivityState(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getKingActivityState'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        double arg0;
        double arg1;
        double arg2;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldController:getKingActivityState");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "WorldController:getKingActivityState");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "WorldController:getKingActivityState");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getKingActivityState'", nullptr);
            return 0;
        }
        int ret = (int)cobj->getKingActivityState(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getKingActivityState",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getKingActivityState'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMarchTag(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMarchTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMarchTag'", nullptr);
            return 0;
        }
        unsigned int ret = cobj->getMarchTag();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMarchTag",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMarchTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_selfTrebuchetForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_selfTrebuchetForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        WorldCityInfo* arg0;

        ok &= luaval_to_object<WorldCityInfo>(tolua_S, 2, "WorldCityInfo",&arg0, "WorldController:selfTrebuchetForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_selfTrebuchetForLua'", nullptr);
            return 0;
        }
        bool ret = cobj->selfTrebuchetForLua(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:selfTrebuchetForLua",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_selfTrebuchetForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getServerViewPosByPos(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getServerViewPosByPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getServerViewPosByPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getServerViewPosByPos'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getServerViewPosByPos(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getServerViewPosByPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getServerViewPosByPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getSelfCityIndex(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getSelfCityIndex'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getSelfCityIndex'", nullptr);
            return 0;
        }
        int ret = cobj->getSelfCityIndex();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getSelfCityIndex",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getSelfCityIndex'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getMapTypeByDefault(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getMapTypeByDefault'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getMapTypeByDefault'", nullptr);
            return 0;
        }
        int ret = (int)cobj->getMapTypeByDefault();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:getMapTypeByDefault",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getMapTypeByDefault'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_gettouchIndex(lua_State* tolua_S)
{
    int argc = 0;
    WorldController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_gettouchIndex'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_gettouchIndex'", nullptr);
            return 0;
        }
        int ret = cobj->gettouchIndex();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldController:gettouchIndex",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_gettouchIndex'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldController_getServerIdByServerPoint(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::Vec2 arg0;
        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getServerIdByServerPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getServerIdByServerPoint'", nullptr);
            return 0;
        }
        int ret = WorldController::getServerIdByServerPoint(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:getServerIdByServerPoint",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getServerIdByServerPoint'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldController_isInSelfServer(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:isInSelfServer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_isInSelfServer'", nullptr);
            return 0;
        }
        bool ret = WorldController::isInSelfServer(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:isInSelfServer",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_isInSelfServer'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getInstance'", nullptr);
            return 0;
        }
        WorldController* ret = WorldController::getInstance();
        object_to_luaval<WorldController>(tolua_S, "WorldController",(WorldController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getInstance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldController_getPointByMapTypeAndIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned int arg0;
        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:getPointByMapTypeAndIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getPointByMapTypeAndIndex'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = WorldController::getPointByMapTypeAndIndex(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    if (argc == 2)
    {
        unsigned int arg0;
        MapType arg1;
        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:getPointByMapTypeAndIndex");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getPointByMapTypeAndIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getPointByMapTypeAndIndex'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = WorldController::getPointByMapTypeAndIndex(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:getPointByMapTypeAndIndex",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getPointByMapTypeAndIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldController_getIndexByPoint(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        cocos2d::Vec2 arg0;
        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getIndexByPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getIndexByPoint'", nullptr);
            return 0;
        }
        unsigned int ret = WorldController::getIndexByPoint(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 2)
    {
        cocos2d::Vec2 arg0;
        int arg1;
        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getIndexByPoint");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getIndexByPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getIndexByPoint'", nullptr);
            return 0;
        }
        unsigned int ret = WorldController::getIndexByPoint(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    if (argc == 3)
    {
        cocos2d::Vec2 arg0;
        int arg1;
        int arg2;
        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldController:getIndexByPoint");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getIndexByPoint");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:getIndexByPoint");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getIndexByPoint'", nullptr);
            return 0;
        }
        unsigned int ret = WorldController::getIndexByPoint(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:getIndexByPoint",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getIndexByPoint'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldController_getPointByIndex(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned int arg0;
        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:getPointByIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getPointByIndex'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = WorldController::getPointByIndex(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    if (argc == 2)
    {
        unsigned int arg0;
        int arg1;
        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:getPointByIndex");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getPointByIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getPointByIndex'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = WorldController::getPointByIndex(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    if (argc == 3)
    {
        unsigned int arg0;
        int arg1;
        int arg2;
        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "WorldController:getPointByIndex");
        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldController:getPointByIndex");
        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldController:getPointByIndex");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getPointByIndex'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = WorldController::getPointByIndex(arg0, arg1, arg2);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:getPointByIndex",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getPointByIndex'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldController_getServerPosById(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldController:getServerPosById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldController_getServerPosById'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = WorldController::getServerPosById(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldController:getServerPosById",argc, 1);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldController_getServerPosById'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_WorldController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (WorldController)");
    return 0;
}

static int lua_cocos2dx_if_WorldController_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	WorldController* cobj = nullptr;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
	if (!tolua_isusertype(tolua_S,1,"WorldController",0,&tolua_err)){
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldController_getProperty'", nullptr);
		return 0;
	}
#endif

	cobj = (WorldController*)tolua_tousertype(tolua_S,1,0);
	int n = lua_gettop(tolua_S);
	string property = lua_tostring(tolua_S, n);
	if (strcmp(property.c_str(), "_current_tile_count_x") == 0){
		lua_pushinteger(tolua_S, cobj->_current_tile_count_x);
	}else if (strcmp(property.c_str(), "_current_tile_count_y") == 0){
		lua_pushinteger(tolua_S, cobj->_current_tile_count_y);
	}else if (strcmp(property.c_str(), "_current_map_width") == 0){
		lua_pushinteger(tolua_S, cobj->_current_map_width);
	}else if (strcmp(property.c_str(), "_current_map_height") == 0){
		lua_pushinteger(tolua_S, cobj->_current_map_height);
	}else if (strcmp(property.c_str(), "_current_index_limit") == 0){
		lua_pushnumber(tolua_S, cobj->_current_index_limit);
	}else if (strcmp(property.c_str(), "_current_map_has_relic_area") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->_current_map_has_relic_area);
	}else if (strcmp(property.c_str(), "serverMap_count_x") == 0){
		lua_pushinteger(tolua_S, cobj->serverMap_count_x);
	}else if (strcmp(property.c_str(), "serverMap_count_y") == 0){
		lua_pushinteger(tolua_S, cobj->serverMap_count_y);
	}else if (strcmp(property.c_str(), "serverMap_width") == 0){
		lua_pushinteger(tolua_S, cobj->serverMap_width);
	}else if (strcmp(property.c_str(), "serverMap_height") == 0){
		lua_pushinteger(tolua_S, cobj->serverMap_height);
	}else if (strcmp(property.c_str(), "startTimeStampOffset") == 0){
		lua_pushnumber(tolua_S, cobj->startTimeStampOffset);
	}else if (strcmp(property.c_str(), "currentMapZoom") == 0){
		lua_pushnumber(tolua_S, cobj->currentMapZoom);
	}else if (strcmp(property.c_str(), "initTime") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->initTime);
	}else if (strcmp(property.c_str(), "isInWorld") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isInWorld);
	}else if (strcmp(property.c_str(), "initWorld") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->initWorld);
	}else if (strcmp(property.c_str(), "initKingFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->initKingFlag);
	}else if (strcmp(property.c_str(), "alertProectFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->alertProectFlag);
	}else if (strcmp(property.c_str(), "m_alertStateFlag") == 0){
		lua_pushinteger(tolua_S, cobj->m_alertStateFlag);
	}else if (strcmp(property.c_str(), "marchingAlertFlag") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->marchingAlertFlag);
	}else if (strcmp(property.c_str(), "forceUPdate") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUPdate);
	}else if (strcmp(property.c_str(), "firstInWorld") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->firstInWorld);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryTile") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryTile);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryInfo") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryInfo);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryResourceTile") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryResourceTile);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryTowerTile") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryTowerTile);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryWarehouseTile") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryWarehouseTile);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryBannerTile") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryBannerTile);
	}else if (strcmp(property.c_str(), "forceUpdateTerritoryResourceDetail") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->forceUpdateTerritoryResourceDetail);
	}else if (strcmp(property.c_str(), "marchTagCounter") == 0){
		lua_pushnumber(tolua_S, cobj->marchTagCounter);
	}else if (strcmp(property.c_str(), "currentMapType") == 0){
		lua_pushinteger(tolua_S, cobj->currentMapType);
	}else if (strcmp(property.c_str(), "monsterAttStartTime") == 0){
		lua_pushnumber(tolua_S, cobj->monsterAttStartTime);
	}else if (strcmp(property.c_str(), "monsterAttEndTime") == 0){
		lua_pushnumber(tolua_S, cobj->monsterAttEndTime);
	}else if(strcmp(property.c_str(), "m_selfMarchUuid") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->m_selfMarchUuid.begin();
		int idx = 1;
		while(iter!=cobj->m_selfMarchUuid.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushnumber(tolua_S, (*iter).first);
			lua_pushstring(tolua_S, (*iter).second.c_str());
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "freePortCnt") == 0){
		lua_pushinteger(tolua_S, cobj->freePortCnt);
	}else if (strcmp(property.c_str(), "isInfoTake") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isInfoTake);
	}else if (strcmp(property.c_str(), "currentStamine") == 0){
		lua_pushinteger(tolua_S, cobj->currentStamine);
	}else if (strcmp(property.c_str(), "lastStamineTime") == 0){
		lua_pushnumber(tolua_S, cobj->lastStamineTime);
	}else if (strcmp(property.c_str(), "lastInputX") == 0){
		lua_pushinteger(tolua_S, cobj->lastInputX);
	}else if (strcmp(property.c_str(), "lastInputY") == 0){
		lua_pushinteger(tolua_S, cobj->lastInputY);
	}else if (strcmp(property.c_str(), "lastInputZ") == 0){
		lua_pushinteger(tolua_S, cobj->lastInputZ);
	}else if (strcmp(property.c_str(), "openTargetIndex") == 0){
		lua_pushinteger(tolua_S, cobj->openTargetIndex);
	}else if (strcmp(property.c_str(), "openMarchId") == 0){
		lua_pushstring(tolua_S, cobj->openMarchId.c_str());
	}else if (strcmp(property.c_str(), "openAddmonsterId") == 0){
		lua_pushstring(tolua_S, cobj->openAddmonsterId.c_str());
	}else if (strcmp(property.c_str(), "currentMonsterLevel") == 0){
		lua_pushinteger(tolua_S, cobj->currentMonsterLevel);
	}else if (strcmp(property.c_str(), "isServerCrossOpen") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isServerCrossOpen);
	}else if (strcmp(property.c_str(), "isRefreshQueue") == 0){
		tolua_pushboolean(tolua_S,(bool)cobj->isRefreshQueue);
	}else if (strcmp(property.c_str(), "playAniTargetIndex") == 0){
		lua_pushinteger(tolua_S, cobj->playAniTargetIndex);
	}else if (strcmp(property.c_str(), "buildAllianceTerritory") == 0){
		lua_pushinteger(tolua_S, cobj->buildAllianceTerritory);
	}else if (strcmp(property.c_str(), "allianceTerritoryId") == 0){
		lua_pushstring(tolua_S, cobj->allianceTerritoryId.c_str());
	}else if (strcmp(property.c_str(), "allianceTerritoryIndex") == 0){
		lua_pushinteger(tolua_S, cobj->allianceTerritoryIndex);
	}else if (strcmp(property.c_str(), "isDetectFlag") == 0){
		lua_pushinteger(tolua_S, cobj->isDetectFlag);
	}else if (strcmp(property.c_str(), "scoutTime") == 0){
		lua_pushinteger(tolua_S, cobj->scoutTime);
	}else if(strcmp(property.c_str(), "resTileKey") == 0){
		lua_newtable(tolua_S);
		auto iter = cobj->resTileKey.begin();
		int idx = 1;
		while(iter!=cobj->resTileKey.end()){
			lua_pushinteger(tolua_S, idx);
			lua_newtable(tolua_S);
			lua_pushstring(tolua_S, (*iter).first.c_str());
			lua_pushinteger(tolua_S, (*iter).second);
			lua_settable(tolua_S, -3);
			lua_settable(tolua_S, -3);
			++idx;
			++iter;
		}
	}else if (strcmp(property.c_str(), "allianceTerritoryType") == 0){
		lua_pushinteger(tolua_S, cobj->allianceTerritoryType);
	}else if (strcmp(property.c_str(), "allianceTerritoryBanner") == 0){
		lua_pushstring(tolua_S, cobj->allianceTerritoryBanner.c_str());
	}else if (strcmp(property.c_str(), "m_bAAreaCost") == 0){
		lua_pushinteger(tolua_S, cobj->m_bAAreaCost);
	}else if (strcmp(property.c_str(), "m_aTerritory10") == 0){
		lua_pushinteger(tolua_S, cobj->m_aTerritory10);
	}else if (strcmp(property.c_str(), "m_aTerritory11") == 0){
		lua_pushinteger(tolua_S, cobj->m_aTerritory11);
	}else if (strcmp(property.c_str(), "m_aTerritory12") == 0){
		lua_pushinteger(tolua_S, cobj->m_aTerritory12);
	}else if (strcmp(property.c_str(), "m_territoryBannerCost") == 0){
		lua_pushinteger(tolua_S, cobj->m_territoryBannerCost);
	}else if (strcmp(property.c_str(), "effectTag") == 0){
		lua_pushinteger(tolua_S, cobj->effectTag);
	}else if (strcmp(property.c_str(), "monsterCountry") == 0){
		lua_pushstring(tolua_S, cobj->monsterCountry.c_str());
	}else if (strcmp(property.c_str(), "monsterSkinId") == 0){
		lua_pushinteger(tolua_S, cobj->monsterSkinId);
	}else {
		return 0;
	}
	return 1;
}
static int lua_cocos2dx_if_WorldController_newindex(lua_State* tolua_S)
{
	WorldController* cobj = *(WorldController**)lua_topointer(tolua_S, 1);
	if (strcmp(lua_tostring(tolua_S, 2), "_current_tile_count_x") == 0){
		cobj->_current_tile_count_x= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "_current_tile_count_y") == 0){
		cobj->_current_tile_count_y= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "_current_map_width") == 0){
		cobj->_current_map_width= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "_current_map_height") == 0){
		cobj->_current_map_height= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "_current_index_limit") == 0){
		cobj->_current_index_limit= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "_current_map_has_relic_area") == 0){
		cobj->_current_map_has_relic_area= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverMap_count_x") == 0){
		cobj->serverMap_count_x= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverMap_count_y") == 0){
		cobj->serverMap_count_y= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverMap_width") == 0){
		cobj->serverMap_width= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "serverMap_height") == 0){
		cobj->serverMap_height= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "startTimeStampOffset") == 0){
		cobj->startTimeStampOffset= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentMapZoom") == 0){
		cobj->currentMapZoom= (float)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "initTime") == 0){
		cobj->initTime= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isInWorld") == 0){
		cobj->isInWorld= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "initWorld") == 0){
		cobj->initWorld= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "initKingFlag") == 0){
		cobj->initKingFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "alertProectFlag") == 0){
		cobj->alertProectFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_alertStateFlag") == 0){
		cobj->m_alertStateFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "marchingAlertFlag") == 0){
		cobj->marchingAlertFlag= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUPdate") == 0){
		cobj->forceUPdate= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "firstInWorld") == 0){
		cobj->firstInWorld= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryTile") == 0){
		cobj->forceUpdateTerritoryTile= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryInfo") == 0){
		cobj->forceUpdateTerritoryInfo= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryResourceTile") == 0){
		cobj->forceUpdateTerritoryResourceTile= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryTowerTile") == 0){
		cobj->forceUpdateTerritoryTowerTile= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryWarehouseTile") == 0){
		cobj->forceUpdateTerritoryWarehouseTile= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryBannerTile") == 0){
		cobj->forceUpdateTerritoryBannerTile= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "forceUpdateTerritoryResourceDetail") == 0){
		cobj->forceUpdateTerritoryResourceDetail= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "marchTagCounter") == 0){
		cobj->marchTagCounter= (unsigned int)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentMapType") == 0){
		cobj->currentMapType= (MapType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "monsterAttStartTime") == 0){
		cobj->monsterAttStartTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "monsterAttEndTime") == 0){
		cobj->monsterAttEndTime= (time_t)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "freePortCnt") == 0){
		cobj->freePortCnt= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isInfoTake") == 0){
		cobj->isInfoTake= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentStamine") == 0){
		cobj->currentStamine= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastStamineTime") == 0){
		cobj->lastStamineTime= (double)lua_tonumber(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastInputX") == 0){
		cobj->lastInputX= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastInputY") == 0){
		cobj->lastInputY= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "lastInputZ") == 0){
		cobj->lastInputZ= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "openTargetIndex") == 0){
		cobj->openTargetIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "openMarchId") == 0){
		cobj->openMarchId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "openAddmonsterId") == 0){
		cobj->openAddmonsterId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "currentMonsterLevel") == 0){
		cobj->currentMonsterLevel= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isServerCrossOpen") == 0){
		cobj->isServerCrossOpen= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isRefreshQueue") == 0){
		cobj->isRefreshQueue= (bool)lua_toboolean(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "playAniTargetIndex") == 0){
		cobj->playAniTargetIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "buildAllianceTerritory") == 0){
		cobj->buildAllianceTerritory= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceTerritoryId") == 0){
		cobj->allianceTerritoryId= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceTerritoryIndex") == 0){
		cobj->allianceTerritoryIndex= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "isDetectFlag") == 0){
		cobj->isDetectFlag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "scoutTime") == 0){
		cobj->scoutTime= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceTerritoryType") == 0){
		cobj->allianceTerritoryType= (WorldCityType)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "allianceTerritoryBanner") == 0){
		cobj->allianceTerritoryBanner= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_bAAreaCost") == 0){
		cobj->m_bAAreaCost= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aTerritory10") == 0){
		cobj->m_aTerritory10= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aTerritory11") == 0){
		cobj->m_aTerritory11= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_aTerritory12") == 0){
		cobj->m_aTerritory12= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "m_territoryBannerCost") == 0){
		cobj->m_territoryBannerCost= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "effectTag") == 0){
		cobj->effectTag= (int)lua_tointeger(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "monsterCountry") == 0){
		cobj->monsterCountry= (string)lua_tostring(tolua_S, 3);
	}else if (strcmp(lua_tostring(tolua_S, 2), "monsterSkinId") == 0){
		cobj->monsterSkinId= (int)lua_tointeger(tolua_S, 3);
	}else {

	}
	return 0;
}
int lua_register_cocos2dx_if_WorldController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WorldController");
    tolua_cclass(tolua_S,"WorldController","WorldController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"WorldController");
        tolua_function(tolua_S,"showMarchAlert",lua_cocos2dx_if_WorldController_showMarchAlert);
        tolua_function(tolua_S,"isInCrossMap",lua_cocos2dx_if_WorldController_isInCrossMap);
        tolua_function(tolua_S,"getTime",lua_cocos2dx_if_WorldController_getTime);
        tolua_function(tolua_S,"isInFresherForbidenArea",lua_cocos2dx_if_WorldController_isInFresherForbidenArea);
        tolua_function(tolua_S,"isHasMonsterAttackMarch",lua_cocos2dx_if_WorldController_isHasMonsterAttackMarch);
        tolua_function(tolua_S,"getCurrentMarchCount",lua_cocos2dx_if_WorldController_getCurrentMarchCount);
        tolua_function(tolua_S,"getMonsterUsePower",lua_cocos2dx_if_WorldController_getMonsterUsePower);
        tolua_function(tolua_S,"doResumeForGLSource",lua_cocos2dx_if_WorldController_doResumeForGLSource);
        tolua_function(tolua_S,"resetTime",lua_cocos2dx_if_WorldController_resetTime);
        tolua_function(tolua_S,"autoAddStamine",lua_cocos2dx_if_WorldController_autoAddStamine);
        tolua_function(tolua_S,"getChangeViewPosByServerPos",lua_cocos2dx_if_WorldController_getChangeViewPosByServerPos);
        tolua_function(tolua_S,"getFavoriteKey",lua_cocos2dx_if_WorldController_getFavoriteKey);
        tolua_function(tolua_S,"changeScoutStateByName",lua_cocos2dx_if_WorldController_changeScoutStateByName);
        tolua_function(tolua_S,"doWhenBackToGame",lua_cocos2dx_if_WorldController_doWhenBackToGame);
        tolua_function(tolua_S,"getMinSpeed",lua_cocos2dx_if_WorldController_getMinSpeed);
        tolua_function(tolua_S,"isCityCanSettle",lua_cocos2dx_if_WorldController_isCityCanSettle);
        tolua_function(tolua_S,"removeAllQueue",lua_cocos2dx_if_WorldController_removeAllQueue);
        tolua_function(tolua_S,"getisAsyEnd",lua_cocos2dx_if_WorldController_getisAsyEnd);
        tolua_function(tolua_S,"enterMap",lua_cocos2dx_if_WorldController_enterMap);
        tolua_function(tolua_S,"getRoundServer",lua_cocos2dx_if_WorldController_getRoundServer);
        tolua_function(tolua_S,"initServerMapPos",lua_cocos2dx_if_WorldController_initServerMapPos);
        tolua_function(tolua_S,"getMaxMarchCount",lua_cocos2dx_if_WorldController_getMaxMarchCount);
        tolua_function(tolua_S,"inFavoriteForLua",lua_cocos2dx_if_WorldController_inFavoriteForLua);
        tolua_function(tolua_S,"selfThroneForLua",lua_cocos2dx_if_WorldController_selfThroneForLua);
        tolua_function(tolua_S,"resetStaime",lua_cocos2dx_if_WorldController_resetStaime);
        tolua_function(tolua_S,"isInMap",lua_cocos2dx_if_WorldController_isInMap);
        tolua_function(tolua_S,"getCrossPointForLua",lua_cocos2dx_if_WorldController_getCrossPointForLua);
        tolua_function(tolua_S,"openMarchDeploy",lua_cocos2dx_if_WorldController_openMarchDeploy);
        tolua_function(tolua_S,"marchTimeForLua",lua_cocos2dx_if_WorldController_marchTimeForLua);
        tolua_function(tolua_S,"clearMarchInfo",lua_cocos2dx_if_WorldController_clearMarchInfo);
        tolua_function(tolua_S,"setisAsyEnd",lua_cocos2dx_if_WorldController_setisAsyEnd);
        tolua_function(tolua_S,"isFourGrid",lua_cocos2dx_if_WorldController_isFourGrid);
        tolua_function(tolua_S,"getMapXByType",lua_cocos2dx_if_WorldController_getMapXByType);
        tolua_function(tolua_S,"getKingActivityStateByType",lua_cocos2dx_if_WorldController_getKingActivityStateByType);
        tolua_function(tolua_S,"onTroopBack",lua_cocos2dx_if_WorldController_onTroopBack);
        tolua_function(tolua_S,"getChangePointByTypeNum",lua_cocos2dx_if_WorldController_getChangePointByTypeNum);
        tolua_function(tolua_S,"canAttackMonster",lua_cocos2dx_if_WorldController_canAttackMonster);
        tolua_function(tolua_S,"settouchIndex",lua_cocos2dx_if_WorldController_settouchIndex);
        tolua_function(tolua_S,"getMapYByType",lua_cocos2dx_if_WorldController_getMapYByType);
        tolua_function(tolua_S,"getDisForLua",lua_cocos2dx_if_WorldController_getDisForLua);
        tolua_function(tolua_S,"setCastleSkinSwitch",lua_cocos2dx_if_WorldController_setCastleSkinSwitch);
        tolua_function(tolua_S,"getCastleSkinSwitch",lua_cocos2dx_if_WorldController_getCastleSkinSwitch);
        tolua_function(tolua_S,"getWalkTime",lua_cocos2dx_if_WorldController_getWalkTime);
        tolua_function(tolua_S,"getServerList",lua_cocos2dx_if_WorldController_getServerList);
        tolua_function(tolua_S,"getStatmineIntervalTime",lua_cocos2dx_if_WorldController_getStatmineIntervalTime);
        tolua_function(tolua_S,"getKingActivityState",lua_cocos2dx_if_WorldController_getKingActivityState);
        tolua_function(tolua_S,"getMarchTag",lua_cocos2dx_if_WorldController_getMarchTag);
        tolua_function(tolua_S,"selfTrebuchetForLua",lua_cocos2dx_if_WorldController_selfTrebuchetForLua);
        tolua_function(tolua_S,"getServerViewPosByPos",lua_cocos2dx_if_WorldController_getServerViewPosByPos);
        tolua_function(tolua_S,"getSelfCityIndex",lua_cocos2dx_if_WorldController_getSelfCityIndex);
        tolua_function(tolua_S,"getMapTypeByDefault",lua_cocos2dx_if_WorldController_getMapTypeByDefault);
        tolua_function(tolua_S,"gettouchIndex",lua_cocos2dx_if_WorldController_gettouchIndex);
        tolua_function(tolua_S,"getServerIdByServerPoint", lua_cocos2dx_if_WorldController_getServerIdByServerPoint);
        tolua_function(tolua_S,"isInSelfServer", lua_cocos2dx_if_WorldController_isInSelfServer);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_WorldController_getInstance);
        tolua_function(tolua_S,"getPointByMapTypeAndIndex", lua_cocos2dx_if_WorldController_getPointByMapTypeAndIndex);
        tolua_function(tolua_S,"getIndexByPoint", lua_cocos2dx_if_WorldController_getIndexByPoint);
        tolua_function(tolua_S,"getPointByIndex", lua_cocos2dx_if_WorldController_getPointByIndex);
        tolua_function(tolua_S,"getServerPosById", lua_cocos2dx_if_WorldController_getServerPosById);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_if_WorldController_getProperty);
		tolua_function(tolua_S,"__newindex",lua_cocos2dx_if_WorldController_newindex);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WorldController).name();
    g_luaType[typeName] = "WorldController";
    g_typeCast["WorldController"] = "WorldController";
    return 1;
}

int lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonState(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonState'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            cocos2d::extension::ControlButton* arg0;
            ok &= luaval_to_object<cocos2d::extension::ControlButton>(tolua_S, 2, "cc.ControlButton",&arg0, "NewBaseTileLuaInfo:getButtonState");

            if (!ok) { break; }
            int ret = cobj->getButtonState(arg0);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:getButtonState");

            if (!ok) { break; }
            int ret = cobj->getButtonState(arg0);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "NewBaseTileLuaInfo:getButtonState",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonState'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_onEnter(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_onEnter'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_onEnter'", nullptr);
            return 0;
        }
        cobj->onEnter();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:onEnter",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_onEnter'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_addNameNode(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_addNameNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_addNameNode'", nullptr);
            return 0;
        }
        cobj->addNameNode();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:addNameNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_addNameNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_initTile(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_initTile'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_initTile'", nullptr);
            return 0;
        }
        bool ret = cobj->initTile();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:initTile");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_initTile'", nullptr);
            return 0;
        }
        bool ret = cobj->initTile(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        bool arg0;
        bool arg1;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:initTile");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "NewBaseTileLuaInfo:initTile");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_initTile'", nullptr);
            return 0;
        }
        bool ret = cobj->initTile(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:initTile",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_initTile'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setFavoButtonVisible(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setFavoButtonVisible'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setFavoButtonVisible");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setFavoButtonVisible'", nullptr);
            return 0;
        }
        cobj->setFavoButtonVisible(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setFavoButtonVisible",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setFavoButtonVisible'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_closeImmediately(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_closeImmediately'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_closeImmediately'", nullptr);
            return 0;
        }
        cobj->closeImmediately();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:closeImmediately",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_closeImmediately'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getCityInfo(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getCityInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getCityInfo'", nullptr);
            return 0;
        }
        WorldCityInfo* ret = cobj->getCityInfo();
        object_to_luaval<WorldCityInfo>(tolua_S, "WorldCityInfo",(WorldCityInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getCityInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getCityInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonPic(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonPic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "NewBaseTileLuaInfo:getButtonPic");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonPic'", nullptr);
            return 0;
        }
        std::string ret = cobj->getButtonPic(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getButtonPic",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonPic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonEnable(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonEnable'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "NewBaseTileLuaInfo:setButtonEnable");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonEnable'", nullptr);
            return 0;
        }
        cobj->setButtonEnable(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "NewBaseTileLuaInfo:setButtonEnable");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "NewBaseTileLuaInfo:setButtonEnable");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonEnable'", nullptr);
            return 0;
        }
        cobj->setButtonEnable(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setButtonEnable",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonEnable'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getButton(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButton'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:getButton");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButton'", nullptr);
            return 0;
        }
        cocos2d::extension::ControlButton* ret = cobj->getButton(arg0);
        object_to_luaval<cocos2d::extension::ControlButton>(tolua_S, "cc.ControlButton",(cocos2d::extension::ControlButton*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getButton",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButton'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_keyPressedBtnFavorite(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_keyPressedBtnFavorite'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        cocos2d::extension::Control::EventType arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "NewBaseTileLuaInfo:keyPressedBtnFavorite");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "NewBaseTileLuaInfo:keyPressedBtnFavorite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_keyPressedBtnFavorite'", nullptr);
            return 0;
        }
        cobj->keyPressedBtnFavorite(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:keyPressedBtnFavorite",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_keyPressedBtnFavorite'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCount(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setButtonCount");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCount'", nullptr);
            return 0;
        }
        cobj->setButtonCount(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned int arg0;
        bool arg1;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setButtonCount");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "NewBaseTileLuaInfo:setButtonCount");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCount'", nullptr);
            return 0;
        }
        cobj->setButtonCount(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setButtonCount",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_resetPos(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_resetPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "NewBaseTileLuaInfo:resetPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_resetPos'", nullptr);
            return 0;
        }
        cobj->resetPos(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:resetPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_resetPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCallback(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCallback'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned int arg0;
        cocos2d::CallFunc* arg1;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setButtonCallback");

        ok &= luaval_to_object<cocos2d::CallFunc>(tolua_S, 3, "cc.CallFunc",&arg1, "NewBaseTileLuaInfo:setButtonCallback");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCallback'", nullptr);
            return 0;
        }
        cobj->setButtonCallback(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setButtonCallback",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCallback'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonState(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonState'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            cocos2d::extension::ControlButton* arg0;
            ok &= luaval_to_object<cocos2d::extension::ControlButton>(tolua_S, 2, "cc.ControlButton",&arg0, "NewBaseTileLuaInfo:setButtonState");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "NewBaseTileLuaInfo:setButtonState");

            if (!ok) { break; }
            cobj->setButtonState(arg0, arg1);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setButtonState");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "NewBaseTileLuaInfo:setButtonState");

            if (!ok) { break; }
            cobj->setButtonState(arg0, arg1);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "NewBaseTileLuaInfo:setButtonState",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonState'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_init(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setTitleString(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setTitleString'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setTitleString");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setTitleString'", nullptr);
            return 0;
        }
        cobj->setTitleString(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setTitleString",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setTitleString'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getFavoriteView(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getFavoriteView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getFavoriteView'", nullptr);
            return 0;
        }
        BaseTileInfo* ret = cobj->getFavoriteView();
        object_to_luaval<BaseTileInfo>(tolua_S, "BaseTileInfo",(BaseTileInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getFavoriteView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getFavoriteView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonName(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned int arg0;
        std::string arg1;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setButtonName");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "NewBaseTileLuaInfo:setButtonName");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonName'", nullptr);
            return 0;
        }
        cobj->setButtonName(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setButtonName",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setIsInitEnd(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setIsInitEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:setIsInitEnd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setIsInitEnd'", nullptr);
            return 0;
        }
        cobj->setIsInitEnd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setIsInitEnd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setIsInitEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_closeThis(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_closeThis'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_closeThis'", nullptr);
            return 0;
        }
        cobj->closeThis();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:closeThis",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_closeThis'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getBtnNode(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getBtnNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:getBtnNode");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getBtnNode'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getBtnNode(arg0);
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getBtnNode",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getBtnNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_setCityInfo(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setCityInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        WorldCityInfo* arg0;

        ok &= luaval_to_object<WorldCityInfo>(tolua_S, 2, "WorldCityInfo",&arg0, "NewBaseTileLuaInfo:setCityInfo");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setCityInfo'", nullptr);
            return 0;
        }
        cobj->setCityInfo(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:setCityInfo",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_setCityInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonCount(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonCount'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonCount'", nullptr);
            return 0;
        }
        unsigned int ret = cobj->getButtonCount();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getButtonCount",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonCount'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getIsInitEnd(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getIsInitEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getIsInitEnd'", nullptr);
            return 0;
        }
        bool ret = cobj->getIsInitEnd();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getIsInitEnd",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getIsInitEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getNameText(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getNameText'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:getNameText");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getNameText'", nullptr);
            return 0;
        }
        cocos2d::CCLabelIF* ret = cobj->getNameText(arg0);
        object_to_luaval<cocos2d::CCLabelIF>(tolua_S, "cc.CCLabelIF",(cocos2d::CCLabelIF*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getNameText",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getNameText'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_onExit(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_onExit'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_onExit'", nullptr);
            return 0;
        }
        cobj->onExit();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:onExit",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_onExit'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_addToParent(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_addToParent'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_addToParent'", nullptr);
            return 0;
        }
        cobj->addToParent();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:addToParent",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_addToParent'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_getNode(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (NewBaseTileLuaInfo*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,&arg0, "NewBaseTileLuaInfo:getNode");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getNode'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getNode(arg0);
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:getNode",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_getNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"NewBaseTileLuaInfo",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_create'", nullptr);
            return 0;
        }
        NewBaseTileLuaInfo* ret = NewBaseTileLuaInfo::create();
        object_to_luaval<NewBaseTileLuaInfo>(tolua_S, "NewBaseTileLuaInfo",(NewBaseTileLuaInfo*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "NewBaseTileLuaInfo:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_NewBaseTileLuaInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    NewBaseTileLuaInfo* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_constructor'", nullptr);
            return 0;
        }
        cobj = new NewBaseTileLuaInfo();
        cobj->autorelease();
        int ID =  (int)cobj->_ID ;
        int* luaID =  &cobj->_luaID ;
        toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"NewBaseTileLuaInfo");
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "NewBaseTileLuaInfo:NewBaseTileLuaInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_NewBaseTileLuaInfo_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_NewBaseTileLuaInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (NewBaseTileLuaInfo)");
    return 0;
}

int lua_register_cocos2dx_if_NewBaseTileLuaInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"NewBaseTileLuaInfo");
    tolua_cclass(tolua_S,"NewBaseTileLuaInfo","NewBaseTileLuaInfo","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"NewBaseTileLuaInfo");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_NewBaseTileLuaInfo_constructor);
        tolua_function(tolua_S,"getButtonState",lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonState);
        tolua_function(tolua_S,"onEnter",lua_cocos2dx_if_NewBaseTileLuaInfo_onEnter);
        tolua_function(tolua_S,"addNameNode",lua_cocos2dx_if_NewBaseTileLuaInfo_addNameNode);
        tolua_function(tolua_S,"initTile",lua_cocos2dx_if_NewBaseTileLuaInfo_initTile);
        tolua_function(tolua_S,"setFavoButtonVisible",lua_cocos2dx_if_NewBaseTileLuaInfo_setFavoButtonVisible);
        tolua_function(tolua_S,"closeImmediately",lua_cocos2dx_if_NewBaseTileLuaInfo_closeImmediately);
        tolua_function(tolua_S,"getCityInfo",lua_cocos2dx_if_NewBaseTileLuaInfo_getCityInfo);
        tolua_function(tolua_S,"getButtonPic",lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonPic);
        tolua_function(tolua_S,"setButtonEnable",lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonEnable);
        tolua_function(tolua_S,"getButton",lua_cocos2dx_if_NewBaseTileLuaInfo_getButton);
        tolua_function(tolua_S,"keyPressedBtnFavorite",lua_cocos2dx_if_NewBaseTileLuaInfo_keyPressedBtnFavorite);
        tolua_function(tolua_S,"setButtonCount",lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCount);
        tolua_function(tolua_S,"resetPos",lua_cocos2dx_if_NewBaseTileLuaInfo_resetPos);
        tolua_function(tolua_S,"setButtonCallback",lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonCallback);
        tolua_function(tolua_S,"setButtonState",lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonState);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_NewBaseTileLuaInfo_init);
        tolua_function(tolua_S,"setTitleString",lua_cocos2dx_if_NewBaseTileLuaInfo_setTitleString);
        tolua_function(tolua_S,"getFavoriteView",lua_cocos2dx_if_NewBaseTileLuaInfo_getFavoriteView);
        tolua_function(tolua_S,"setButtonName",lua_cocos2dx_if_NewBaseTileLuaInfo_setButtonName);
        tolua_function(tolua_S,"setIsInitEnd",lua_cocos2dx_if_NewBaseTileLuaInfo_setIsInitEnd);
        tolua_function(tolua_S,"closeThis",lua_cocos2dx_if_NewBaseTileLuaInfo_closeThis);
        tolua_function(tolua_S,"getBtnNode",lua_cocos2dx_if_NewBaseTileLuaInfo_getBtnNode);
        tolua_function(tolua_S,"setCityInfo",lua_cocos2dx_if_NewBaseTileLuaInfo_setCityInfo);
        tolua_function(tolua_S,"getButtonCount",lua_cocos2dx_if_NewBaseTileLuaInfo_getButtonCount);
        tolua_function(tolua_S,"getIsInitEnd",lua_cocos2dx_if_NewBaseTileLuaInfo_getIsInitEnd);
        tolua_function(tolua_S,"getNameText",lua_cocos2dx_if_NewBaseTileLuaInfo_getNameText);
        tolua_function(tolua_S,"onExit",lua_cocos2dx_if_NewBaseTileLuaInfo_onExit);
        tolua_function(tolua_S,"addToParent",lua_cocos2dx_if_NewBaseTileLuaInfo_addToParent);
        tolua_function(tolua_S,"getNode",lua_cocos2dx_if_NewBaseTileLuaInfo_getNode);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_NewBaseTileLuaInfo_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(NewBaseTileLuaInfo).name();
    g_luaType[typeName] = "NewBaseTileLuaInfo";
    g_typeCast["NewBaseTileLuaInfo"] = "NewBaseTileLuaInfo";
    return 1;
}

int lua_cocos2dx_if_GuideController_onEnter(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_onEnter'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_onEnter'", nullptr);
            return 0;
        }
        cobj->onEnter();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:onEnter",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_onEnter'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_startScienceGuide(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_startScienceGuide'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::Ref* arg0;
        cocos2d::extension::Control::EventType arg1;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "GuideController:startScienceGuide");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "GuideController:startScienceGuide");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_startScienceGuide'", nullptr);
            return 0;
        }
        cobj->startScienceGuide(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:startScienceGuide",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_startScienceGuide'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_openSciencePanel(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_openSciencePanel'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_openSciencePanel'", nullptr);
            return 0;
        }
        cobj->openSciencePanel();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:openSciencePanel",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_openSciencePanel'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_setLagStopTouch(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_setLagStopTouch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "GuideController:setLagStopTouch");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_setLagStopTouch'", nullptr);
            return 0;
        }
        cobj->setLagStopTouch(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:setLagStopTouch",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_setLagStopTouch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_getCurGuideID(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_getCurGuideID'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_getCurGuideID'", nullptr);
            return 0;
        }
        std::string ret = cobj->getCurGuideID();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:getCurGuideID",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_getCurGuideID'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_buildingUpdate(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_buildingUpdate'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "GuideController:buildingUpdate");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_buildingUpdate'", nullptr);
            return 0;
        }
        cobj->buildingUpdate(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:buildingUpdate",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_buildingUpdate'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_checkSubGuide(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_checkSubGuide'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GuideController:checkSubGuide");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_checkSubGuide'", nullptr);
            return 0;
        }
        bool ret = cobj->checkSubGuide(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        std::string arg0;
        bool arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GuideController:checkSubGuide");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "GuideController:checkSubGuide");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_checkSubGuide'", nullptr);
            return 0;
        }
        bool ret = cobj->checkSubGuide(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:checkSubGuide",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_checkSubGuide'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_getCurrentId(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_getCurrentId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_getCurrentId'", nullptr);
            return 0;
        }
        std::string ret = cobj->getCurrentId();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:getCurrentId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_getCurrentId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_showBindGuide(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_showBindGuide'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_showBindGuide'", nullptr);
            return 0;
        }
        bool ret = cobj->showBindGuide();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:showBindGuide",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_showBindGuide'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_showBindGuideFromPay(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_showBindGuideFromPay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_showBindGuideFromPay'", nullptr);
            return 0;
        }
        cobj->showBindGuideFromPay();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:showBindGuideFromPay",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_showBindGuideFromPay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_next(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_next'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_next'", nullptr);
            return 0;
        }
        cobj->next();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "GuideController:next");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_next'", nullptr);
            return 0;
        }
        cobj->next(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:next",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_next'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_start(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_start'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_start'", nullptr);
            return 0;
        }
        bool ret = cobj->start();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:start",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_start'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_init(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_isInTutorial(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_isInTutorial'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_isInTutorial'", nullptr);
            return 0;
        }
        bool ret = cobj->isInTutorial();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:isInTutorial",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_isInTutorial'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_purgeData(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_purgeData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_purgeData'", nullptr);
            return 0;
        }
        cobj->purgeData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:purgeData",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_purgeData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_checkSubGuideAvaliable(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_checkSubGuideAvaliable'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GuideController:checkSubGuideAvaliable");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_checkSubGuideAvaliable'", nullptr);
            return 0;
        }
        bool ret = cobj->checkSubGuideAvaliable(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:checkSubGuideAvaliable",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_checkSubGuideAvaliable'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_setGuide(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_setGuide'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GuideController:setGuide");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_setGuide'", nullptr);
            return 0;
        }
        cobj->setGuide(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        std::string arg0;
        bool arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GuideController:setGuide");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "GuideController:setGuide");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_setGuide'", nullptr);
            return 0;
        }
        cobj->setGuide(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:setGuide",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_setGuide'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_showBindGuideFromPop(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_showBindGuideFromPop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_showBindGuideFromPop'", nullptr);
            return 0;
        }
        cobj->showBindGuideFromPop();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:showBindGuideFromPop",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_showBindGuideFromPop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_hasGuide(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_hasGuide'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_hasGuide'", nullptr);
            return 0;
        }
        bool ret = cobj->hasGuide();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:hasGuide",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_hasGuide'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_createGuideView(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_createGuideView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_createGuideView'", nullptr);
            return 0;
        }
        cobj->createGuideView();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:createGuideView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_createGuideView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_removeLevelUpPop(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_removeLevelUpPop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_removeLevelUpPop'", nullptr);
            return 0;
        }
        cobj->removeLevelUpPop();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:removeLevelUpPop",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_removeLevelUpPop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_onExit(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_onExit'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_onExit'", nullptr);
            return 0;
        }
        cobj->onExit();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:onExit",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_onExit'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_clearGuideData(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_clearGuideData'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_clearGuideData'", nullptr);
            return 0;
        }
        cobj->clearGuideData();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:clearGuideData",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_clearGuideData'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_getGView(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_getGView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_getGView'", nullptr);
            return 0;
        }
        GuideView* ret = cobj->getGView();
        object_to_luaval<GuideView>(tolua_S, "GuideView",(GuideView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:getGView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_getGView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_willGuide(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_willGuide'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "GuideController:willGuide");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_willGuide'", nullptr);
            return 0;
        }
        cobj->willGuide(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:willGuide",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_willGuide'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_setGView(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_setGView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        GuideView* arg0;

        ok &= luaval_to_object<GuideView>(tolua_S, 2, "GuideView",&arg0, "GuideController:setGView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_setGView'", nullptr);
            return 0;
        }
        cobj->setGView(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:setGView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_setGView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_setGuideEnd(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_setGuideEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_setGuideEnd'", nullptr);
            return 0;
        }
        cobj->setGuideEnd();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:setGuideEnd",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_setGuideEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_addLevelUpPop(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_addLevelUpPop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        UserUpgradeView* arg0;

        ok &= luaval_to_object<UserUpgradeView>(tolua_S, 2, "UserUpgradeView",&arg0, "GuideController:addLevelUpPop");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_addLevelUpPop'", nullptr);
            return 0;
        }
        cobj->addLevelUpPop(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:addLevelUpPop",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_addLevelUpPop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_getWillBuildItemId(lua_State* tolua_S)
{
    int argc = 0;
    GuideController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (GuideController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_GuideController_getWillBuildItemId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_getWillBuildItemId'", nullptr);
            return 0;
        }
        int ret = cobj->getWillBuildItemId();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "GuideController:getWillBuildItemId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_getWillBuildItemId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_GuideController_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_create'", nullptr);
            return 0;
        }
        GuideController* ret = GuideController::create();
        object_to_luaval<GuideController>(tolua_S, "GuideController",(GuideController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "GuideController:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_GuideController_share(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"GuideController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_GuideController_share'", nullptr);
            return 0;
        }
        GuideController* ret = GuideController::share();
        object_to_luaval<GuideController>(tolua_S, "GuideController",(GuideController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "GuideController:share",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_GuideController_share'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_GuideController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GuideController)");
    return 0;
}

int lua_register_cocos2dx_if_GuideController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"GuideController");
    tolua_cclass(tolua_S,"GuideController","GuideController","cc.CCNode",nullptr);

    tolua_beginmodule(tolua_S,"GuideController");
        tolua_function(tolua_S,"onEnter",lua_cocos2dx_if_GuideController_onEnter);
        tolua_function(tolua_S,"startScienceGuide",lua_cocos2dx_if_GuideController_startScienceGuide);
        tolua_function(tolua_S,"openSciencePanel",lua_cocos2dx_if_GuideController_openSciencePanel);
        tolua_function(tolua_S,"setLagStopTouch",lua_cocos2dx_if_GuideController_setLagStopTouch);
        tolua_function(tolua_S,"getCurGuideID",lua_cocos2dx_if_GuideController_getCurGuideID);
        tolua_function(tolua_S,"buildingUpdate",lua_cocos2dx_if_GuideController_buildingUpdate);
        tolua_function(tolua_S,"checkSubGuide",lua_cocos2dx_if_GuideController_checkSubGuide);
        tolua_function(tolua_S,"getCurrentId",lua_cocos2dx_if_GuideController_getCurrentId);
        tolua_function(tolua_S,"showBindGuide",lua_cocos2dx_if_GuideController_showBindGuide);
        tolua_function(tolua_S,"showBindGuideFromPay",lua_cocos2dx_if_GuideController_showBindGuideFromPay);
        tolua_function(tolua_S,"next",lua_cocos2dx_if_GuideController_next);
        tolua_function(tolua_S,"start",lua_cocos2dx_if_GuideController_start);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_GuideController_init);
        tolua_function(tolua_S,"isInTutorial",lua_cocos2dx_if_GuideController_isInTutorial);
        tolua_function(tolua_S,"purgeData",lua_cocos2dx_if_GuideController_purgeData);
        tolua_function(tolua_S,"checkSubGuideAvaliable",lua_cocos2dx_if_GuideController_checkSubGuideAvaliable);
        tolua_function(tolua_S,"setGuide",lua_cocos2dx_if_GuideController_setGuide);
        tolua_function(tolua_S,"showBindGuideFromPop",lua_cocos2dx_if_GuideController_showBindGuideFromPop);
        tolua_function(tolua_S,"hasGuide",lua_cocos2dx_if_GuideController_hasGuide);
        tolua_function(tolua_S,"createGuideView",lua_cocos2dx_if_GuideController_createGuideView);
        tolua_function(tolua_S,"removeLevelUpPop",lua_cocos2dx_if_GuideController_removeLevelUpPop);
        tolua_function(tolua_S,"onExit",lua_cocos2dx_if_GuideController_onExit);
        tolua_function(tolua_S,"clearGuideData",lua_cocos2dx_if_GuideController_clearGuideData);
        tolua_function(tolua_S,"getGView",lua_cocos2dx_if_GuideController_getGView);
        tolua_function(tolua_S,"willGuide",lua_cocos2dx_if_GuideController_willGuide);
        tolua_function(tolua_S,"setGView",lua_cocos2dx_if_GuideController_setGView);
        tolua_function(tolua_S,"setGuideEnd",lua_cocos2dx_if_GuideController_setGuideEnd);
        tolua_function(tolua_S,"addLevelUpPop",lua_cocos2dx_if_GuideController_addLevelUpPop);
        tolua_function(tolua_S,"getWillBuildItemId",lua_cocos2dx_if_GuideController_getWillBuildItemId);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_GuideController_create);
        tolua_function(tolua_S,"share", lua_cocos2dx_if_GuideController_share);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(GuideController).name();
    g_luaType[typeName] = "GuideController";
    g_typeCast["GuideController"] = "GuideController";
    return 1;
}

int lua_cocos2dx_if_WorldMapView_isMiniMapModel(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_isMiniMapModel'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_isMiniMapModel'", nullptr);
            return 0;
        }
        bool ret = cobj->isMiniMapModel();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:isMiniMapModel",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_isMiniMapModel'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_addSendHeartParticle(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_addSendHeartParticle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        int arg0;
        int arg1;
        int arg2;
        bool arg3;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldMapView:addSendHeartParticle");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldMapView:addSendHeartParticle");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldMapView:addSendHeartParticle");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "WorldMapView:addSendHeartParticle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addSendHeartParticle'", nullptr);
            return 0;
        }
        cobj->addSendHeartParticle(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:addSendHeartParticle",argc, 4);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_addSendHeartParticle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_addWalkParticleToBatch(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_addWalkParticleToBatch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::ParticleSystemQuad* arg0;
        unsigned int arg1;

        ok &= luaval_to_object<cocos2d::ParticleSystemQuad>(tolua_S, 2, "cc.ParticleSystemQuad",&arg0, "WorldMapView:addWalkParticleToBatch");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:addWalkParticleToBatch");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addWalkParticleToBatch'", nullptr);
            return 0;
        }
        cobj->addWalkParticleToBatch(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:addWalkParticleToBatch",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_addWalkParticleToBatch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getViewCenterTilePoint(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getViewCenterTilePoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getViewCenterTilePoint'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getViewCenterTilePoint();
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getViewCenterTilePoint",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getViewCenterTilePoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getBatchNode(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getBatchNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getBatchNode'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getBatchNode();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getBatchNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getBatchNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_setNeedOpenInfoView(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_setNeedOpenInfoView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "WorldMapView:setNeedOpenInfoView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_setNeedOpenInfoView'", nullptr);
            return 0;
        }
        cobj->setNeedOpenInfoView(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:setNeedOpenInfoView",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_setNeedOpenInfoView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getLabelNode(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getLabelNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getLabelNode'", nullptr);
            return 0;
        }
        cocos2d::CCLabelBatchNode* ret = cobj->getLabelNode();
        object_to_luaval<cocos2d::CCLabelBatchNode>(tolua_S, "cc.CCLabelBatchNode",(cocos2d::CCLabelBatchNode*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getLabelNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getLabelNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getCityBatchNode(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getCityBatchNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getCityBatchNode'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getCityBatchNode();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getCityBatchNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getCityBatchNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_addFavorite(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_addFavorite'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        std::string arg0;
        unsigned int arg1;
        unsigned int arg2;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "WorldMapView:addFavorite");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:addFavorite");

        ok &= luaval_to_uint32(tolua_S, 4,&arg2, "WorldMapView:addFavorite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addFavorite'", nullptr);
            return 0;
        }
        cobj->addFavorite(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        std::string arg0;
        unsigned int arg1;
        unsigned int arg2;
        bool arg3;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "WorldMapView:addFavorite");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:addFavorite");

        ok &= luaval_to_uint32(tolua_S, 4,&arg2, "WorldMapView:addFavorite");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "WorldMapView:addFavorite");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addFavorite'", nullptr);
            return 0;
        }
        cobj->addFavorite(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:addFavorite",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_addFavorite'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getHeartParTag(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getHeartParTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldMapView:getHeartParTag");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldMapView:getHeartParTag");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldMapView:getHeartParTag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getHeartParTag'", nullptr);
            return 0;
        }
        int ret = cobj->getHeartParTag(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getHeartParTag",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getHeartParTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getBatchTag(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getBatchTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        BatchTagType arg0;
        unsigned int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldMapView:getBatchTag");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:getBatchTag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getBatchTag'", nullptr);
            return 0;
        }
        unsigned int ret = cobj->getBatchTag(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getBatchTag",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getBatchTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_addParticleToBatch(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_addParticleToBatch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::ParticleSystemQuad* arg0;
        unsigned int arg1;

        ok &= luaval_to_object<cocos2d::ParticleSystemQuad>(tolua_S, 2, "cc.ParticleSystemQuad",&arg0, "WorldMapView:addParticleToBatch");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:addParticleToBatch");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addParticleToBatch'", nullptr);
            return 0;
        }
        cobj->addParticleToBatch(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:addParticleToBatch",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_addParticleToBatch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getBatchTagForLua(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getBatchTagForLua'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        unsigned int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldMapView:getBatchTagForLua");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:getBatchTagForLua");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getBatchTagForLua'", nullptr);
            return 0;
        }
        unsigned int ret = cobj->getBatchTagForLua(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getBatchTagForLua",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getBatchTagForLua'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_isInWinsize(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_isInWinsize'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:isInWinsize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_isInWinsize'", nullptr);
            return 0;
        }
        bool ret = cobj->isInWinsize(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        int arg1;

        ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:isInWinsize");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldMapView:isInWinsize");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_isInWinsize'", nullptr);
            return 0;
        }
        bool ret = cobj->isInWinsize(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:isInWinsize",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_isInWinsize'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_updateSelfName(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_updateSelfName'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_updateSelfName'", nullptr);
            return 0;
        }
        cobj->updateSelfName();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:updateSelfName",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_updateSelfName'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getUnBatchLabelNode(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getUnBatchLabelNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getUnBatchLabelNode'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getUnBatchLabelNode();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getUnBatchLabelNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getUnBatchLabelNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_addSendHeartParticleToBatch(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_addSendHeartParticleToBatch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::ParticleSystemQuad* arg0;

        ok &= luaval_to_object<cocos2d::ParticleSystemQuad>(tolua_S, 2, "cc.ParticleSystemQuad",&arg0, "WorldMapView:addSendHeartParticleToBatch");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addSendHeartParticleToBatch'", nullptr);
            return 0;
        }
        cobj->addSendHeartParticleToBatch(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:addSendHeartParticleToBatch",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_addSendHeartParticleToBatch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_showTroopInfo(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_showTroopInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "WorldMapView:showTroopInfo");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_showTroopInfo'", nullptr);
            return 0;
        }
        cobj->showTroopInfo(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:showTroopInfo",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_showTroopInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_showViewAfterDeploy(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_showViewAfterDeploy'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "WorldMapView:showViewAfterDeploy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_showViewAfterDeploy'", nullptr);
            return 0;
        }
        cobj->showViewAfterDeploy(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:showViewAfterDeploy",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_showViewAfterDeploy'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_updateDirection(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_updateDirection'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_updateDirection'", nullptr);
            return 0;
        }
        cobj->updateDirection();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:updateDirection",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_updateDirection'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_updateBuildingTime(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_updateBuildingTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_updateBuildingTime'", nullptr);
            return 0;
        }
        cobj->updateBuildingTime();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:updateBuildingTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_updateBuildingTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_showBuildingLeftTime(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_showBuildingLeftTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldMapView:showBuildingLeftTime");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_showBuildingLeftTime'", nullptr);
            return 0;
        }
        cobj->showBuildingLeftTime(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:showBuildingLeftTime",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_showBuildingLeftTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_update(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_update'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "WorldMapView:update");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_update'", nullptr);
            return 0;
        }
        cobj->update(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:update",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_update'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_addFlagParticleToBatch(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_addFlagParticleToBatch'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::ParticleSystemQuad* arg0;
        unsigned int arg1;

        ok &= luaval_to_object<cocos2d::ParticleSystemQuad>(tolua_S, 2, "cc.ParticleSystemQuad",&arg0, "WorldMapView:addFlagParticleToBatch");

        ok &= luaval_to_uint32(tolua_S, 3,&arg1, "WorldMapView:addFlagParticleToBatch");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_addFlagParticleToBatch'", nullptr);
            return 0;
        }
        cobj->addFlagParticleToBatch(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:addFlagParticleToBatch",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_addFlagParticleToBatch'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getResNameByType(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getResNameByType'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        WorldResourceType arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "WorldMapView:getResNameByType");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getResNameByType'", nullptr);
            return 0;
        }
        std::string ret = cobj->getResNameByType(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getResNameByType",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getResNameByType'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_removeSendHeartParticle(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_removeSendHeartParticle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "WorldMapView:removeSendHeartParticle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_removeSendHeartParticle'", nullptr);
            return 0;
        }
        cobj->removeSendHeartParticle(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:removeSendHeartParticle",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_removeSendHeartParticle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getNeedOpenInfoView(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getNeedOpenInfoView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getNeedOpenInfoView'", nullptr);
            return 0;
        }
        bool ret = cobj->getNeedOpenInfoView();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getNeedOpenInfoView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getNeedOpenInfoView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_getAreaAniNode(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_getAreaAniNode'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_getAreaAniNode'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getAreaAniNode();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:getAreaAniNode",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_getAreaAniNode'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_gotoTilePoint(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif
    cobj = (WorldMapView*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_WorldMapView_gotoTilePoint'", nullptr);
        return 0;
    }
#endif
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            cobj->gotoTilePoint(arg0, arg1);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            bool arg2;
            ok &= luaval_to_boolean(tolua_S, 4,&arg2, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            cobj->gotoTilePoint(arg0, arg1, arg2);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            cobj->gotoTilePoint(arg0);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,&arg1, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            cobj->gotoTilePoint(arg0, arg1);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 3) {
            cocos2d::Vec2 arg0;
            ok &= luaval_to_vec2(tolua_S, 2, &arg0, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,&arg1, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "WorldMapView:gotoTilePoint");

            if (!ok) { break; }
            cobj->gotoTilePoint(arg0, arg1, arg2);
            lua_settop(tolua_S, 1);
            return 1;
        }
    }while(0);
    ok  = true;
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n",  "WorldMapView:gotoTilePoint",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_gotoTilePoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_WorldMapView_instance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"WorldMapView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_instance'", nullptr);
            return 0;
        }
        WorldMapView* ret = WorldMapView::instance();
        object_to_luaval<WorldMapView>(tolua_S, "WorldMapView",(WorldMapView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "WorldMapView:instance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_instance'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_WorldMapView_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WorldMapView* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_WorldMapView_constructor'", nullptr);
            return 0;
        }
        cobj = new WorldMapView();
        tolua_pushusertype(tolua_S,(void*)cobj,"WorldMapView");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "WorldMapView:WorldMapView",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_WorldMapView_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_WorldMapView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (WorldMapView)");
    return 0;
}

int lua_register_cocos2dx_if_WorldMapView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WorldMapView");
    tolua_cclass(tolua_S,"WorldMapView","WorldMapView","cc.CCLayer",nullptr);

    tolua_beginmodule(tolua_S,"WorldMapView");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_WorldMapView_constructor);
        tolua_function(tolua_S,"isMiniMapModel",lua_cocos2dx_if_WorldMapView_isMiniMapModel);
        tolua_function(tolua_S,"addSendHeartParticle",lua_cocos2dx_if_WorldMapView_addSendHeartParticle);
        tolua_function(tolua_S,"addWalkParticleToBatch",lua_cocos2dx_if_WorldMapView_addWalkParticleToBatch);
        tolua_function(tolua_S,"getViewCenterTilePoint",lua_cocos2dx_if_WorldMapView_getViewCenterTilePoint);
        tolua_function(tolua_S,"getBatchNode",lua_cocos2dx_if_WorldMapView_getBatchNode);
        tolua_function(tolua_S,"setNeedOpenInfoView",lua_cocos2dx_if_WorldMapView_setNeedOpenInfoView);
        tolua_function(tolua_S,"getLabelNode",lua_cocos2dx_if_WorldMapView_getLabelNode);
        tolua_function(tolua_S,"getCityBatchNode",lua_cocos2dx_if_WorldMapView_getCityBatchNode);
        tolua_function(tolua_S,"addFavorite",lua_cocos2dx_if_WorldMapView_addFavorite);
        tolua_function(tolua_S,"getHeartParTag",lua_cocos2dx_if_WorldMapView_getHeartParTag);
        tolua_function(tolua_S,"getBatchTag",lua_cocos2dx_if_WorldMapView_getBatchTag);
        tolua_function(tolua_S,"addParticleToBatch",lua_cocos2dx_if_WorldMapView_addParticleToBatch);
        tolua_function(tolua_S,"getBatchTagForLua",lua_cocos2dx_if_WorldMapView_getBatchTagForLua);
        tolua_function(tolua_S,"isInWinsize",lua_cocos2dx_if_WorldMapView_isInWinsize);
        tolua_function(tolua_S,"updateSelfName",lua_cocos2dx_if_WorldMapView_updateSelfName);
        tolua_function(tolua_S,"getUnBatchLabelNode",lua_cocos2dx_if_WorldMapView_getUnBatchLabelNode);
        tolua_function(tolua_S,"addSendHeartParticleToBatch",lua_cocos2dx_if_WorldMapView_addSendHeartParticleToBatch);
        tolua_function(tolua_S,"showTroopInfo",lua_cocos2dx_if_WorldMapView_showTroopInfo);
        tolua_function(tolua_S,"showViewAfterDeploy",lua_cocos2dx_if_WorldMapView_showViewAfterDeploy);
        tolua_function(tolua_S,"updateDirection",lua_cocos2dx_if_WorldMapView_updateDirection);
        tolua_function(tolua_S,"updateBuildingTime",lua_cocos2dx_if_WorldMapView_updateBuildingTime);
        tolua_function(tolua_S,"showBuildingLeftTime",lua_cocos2dx_if_WorldMapView_showBuildingLeftTime);
        tolua_function(tolua_S,"update",lua_cocos2dx_if_WorldMapView_update);
        tolua_function(tolua_S,"addFlagParticleToBatch",lua_cocos2dx_if_WorldMapView_addFlagParticleToBatch);
        tolua_function(tolua_S,"getResNameByType",lua_cocos2dx_if_WorldMapView_getResNameByType);
        tolua_function(tolua_S,"removeSendHeartParticle",lua_cocos2dx_if_WorldMapView_removeSendHeartParticle);
        tolua_function(tolua_S,"getNeedOpenInfoView",lua_cocos2dx_if_WorldMapView_getNeedOpenInfoView);
        tolua_function(tolua_S,"getAreaAniNode",lua_cocos2dx_if_WorldMapView_getAreaAniNode);
        tolua_function(tolua_S,"gotoTilePoint",lua_cocos2dx_if_WorldMapView_gotoTilePoint);
        tolua_function(tolua_S,"instance", lua_cocos2dx_if_WorldMapView_instance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WorldMapView).name();
    g_luaType[typeName] = "WorldMapView";
    g_typeCast["WorldMapView"] = "WorldMapView";
    return 1;
}

int lua_cocos2dx_if_SceneController_updateSubSceneBuild(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:updateSubSceneBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuild'", nullptr);
            return 0;
        }
        cobj->updateSubSceneBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:updateSubSceneBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_upBuildingFlyBall(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_upBuildingFlyBall'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:upBuildingFlyBall");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:upBuildingFlyBall");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_upBuildingFlyBall'", nullptr);
            return 0;
        }
        cobj->upBuildingFlyBall(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:upBuildingFlyBall");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:upBuildingFlyBall");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:upBuildingFlyBall");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_upBuildingFlyBall'", nullptr);
            return 0;
        }
        cobj->upBuildingFlyBall(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:upBuildingFlyBall",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_upBuildingFlyBall'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_getCurrentSceneId(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_getCurrentSceneId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_getCurrentSceneId'", nullptr);
            return 0;
        }
        int ret = cobj->getCurrentSceneId();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:getCurrentSceneId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_getCurrentSceneId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_setMaincityCustom(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_setMaincityCustom'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "SceneController:setMaincityCustom");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_setMaincityCustom'", nullptr);
            return 0;
        }
        cobj->setMaincityCustom(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:setMaincityCustom",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_setMaincityCustom'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_shouldCleanUpSceneByTag(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_shouldCleanUpSceneByTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:shouldCleanUpSceneByTag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_shouldCleanUpSceneByTag'", nullptr);
            return 0;
        }
        bool ret = cobj->shouldCleanUpSceneByTag(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:shouldCleanUpSceneByTag",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_shouldCleanUpSceneByTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_getSceneIdByTag(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_getSceneIdByTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:getSceneIdByTag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_getSceneIdByTag'", nullptr);
            return 0;
        }
        int ret = cobj->getSceneIdByTag(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:getSceneIdByTag",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_getSceneIdByTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_setLayerTag(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_setLayerTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        cocos2d::Layer* arg0;
        int arg1;
        bool arg2;
        bool arg3;

        ok &= luaval_to_object<cocos2d::Layer>(tolua_S, 2, "cc.Layer",&arg0, "SceneController:setLayerTag");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:setLayerTag");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:setLayerTag");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "SceneController:setLayerTag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_setLayerTag'", nullptr);
            return 0;
        }
        cobj->setLayerTag(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:setLayerTag",argc, 4);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_setLayerTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_updateSubSceneBuildUI(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildUI'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:updateSubSceneBuildUI");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildUI'", nullptr);
            return 0;
        }
        cobj->updateSubSceneBuildUI(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        double arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:updateSubSceneBuildUI");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "SceneController:updateSubSceneBuildUI");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildUI'", nullptr);
            return 0;
        }
        cobj->updateSubSceneBuildUI(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:updateSubSceneBuildUI",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildUI'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_addGUI(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_addGUI'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_addGUI'", nullptr);
            return 0;
        }
        cobj->addGUI();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:addGUI",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_addGUI'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_gotoScene(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_gotoScene'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:gotoScene");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoScene'", nullptr);
            return 0;
        }
        cobj->gotoScene(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:gotoScene");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoScene'", nullptr);
            return 0;
        }
        cobj->gotoScene(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        bool arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:gotoScene");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoScene'", nullptr);
            return 0;
        }
        cobj->gotoScene(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        int arg0;
        bool arg1;
        bool arg2;
        int arg3;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:gotoScene");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "SceneController:gotoScene");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoScene'", nullptr);
            return 0;
        }
        cobj->gotoScene(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        int arg0;
        bool arg1;
        bool arg2;
        int arg3;
        MapType arg4;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:gotoScene");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:gotoScene");

        ok &= luaval_to_int32(tolua_S, 5,(int *)&arg3, "SceneController:gotoScene");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "SceneController:gotoScene");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoScene'", nullptr);
            return 0;
        }
        cobj->gotoScene(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:gotoScene",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_gotoScene'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_getMaincityCustom(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_getMaincityCustom'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_getMaincityCustom'", nullptr);
            return 0;
        }
        bool ret = cobj->getMaincityCustom();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:getMaincityCustom",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_getMaincityCustom'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_gotoLoading(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_gotoLoading'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoLoading'", nullptr);
            return 0;
        }
        cobj->gotoLoading();
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "SceneController:gotoLoading");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_gotoLoading'", nullptr);
            return 0;
        }
        cobj->gotoLoading(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:gotoLoading",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_gotoLoading'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_getCurrentLayerByLevel(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_getCurrentLayerByLevel'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:getCurrentLayerByLevel");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_getCurrentLayerByLevel'", nullptr);
            return 0;
        }
        cocos2d::Layer* ret = cobj->getCurrentLayerByLevel(arg0);
        object_to_luaval<cocos2d::Layer>(tolua_S, "cc.Layer",(cocos2d::Layer*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:getCurrentLayerByLevel",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_getCurrentLayerByLevel'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_shouldSaveSceneByTag(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_shouldSaveSceneByTag'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:shouldSaveSceneByTag");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_shouldSaveSceneByTag'", nullptr);
            return 0;
        }
        bool ret = cobj->shouldSaveSceneByTag(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:shouldSaveSceneByTag",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_shouldSaveSceneByTag'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_loadSceneResourceBack(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_loadSceneResourceBack'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "SceneController:loadSceneResourceBack");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_loadSceneResourceBack'", nullptr);
            return 0;
        }
        cobj->loadSceneResourceBack(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:loadSceneResourceBack",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_loadSceneResourceBack'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_upAutoBtnState(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_upAutoBtnState'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_upAutoBtnState'", nullptr);
            return 0;
        }
        cobj->upAutoBtnState();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:upAutoBtnState",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_upAutoBtnState'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_clearLayerByLevelAndSceneId(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_clearLayerByLevelAndSceneId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:clearLayerByLevelAndSceneId");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:clearLayerByLevelAndSceneId");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_clearLayerByLevelAndSceneId'", nullptr);
            return 0;
        }
        cobj->clearLayerByLevelAndSceneId(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:clearLayerByLevelAndSceneId",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_clearLayerByLevelAndSceneId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_curSceneIsCropScene(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_curSceneIsCropScene'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_curSceneIsCropScene'", nullptr);
            return 0;
        }
        int ret = cobj->curSceneIsCropScene();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:curSceneIsCropScene",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_curSceneIsCropScene'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_updateBuildings(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_updateBuildings'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_updateBuildings'", nullptr);
            return 0;
        }
        cobj->updateBuildings();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:updateBuildings",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_updateBuildings'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_onFlyOutPut(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_onFlyOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:onFlyOutPut");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:onFlyOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_onFlyOutPut'", nullptr);
            return 0;
        }
        cobj->onFlyOutPut(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:onFlyOutPut");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:onFlyOutPut");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "SceneController:onFlyOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_onFlyOutPut'", nullptr);
            return 0;
        }
        cobj->onFlyOutPut(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:onFlyOutPut",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_onFlyOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_updateSubSceneBuildPic(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildPic'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:updateSubSceneBuildPic");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "SceneController:updateSubSceneBuildPic");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildPic'", nullptr);
            return 0;
        }
        cobj->updateSubSceneBuildPic(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:updateSubSceneBuildPic",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_updateSubSceneBuildPic'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_removeGUI(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_removeGUI'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_removeGUI'", nullptr);
            return 0;
        }
        cobj->removeGUI();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:removeGUI",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_removeGUI'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_loadSceneResource(lua_State* tolua_S)
{
    int argc = 0;
    SceneController* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (SceneController*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_SceneController_loadSceneResource'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        bool arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:loadSceneResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_loadSceneResource'", nullptr);
            return 0;
        }
        cobj->loadSceneResource(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        int arg0;
        bool arg1;
        bool arg2;
        bool arg3;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "SceneController:loadSceneResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_loadSceneResource'", nullptr);
            return 0;
        }
        cobj->loadSceneResource(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        int arg0;
        bool arg1;
        bool arg2;
        bool arg3;
        int arg4;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "SceneController:loadSceneResource");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "SceneController:loadSceneResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_loadSceneResource'", nullptr);
            return 0;
        }
        cobj->loadSceneResource(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6) 
    {
        int arg0;
        bool arg1;
        bool arg2;
        bool arg3;
        int arg4;
        MapType arg5;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "SceneController:loadSceneResource");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "SceneController:loadSceneResource");

        ok &= luaval_to_int32(tolua_S, 6,(int *)&arg4, "SceneController:loadSceneResource");

        ok &= luaval_to_int32(tolua_S, 7,(int *)&arg5, "SceneController:loadSceneResource");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_loadSceneResource'", nullptr);
            return 0;
        }
        cobj->loadSceneResource(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "SceneController:loadSceneResource",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_loadSceneResource'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_SceneController_getInstance(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"SceneController",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_SceneController_getInstance'", nullptr);
            return 0;
        }
        SceneController* ret = SceneController::getInstance();
        object_to_luaval<SceneController>(tolua_S, "SceneController",(SceneController*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "SceneController:getInstance",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_SceneController_getInstance'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_SceneController_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SceneController)");
    return 0;
}

int lua_register_cocos2dx_if_SceneController(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"SceneController");
    tolua_cclass(tolua_S,"SceneController","SceneController","cc.CCObject",nullptr);

    tolua_beginmodule(tolua_S,"SceneController");
        tolua_function(tolua_S,"updateSubSceneBuild",lua_cocos2dx_if_SceneController_updateSubSceneBuild);
        tolua_function(tolua_S,"upBuildingFlyBall",lua_cocos2dx_if_SceneController_upBuildingFlyBall);
        tolua_function(tolua_S,"getCurrentSceneId",lua_cocos2dx_if_SceneController_getCurrentSceneId);
        tolua_function(tolua_S,"setMaincityCustom",lua_cocos2dx_if_SceneController_setMaincityCustom);
        tolua_function(tolua_S,"shouldCleanUpSceneByTag",lua_cocos2dx_if_SceneController_shouldCleanUpSceneByTag);
        tolua_function(tolua_S,"getSceneIdByTag",lua_cocos2dx_if_SceneController_getSceneIdByTag);
        tolua_function(tolua_S,"setLayerTag",lua_cocos2dx_if_SceneController_setLayerTag);
        tolua_function(tolua_S,"updateSubSceneBuildUI",lua_cocos2dx_if_SceneController_updateSubSceneBuildUI);
        tolua_function(tolua_S,"addGUI",lua_cocos2dx_if_SceneController_addGUI);
        tolua_function(tolua_S,"gotoScene",lua_cocos2dx_if_SceneController_gotoScene);
        tolua_function(tolua_S,"getMaincityCustom",lua_cocos2dx_if_SceneController_getMaincityCustom);
        tolua_function(tolua_S,"gotoLoading",lua_cocos2dx_if_SceneController_gotoLoading);
        tolua_function(tolua_S,"getCurrentLayerByLevel",lua_cocos2dx_if_SceneController_getCurrentLayerByLevel);
        tolua_function(tolua_S,"shouldSaveSceneByTag",lua_cocos2dx_if_SceneController_shouldSaveSceneByTag);
        tolua_function(tolua_S,"loadSceneResourceBack",lua_cocos2dx_if_SceneController_loadSceneResourceBack);
        tolua_function(tolua_S,"upAutoBtnState",lua_cocos2dx_if_SceneController_upAutoBtnState);
        tolua_function(tolua_S,"clearLayerByLevelAndSceneId",lua_cocos2dx_if_SceneController_clearLayerByLevelAndSceneId);
        tolua_function(tolua_S,"curSceneIsCropScene",lua_cocos2dx_if_SceneController_curSceneIsCropScene);
        tolua_function(tolua_S,"updateBuildings",lua_cocos2dx_if_SceneController_updateBuildings);
        tolua_function(tolua_S,"onFlyOutPut",lua_cocos2dx_if_SceneController_onFlyOutPut);
        tolua_function(tolua_S,"updateSubSceneBuildPic",lua_cocos2dx_if_SceneController_updateSubSceneBuildPic);
        tolua_function(tolua_S,"removeGUI",lua_cocos2dx_if_SceneController_removeGUI);
        tolua_function(tolua_S,"loadSceneResource",lua_cocos2dx_if_SceneController_loadSceneResource);
        tolua_function(tolua_S,"getInstance", lua_cocos2dx_if_SceneController_getInstance);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(SceneController).name();
    g_luaType[typeName] = "SceneController";
    g_typeCast["SceneController"] = "SceneController";
    return 1;
}

int lua_cocos2dx_if_ImperialScene_onUpdateInfo(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onUpdateInfo'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onUpdateInfo'", nullptr);
            return 0;
        }
        cobj->onUpdateInfo();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onUpdateInfo",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onUpdateInfo'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onResetBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onResetBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onResetBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onResetBuild'", nullptr);
            return 0;
        }
        cobj->onResetBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onResetBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onResetBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_makeCanPlayArrowPoint(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_makeCanPlayArrowPoint'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_makeCanPlayArrowPoint'", nullptr);
            return 0;
        }
        cobj->makeCanPlayArrowPoint();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:makeCanPlayArrowPoint",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_makeCanPlayArrowPoint'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onEnter(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onEnter'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onEnter'", nullptr);
            return 0;
        }
        cobj->onEnter();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onEnter",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onEnter'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_updateShipState(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_updateShipState'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ImperialScene:updateShipState");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_updateShipState'", nullptr);
            return 0;
        }
        cobj->updateShipState(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:updateShipState",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_updateShipState'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getBuildById(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getBuildById'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:getBuildById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getBuildById'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getBuildById(arg0);
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getBuildById",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getBuildById'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_setPointArrowAni(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_setPointArrowAni'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:setPointArrowAni");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_setPointArrowAni'", nullptr);
            return 0;
        }
        cobj->setPointArrowAni(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:setPointArrowAni",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_setPointArrowAni'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowBtnsView(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowBtnsView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onShowBtnsView");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onShowBtnsView");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onShowBtnsView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowBtnsView'", nullptr);
            return 0;
        }
        cobj->onShowBtnsView(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowBtnsView",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowBtnsView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getSpeBuildNameById(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getSpeBuildNameById'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        std::string arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:getSpeBuildNameById");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "ImperialScene:getSpeBuildNameById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getSpeBuildNameById'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getSpeBuildNameById(arg0, arg1);
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getSpeBuildNameById",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getSpeBuildNameById'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_setAnimationManager(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_setAnimationManager'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocosbuilder::CCBAnimationManager* arg0;

        ok &= luaval_to_object<cocosbuilder::CCBAnimationManager>(tolua_S, 2, "cc.CCBAnimationManager",&arg0, "ImperialScene:setAnimationManager");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_setAnimationManager'", nullptr);
            return 0;
        }
        cobj->setAnimationManager(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:setAnimationManager",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_setAnimationManager'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onTouchesEnded(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onTouchesEnded'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Set* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::__Set>(tolua_S, 2, "cc.__Set",&arg0, "ImperialScene:onTouchesEnded");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "ImperialScene:onTouchesEnded");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onTouchesEnded'", nullptr);
            return 0;
        }
        cobj->onTouchesEnded(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onTouchesEnded",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onTouchesEnded'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_setUnMoveScence(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_setUnMoveScence'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,&arg0, "ImperialScene:setUnMoveScence");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_setUnMoveScence'", nullptr);
            return 0;
        }
        cobj->setUnMoveScence(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:setUnMoveScence",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_setUnMoveScence'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_showBuildBtns(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_showBuildBtns'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:showBuildBtns");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_showBuildBtns'", nullptr);
            return 0;
        }
        cobj->showBuildBtns(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:showBuildBtns",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_showBuildBtns'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndOpen(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onMoveToBuildAndOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndOpen(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        double arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ImperialScene:onMoveToBuildAndOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndOpen(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        int arg0;
        int arg1;
        double arg2;
        bool arg3;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "ImperialScene:onMoveToBuildAndOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndOpen(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        int arg0;
        int arg1;
        double arg2;
        bool arg3;
        bool arg4;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_boolean(tolua_S, 5,&arg3, "ImperialScene:onMoveToBuildAndOpen");

        ok &= luaval_to_boolean(tolua_S, 6,&arg4, "ImperialScene:onMoveToBuildAndOpen");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndOpen(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onMoveToBuildAndOpen",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_hidePrincess(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_hidePrincess'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:hidePrincess");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_hidePrincess'", nullptr);
            return 0;
        }
        cobj->hidePrincess(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:hidePrincess",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_hidePrincess'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_reSetTalkTime(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_reSetTalkTime'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_reSetTalkTime'", nullptr);
            return 0;
        }
        cobj->reSetTalkTime();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:reSetTalkTime",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_reSetTalkTime'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndPlay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndPlay(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndPlay");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "ImperialScene:onMoveToBuildAndPlay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndPlay(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        bool arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuildAndPlay");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "ImperialScene:onMoveToBuildAndPlay");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "ImperialScene:onMoveToBuildAndPlay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay'", nullptr);
            return 0;
        }
        cobj->onMoveToBuildAndPlay(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onMoveToBuildAndPlay",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_setQuestEffect(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_setQuestEffect'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:setQuestEffect");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_setQuestEffect'", nullptr);
            return 0;
        }
        cobj->setQuestEffect(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:setQuestEffect",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_setQuestEffect'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onMoveToPos(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        double arg0;
        double arg1;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'", nullptr);
            return 0;
        }
        cobj->onMoveToPos(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        double arg0;
        double arg1;
        int arg2;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPos");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onMoveToPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'", nullptr);
            return 0;
        }
        cobj->onMoveToPos(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 4) 
    {
        double arg0;
        double arg1;
        int arg2;
        double arg3;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPos");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "ImperialScene:onMoveToPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'", nullptr);
            return 0;
        }
        cobj->onMoveToPos(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        double arg0;
        double arg1;
        int arg2;
        double arg3;
        double arg4;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPos");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 6,&arg4, "ImperialScene:onMoveToPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'", nullptr);
            return 0;
        }
        cobj->onMoveToPos(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6) 
    {
        double arg0;
        double arg1;
        int arg2;
        double arg3;
        double arg4;
        bool arg5;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPos");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "ImperialScene:onMoveToPos");

        ok &= luaval_to_number(tolua_S, 6,&arg4, "ImperialScene:onMoveToPos");

        ok &= luaval_to_boolean(tolua_S, 7,&arg5, "ImperialScene:onMoveToPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'", nullptr);
            return 0;
        }
        cobj->onMoveToPos(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onMoveToPos",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onMoveToPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onCreateBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onCreateBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onCreateBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onCreateBuild'", nullptr);
            return 0;
        }
        cobj->onCreateBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onCreateBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onCreateBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onGetTouchLayerScale(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onGetTouchLayerScale'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onGetTouchLayerScale'", nullptr);
            return 0;
        }
        double ret = cobj->onGetTouchLayerScale();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onGetTouchLayerScale",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onGetTouchLayerScale'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getMailPosOnScreen(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getMailPosOnScreen'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getMailPosOnScreen'", nullptr);
            return 0;
        }
        cocos2d::Point ret = cobj->getMailPosOnScreen();
        point_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getMailPosOnScreen",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getMailPosOnScreen'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getBuildNameById(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getBuildNameById'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        std::string arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:getBuildNameById");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "ImperialScene:getBuildNameById");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getBuildNameById'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getBuildNameById(arg0, arg1);
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getBuildNameById",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getBuildNameById'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowHTPAnim(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onShowHTPAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAnim'", nullptr);
            return 0;
        }
        cobj->onShowHTPAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowHTPAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowFeedbackAnim(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onShowFeedbackAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAnim'", nullptr);
            return 0;
        }
        cobj->onShowFeedbackAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowFeedbackAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onTouchesBegan(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onTouchesBegan'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Set* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::__Set>(tolua_S, 2, "cc.__Set",&arg0, "ImperialScene:onTouchesBegan");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "ImperialScene:onTouchesBegan");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onTouchesBegan'", nullptr);
            return 0;
        }
        cobj->onTouchesBegan(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onTouchesBegan",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onTouchesBegan'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onQijiBottomShow(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onQijiBottomShow'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onQijiBottomShow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onQijiBottomShow'", nullptr);
            return 0;
        }
        cobj->onQijiBottomShow(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onQijiBottomShow",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onQijiBottomShow'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_stopShadow(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_stopShadow'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        cocos2d::Touch* arg1;
        cocos2d::Event* arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:stopShadow");

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 3, "cc.Touch",&arg1, "ImperialScene:stopShadow");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 4, "cc.Event",&arg2, "ImperialScene:stopShadow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_stopShadow'", nullptr);
            return 0;
        }
        cobj->stopShadow(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:stopShadow",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_stopShadow'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onSaveCurPos(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onSaveCurPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ImperialScene:onSaveCurPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onSaveCurPos'", nullptr);
            return 0;
        }
        cobj->onSaveCurPos(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onSaveCurPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onSaveCurPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getAnimationManager(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getAnimationManager'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getAnimationManager'", nullptr);
            return 0;
        }
        cocosbuilder::CCBAnimationManager* ret = cobj->getAnimationManager();
        object_to_luaval<cocosbuilder::CCBAnimationManager>(tolua_S, "cc.CCBAnimationManager",(cocosbuilder::CCBAnimationManager*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getAnimationManager",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getAnimationManager'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_init(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_init'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_init'", nullptr);
            return 0;
        }
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:init",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_init'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_findCanBuildTile(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_findCanBuildTile'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:findCanBuildTile");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_findCanBuildTile'", nullptr);
            return 0;
        }
        int ret = cobj->findCanBuildTile(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:findCanBuildTile",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_findCanBuildTile'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_removeCustomBatchLayer(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_removeCustomBatchLayer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_removeCustomBatchLayer'", nullptr);
            return 0;
        }
        cobj->removeCustomBatchLayer();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:removeCustomBatchLayer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_removeCustomBatchLayer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onGetSceenPt(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onGetSceenPt'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        double arg0;
        double arg1;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onGetSceenPt");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onGetSceenPt");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onGetSceenPt'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->onGetSceenPt(arg0, arg1);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onGetSceenPt",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onGetSceenPt'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowSpeBtnsView(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowSpeBtnsView'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onShowSpeBtnsView");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onShowSpeBtnsView");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onShowSpeBtnsView");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowSpeBtnsView'", nullptr);
            return 0;
        }
        cobj->onShowSpeBtnsView(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowSpeBtnsView",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowSpeBtnsView'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onOpenBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onOpenBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onOpenBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onOpenBuild'", nullptr);
            return 0;
        }
        cobj->onOpenBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onOpenBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onOpenBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onGoBackOldPos(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onGoBackOldPos'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ImperialScene:onGoBackOldPos");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onGoBackOldPos'", nullptr);
            return 0;
        }
        cobj->onGoBackOldPos(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onGoBackOldPos",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onGoBackOldPos'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainLaterAnim(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainLaterAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onShowFeedbackAgainLaterAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainLaterAnim'", nullptr);
            return 0;
        }
        cobj->onShowFeedbackAgainLaterAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowFeedbackAgainLaterAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainLaterAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onMoveToPosDir(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onMoveToPosDir'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        double arg0;
        double arg1;
        double arg2;
        double arg3;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "ImperialScene:onMoveToPosDir");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPosDir'", nullptr);
            return 0;
        }
        cobj->onMoveToPosDir(arg0, arg1, arg2, arg3);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 5) 
    {
        double arg0;
        double arg1;
        double arg2;
        double arg3;
        double arg4;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 6,&arg4, "ImperialScene:onMoveToPosDir");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPosDir'", nullptr);
            return 0;
        }
        cobj->onMoveToPosDir(arg0, arg1, arg2, arg3, arg4);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 6) 
    {
        double arg0;
        double arg1;
        double arg2;
        double arg3;
        double arg4;
        bool arg5;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 4,&arg2, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 5,&arg3, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_number(tolua_S, 6,&arg4, "ImperialScene:onMoveToPosDir");

        ok &= luaval_to_boolean(tolua_S, 7,&arg5, "ImperialScene:onMoveToPosDir");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToPosDir'", nullptr);
            return 0;
        }
        cobj->onMoveToPosDir(arg0, arg1, arg2, arg3, arg4, arg5);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onMoveToPosDir",argc, 4);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onMoveToPosDir'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onSingleTouchBegin(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onSingleTouchBegin'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Touch* arg0;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "ImperialScene:onSingleTouchBegin");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onSingleTouchBegin'", nullptr);
            return 0;
        }
        cobj->onSingleTouchBegin(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onSingleTouchBegin",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onSingleTouchBegin'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getWorldPosition(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getWorldPosition'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:getWorldPosition");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getWorldPosition'", nullptr);
            return 0;
        }
        cocos2d::Vec2 ret = cobj->getWorldPosition(arg0);
        vec2_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getWorldPosition",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getWorldPosition'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_showTmpBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_showTmpBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:showTmpBuild");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:showTmpBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_showTmpBuild'", nullptr);
            return 0;
        }
        cobj->showTmpBuild(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:showTmpBuild",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_showTmpBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onFlyCargoOutPut(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onFlyCargoOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ImperialScene:onFlyCargoOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyCargoOutPut'", nullptr);
            return 0;
        }
        cobj->onFlyCargoOutPut(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onFlyCargoOutPut",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onFlyCargoOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_flyBall(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_flyBall'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        bool arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:flyBall");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:flyBall");

        ok &= luaval_to_boolean(tolua_S, 4,&arg2, "ImperialScene:flyBall");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_flyBall'", nullptr);
            return 0;
        }
        cobj->flyBall(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:flyBall",argc, 3);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_flyBall'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onFlyTroopEndToUI(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopEndToUI'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ImperialScene:onFlyTroopEndToUI");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopEndToUI'", nullptr);
            return 0;
        }
        cobj->onFlyTroopEndToUI(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onFlyTroopEndToUI",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopEndToUI'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onFlyTroopParticle(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopParticle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onFlyTroopParticle");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onFlyTroopParticle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopParticle'", nullptr);
            return 0;
        }
        cobj->onFlyTroopParticle(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onFlyTroopParticle");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onFlyTroopParticle");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onFlyTroopParticle");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopParticle'", nullptr);
            return 0;
        }
        cobj->onFlyTroopParticle(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onFlyTroopParticle",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopParticle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_addToMovingLayer(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_addToMovingLayer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= luaval_to_object<cocos2d::Node>(tolua_S, 2, "cc.Node",&arg0, "ImperialScene:addToMovingLayer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_addToMovingLayer'", nullptr);
            return 0;
        }
        cobj->addToMovingLayer(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:addToMovingLayer",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_addToMovingLayer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_createCustomBatchLayer(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_createCustomBatchLayer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "ImperialScene:createCustomBatchLayer");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_createCustomBatchLayer'", nullptr);
            return 0;
        }
        cocos2d::SpriteBatchNode* ret = cobj->createCustomBatchLayer(arg0);
        object_to_luaval<cocos2d::SpriteBatchNode>(tolua_S, "cc.SpriteBatchNode",(cocos2d::SpriteBatchNode*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:createCustomBatchLayer",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_createCustomBatchLayer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowHTPAgainLaterAnim(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAgainLaterAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onShowHTPAgainLaterAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAgainLaterAnim'", nullptr);
            return 0;
        }
        cobj->onShowHTPAgainLaterAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowHTPAgainLaterAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAgainLaterAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainAnim(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onShowFeedbackAgainAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainAnim'", nullptr);
            return 0;
        }
        cobj->onShowFeedbackAgainAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowFeedbackAgainAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getTouchLayer(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getTouchLayer'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getTouchLayer'", nullptr);
            return 0;
        }
        cocos2d::Node* ret = cobj->getTouchLayer();
        object_to_luaval<cocos2d::Node>(tolua_S, "cc.Node",(cocos2d::Node*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getTouchLayer",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getTouchLayer'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getNewRwdPosOnScreen(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getNewRwdPosOnScreen'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getNewRwdPosOnScreen'", nullptr);
            return 0;
        }
        cocos2d::Point ret = cobj->getNewRwdPosOnScreen();
        point_to_luaval(tolua_S, ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getNewRwdPosOnScreen",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getNewRwdPosOnScreen'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_clickWorkshop(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_clickWorkshop'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:clickWorkshop");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_clickWorkshop'", nullptr);
            return 0;
        }
        cobj->clickWorkshop(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:clickWorkshop",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_clickWorkshop'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onPlayMoveTroops(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onPlayMoveTroops'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onPlayMoveTroops");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onPlayMoveTroops'", nullptr);
            return 0;
        }
        cobj->onPlayMoveTroops(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onPlayMoveTroops",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onPlayMoveTroops'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_getTouchLayerScale(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_getTouchLayerScale'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_getTouchLayerScale'", nullptr);
            return 0;
        }
        double ret = cobj->getTouchLayerScale();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:getTouchLayerScale",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_getTouchLayerScale'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onResetLastBuildId(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onResetLastBuildId'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onResetLastBuildId'", nullptr);
            return 0;
        }
        cobj->onResetLastBuildId();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onResetLastBuildId",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onResetLastBuildId'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onEnterFrame(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onEnterFrame'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onEnterFrame");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onEnterFrame'", nullptr);
            return 0;
        }
        cobj->onEnterFrame(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onEnterFrame",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onEnterFrame'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onTouchesCancelled(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onTouchesCancelled'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Set* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::__Set>(tolua_S, 2, "cc.__Set",&arg0, "ImperialScene:onTouchesCancelled");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "ImperialScene:onTouchesCancelled");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onTouchesCancelled'", nullptr);
            return 0;
        }
        cobj->onTouchesCancelled(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onTouchesCancelled",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onTouchesCancelled'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onExit(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onExit'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onExit'", nullptr);
            return 0;
        }
        cobj->onExit();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onExit",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onExit'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_setPxPy(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_setPxPy'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        double arg0;
        double arg1;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:setPxPy");

        ok &= luaval_to_number(tolua_S, 3,&arg1, "ImperialScene:setPxPy");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_setPxPy'", nullptr);
            return 0;
        }
        cobj->setPxPy(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:setPxPy",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_setPxPy'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onMoveToBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuild'", nullptr);
            return 0;
        }
        cobj->onMoveToBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToBuild");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "ImperialScene:onMoveToBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuild'", nullptr);
            return 0;
        }
        cobj->onMoveToBuild(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onMoveToBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onMoveToBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onRemoveSpeBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onRemoveSpeBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onRemoveSpeBuild'", nullptr);
            return 0;
        }
        cobj->onRemoveSpeBuild();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onRemoveSpeBuild",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onRemoveSpeBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onSingleTouchEnd(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onSingleTouchEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Touch* arg0;

        ok &= luaval_to_object<cocos2d::Touch>(tolua_S, 2, "cc.Touch",&arg0, "ImperialScene:onSingleTouchEnd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onSingleTouchEnd'", nullptr);
            return 0;
        }
        cobj->onSingleTouchEnd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onSingleTouchEnd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onSingleTouchEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onOpenBuildEnd(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onOpenBuildEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onOpenBuildEnd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onOpenBuildEnd'", nullptr);
            return 0;
        }
        cobj->onOpenBuildEnd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onOpenBuildEnd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onOpenBuildEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_hideTmpBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_hideTmpBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:hideTmpBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_hideTmpBuild'", nullptr);
            return 0;
        }
        cobj->hideTmpBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:hideTmpBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_hideTmpBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onPlayBattle(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onPlayBattle'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onPlayBattle'", nullptr);
            return 0;
        }
        cobj->onPlayBattle();
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onPlayBattle",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onPlayBattle'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onShowHTPAgainAnim(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAgainAnim'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:onShowHTPAgainAnim");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAgainAnim'", nullptr);
            return 0;
        }
        cobj->onShowHTPAgainAnim(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onShowHTPAgainAnim",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onShowHTPAgainAnim'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onFlyOutPut(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onFlyOutPut'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onFlyOutPut");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onFlyOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyOutPut'", nullptr);
            return 0;
        }
        cobj->onFlyOutPut(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 3) 
    {
        int arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onFlyOutPut");

        ok &= luaval_to_int32(tolua_S, 3,(int *)&arg1, "ImperialScene:onFlyOutPut");

        ok &= luaval_to_int32(tolua_S, 4,(int *)&arg2, "ImperialScene:onFlyOutPut");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyOutPut'", nullptr);
            return 0;
        }
        cobj->onFlyOutPut(arg0, arg1, arg2);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onFlyOutPut",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onFlyOutPut'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onFlyTroopEnd(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopEnd'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ImperialScene:onFlyTroopEnd");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopEnd'", nullptr);
            return 0;
        }
        cobj->onFlyTroopEnd(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onFlyTroopEnd",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onFlyTroopEnd'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_hideFlyArrow(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_hideFlyArrow'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        double arg0;

        ok &= luaval_to_number(tolua_S, 2,&arg0, "ImperialScene:hideFlyArrow");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_hideFlyArrow'", nullptr);
            return 0;
        }
        cobj->hideFlyArrow(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:hideFlyArrow",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_hideFlyArrow'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onGetMsgRefreshBuild(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onGetMsgRefreshBuild'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= luaval_to_object<cocos2d::Ref>(tolua_S, 2, "cc.Ref",&arg0, "ImperialScene:onGetMsgRefreshBuild");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onGetMsgRefreshBuild'", nullptr);
            return 0;
        }
        cobj->onGetMsgRefreshBuild(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onGetMsgRefreshBuild",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onGetMsgRefreshBuild'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onMoveToSpeBuildAndPlay(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onMoveToSpeBuildAndPlay'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToSpeBuildAndPlay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToSpeBuildAndPlay'", nullptr);
            return 0;
        }
        cobj->onMoveToSpeBuildAndPlay(arg0);
        lua_settop(tolua_S, 1);
        return 1;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= luaval_to_int32(tolua_S, 2,(int *)&arg0, "ImperialScene:onMoveToSpeBuildAndPlay");

        ok &= luaval_to_boolean(tolua_S, 3,&arg1, "ImperialScene:onMoveToSpeBuildAndPlay");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onMoveToSpeBuildAndPlay'", nullptr);
            return 0;
        }
        cobj->onMoveToSpeBuildAndPlay(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onMoveToSpeBuildAndPlay",argc, 1);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onMoveToSpeBuildAndPlay'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_onTouchesMoved(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif


#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertype(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    cobj = (ImperialScene*)tolua_tousertype(tolua_S,1,0);

#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_if_ImperialScene_onTouchesMoved'", nullptr);
        return 0;
    }
#endif

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        cocos2d::__Set* arg0;
        cocos2d::Event* arg1;

        ok &= luaval_to_object<cocos2d::__Set>(tolua_S, 2, "cc.__Set",&arg0, "ImperialScene:onTouchesMoved");

        ok &= luaval_to_object<cocos2d::Event>(tolua_S, 3, "cc.Event",&arg1, "ImperialScene:onTouchesMoved");
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_onTouchesMoved'", nullptr);
            return 0;
        }
        cobj->onTouchesMoved(arg0, arg1);
        lua_settop(tolua_S, 1);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:onTouchesMoved",argc, 2);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_onTouchesMoved'.",&tolua_err);
#endif

    return 0;
}
int lua_cocos2dx_if_ImperialScene_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"ImperialScene",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_create'", nullptr);
            return 0;
        }
        ImperialScene* ret = ImperialScene::create();
        object_to_luaval<ImperialScene>(tolua_S, "ImperialScene",(ImperialScene*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "ImperialScene:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_create'.",&tolua_err);
#endif
    return 0;
}
int lua_cocos2dx_if_ImperialScene_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ImperialScene* cobj = nullptr;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif



    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_ImperialScene_constructor'", nullptr);
            return 0;
        }
        cobj = new ImperialScene();
        tolua_pushusertype(tolua_S,(void*)cobj,"ImperialScene");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d \n", "ImperialScene:ImperialScene",argc, 0);
    return 0;

#if COCOS2D_DEBUG >= 1
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_ImperialScene_constructor'.",&tolua_err);
#endif

    return 0;
}

static int lua_cocos2dx_if_ImperialScene_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ImperialScene)");
    return 0;
}

int lua_register_cocos2dx_if_ImperialScene(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ImperialScene");
    tolua_cclass(tolua_S,"ImperialScene","ImperialScene","cc.CCLayer",nullptr);

    tolua_beginmodule(tolua_S,"ImperialScene");
        tolua_function(tolua_S,"new",lua_cocos2dx_if_ImperialScene_constructor);
        tolua_function(tolua_S,"onUpdateInfo",lua_cocos2dx_if_ImperialScene_onUpdateInfo);
        tolua_function(tolua_S,"onResetBuild",lua_cocos2dx_if_ImperialScene_onResetBuild);
        tolua_function(tolua_S,"makeCanPlayArrowPoint",lua_cocos2dx_if_ImperialScene_makeCanPlayArrowPoint);
        tolua_function(tolua_S,"onEnter",lua_cocos2dx_if_ImperialScene_onEnter);
        tolua_function(tolua_S,"updateShipState",lua_cocos2dx_if_ImperialScene_updateShipState);
        tolua_function(tolua_S,"getBuildById",lua_cocos2dx_if_ImperialScene_getBuildById);
        tolua_function(tolua_S,"setPointArrowAni",lua_cocos2dx_if_ImperialScene_setPointArrowAni);
        tolua_function(tolua_S,"onShowBtnsView",lua_cocos2dx_if_ImperialScene_onShowBtnsView);
        tolua_function(tolua_S,"getSpeBuildNameById",lua_cocos2dx_if_ImperialScene_getSpeBuildNameById);
        tolua_function(tolua_S,"setAnimationManager",lua_cocos2dx_if_ImperialScene_setAnimationManager);
        tolua_function(tolua_S,"onTouchesEnded",lua_cocos2dx_if_ImperialScene_onTouchesEnded);
        tolua_function(tolua_S,"setUnMoveScence",lua_cocos2dx_if_ImperialScene_setUnMoveScence);
        tolua_function(tolua_S,"showBuildBtns",lua_cocos2dx_if_ImperialScene_showBuildBtns);
        tolua_function(tolua_S,"onMoveToBuildAndOpen",lua_cocos2dx_if_ImperialScene_onMoveToBuildAndOpen);
        tolua_function(tolua_S,"hidePrincess",lua_cocos2dx_if_ImperialScene_hidePrincess);
        tolua_function(tolua_S,"reSetTalkTime",lua_cocos2dx_if_ImperialScene_reSetTalkTime);
        tolua_function(tolua_S,"onMoveToBuildAndPlay",lua_cocos2dx_if_ImperialScene_onMoveToBuildAndPlay);
        tolua_function(tolua_S,"setQuestEffect",lua_cocos2dx_if_ImperialScene_setQuestEffect);
        tolua_function(tolua_S,"onMoveToPos",lua_cocos2dx_if_ImperialScene_onMoveToPos);
        tolua_function(tolua_S,"onCreateBuild",lua_cocos2dx_if_ImperialScene_onCreateBuild);
        tolua_function(tolua_S,"onGetTouchLayerScale",lua_cocos2dx_if_ImperialScene_onGetTouchLayerScale);
        tolua_function(tolua_S,"getMailPosOnScreen",lua_cocos2dx_if_ImperialScene_getMailPosOnScreen);
        tolua_function(tolua_S,"getBuildNameById",lua_cocos2dx_if_ImperialScene_getBuildNameById);
        tolua_function(tolua_S,"onShowHTPAnim",lua_cocos2dx_if_ImperialScene_onShowHTPAnim);
        tolua_function(tolua_S,"onShowFeedbackAnim",lua_cocos2dx_if_ImperialScene_onShowFeedbackAnim);
        tolua_function(tolua_S,"onTouchesBegan",lua_cocos2dx_if_ImperialScene_onTouchesBegan);
        tolua_function(tolua_S,"onQijiBottomShow",lua_cocos2dx_if_ImperialScene_onQijiBottomShow);
        tolua_function(tolua_S,"stopShadow",lua_cocos2dx_if_ImperialScene_stopShadow);
        tolua_function(tolua_S,"onSaveCurPos",lua_cocos2dx_if_ImperialScene_onSaveCurPos);
        tolua_function(tolua_S,"getAnimationManager",lua_cocos2dx_if_ImperialScene_getAnimationManager);
        tolua_function(tolua_S,"init",lua_cocos2dx_if_ImperialScene_init);
        tolua_function(tolua_S,"findCanBuildTile",lua_cocos2dx_if_ImperialScene_findCanBuildTile);
        tolua_function(tolua_S,"removeCustomBatchLayer",lua_cocos2dx_if_ImperialScene_removeCustomBatchLayer);
        tolua_function(tolua_S,"onGetSceenPt",lua_cocos2dx_if_ImperialScene_onGetSceenPt);
        tolua_function(tolua_S,"onShowSpeBtnsView",lua_cocos2dx_if_ImperialScene_onShowSpeBtnsView);
        tolua_function(tolua_S,"onOpenBuild",lua_cocos2dx_if_ImperialScene_onOpenBuild);
        tolua_function(tolua_S,"onGoBackOldPos",lua_cocos2dx_if_ImperialScene_onGoBackOldPos);
        tolua_function(tolua_S,"onShowFeedbackAgainLaterAnim",lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainLaterAnim);
        tolua_function(tolua_S,"onMoveToPosDir",lua_cocos2dx_if_ImperialScene_onMoveToPosDir);
        tolua_function(tolua_S,"onSingleTouchBegin",lua_cocos2dx_if_ImperialScene_onSingleTouchBegin);
        tolua_function(tolua_S,"getWorldPosition",lua_cocos2dx_if_ImperialScene_getWorldPosition);
        tolua_function(tolua_S,"showTmpBuild",lua_cocos2dx_if_ImperialScene_showTmpBuild);
        tolua_function(tolua_S,"onFlyCargoOutPut",lua_cocos2dx_if_ImperialScene_onFlyCargoOutPut);
        tolua_function(tolua_S,"flyBall",lua_cocos2dx_if_ImperialScene_flyBall);
        tolua_function(tolua_S,"onFlyTroopEndToUI",lua_cocos2dx_if_ImperialScene_onFlyTroopEndToUI);
        tolua_function(tolua_S,"onFlyTroopParticle",lua_cocos2dx_if_ImperialScene_onFlyTroopParticle);
        tolua_function(tolua_S,"addToMovingLayer",lua_cocos2dx_if_ImperialScene_addToMovingLayer);
        tolua_function(tolua_S,"createCustomBatchLayer",lua_cocos2dx_if_ImperialScene_createCustomBatchLayer);
        tolua_function(tolua_S,"onShowHTPAgainLaterAnim",lua_cocos2dx_if_ImperialScene_onShowHTPAgainLaterAnim);
        tolua_function(tolua_S,"onShowFeedbackAgainAnim",lua_cocos2dx_if_ImperialScene_onShowFeedbackAgainAnim);
        tolua_function(tolua_S,"getTouchLayer",lua_cocos2dx_if_ImperialScene_getTouchLayer);
        tolua_function(tolua_S,"getNewRwdPosOnScreen",lua_cocos2dx_if_ImperialScene_getNewRwdPosOnScreen);
        tolua_function(tolua_S,"clickWorkshop",lua_cocos2dx_if_ImperialScene_clickWorkshop);
        tolua_function(tolua_S,"onPlayMoveTroops",lua_cocos2dx_if_ImperialScene_onPlayMoveTroops);
        tolua_function(tolua_S,"getTouchLayerScale",lua_cocos2dx_if_ImperialScene_getTouchLayerScale);
        tolua_function(tolua_S,"onResetLastBuildId",lua_cocos2dx_if_ImperialScene_onResetLastBuildId);
        tolua_function(tolua_S,"onEnterFrame",lua_cocos2dx_if_ImperialScene_onEnterFrame);
        tolua_function(tolua_S,"onTouchesCancelled",lua_cocos2dx_if_ImperialScene_onTouchesCancelled);
        tolua_function(tolua_S,"onExit",lua_cocos2dx_if_ImperialScene_onExit);
        tolua_function(tolua_S,"setPxPy",lua_cocos2dx_if_ImperialScene_setPxPy);
        tolua_function(tolua_S,"onMoveToBuild",lua_cocos2dx_if_ImperialScene_onMoveToBuild);
        tolua_function(tolua_S,"onRemoveSpeBuild",lua_cocos2dx_if_ImperialScene_onRemoveSpeBuild);
        tolua_function(tolua_S,"onSingleTouchEnd",lua_cocos2dx_if_ImperialScene_onSingleTouchEnd);
        tolua_function(tolua_S,"onOpenBuildEnd",lua_cocos2dx_if_ImperialScene_onOpenBuildEnd);
        tolua_function(tolua_S,"hideTmpBuild",lua_cocos2dx_if_ImperialScene_hideTmpBuild);
        tolua_function(tolua_S,"onPlayBattle",lua_cocos2dx_if_ImperialScene_onPlayBattle);
        tolua_function(tolua_S,"onShowHTPAgainAnim",lua_cocos2dx_if_ImperialScene_onShowHTPAgainAnim);
        tolua_function(tolua_S,"onFlyOutPut",lua_cocos2dx_if_ImperialScene_onFlyOutPut);
        tolua_function(tolua_S,"onFlyTroopEnd",lua_cocos2dx_if_ImperialScene_onFlyTroopEnd);
        tolua_function(tolua_S,"hideFlyArrow",lua_cocos2dx_if_ImperialScene_hideFlyArrow);
        tolua_function(tolua_S,"onGetMsgRefreshBuild",lua_cocos2dx_if_ImperialScene_onGetMsgRefreshBuild);
        tolua_function(tolua_S,"onMoveToSpeBuildAndPlay",lua_cocos2dx_if_ImperialScene_onMoveToSpeBuildAndPlay);
        tolua_function(tolua_S,"onTouchesMoved",lua_cocos2dx_if_ImperialScene_onTouchesMoved);
        tolua_function(tolua_S,"create", lua_cocos2dx_if_ImperialScene_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ImperialScene).name();
    g_luaType[typeName] = "ImperialScene";
    g_typeCast["ImperialScene"] = "ImperialScene";
    return 1;
}

int lua_cocos2dx_if_KingBattleRankView_create(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

#if COCOS2D_DEBUG >= 1
    tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
    if (!tolua_isusertable(tolua_S,1,"KingBattleRankView",0,&tolua_err)) goto tolua_lerror;
#endif

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
        {
            tolua_error(tolua_S,"invalid arguments in function 'lua_cocos2dx_if_KingBattleRankView_create'", nullptr);
            return 0;
        }
        KingBattleRankView* ret = KingBattleRankView::create();
        object_to_luaval<KingBattleRankView>(tolua_S, "KingBattleRankView",(KingBattleRankView*)ret);
        return 1;
    }
    luaL_error(tolua_S, "%s has wrong number of arguments: %d, was expecting %d\n ", "KingBattleRankView:create",argc, 0);
    return 0;
#if COCOS2D_DEBUG >= 1
    tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_if_KingBattleRankView_create'.",&tolua_err);
#endif
    return 0;
}
static int lua_cocos2dx_if_KingBattleRankView_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (KingBattleRankView)");
    return 0;
}

int lua_register_cocos2dx_if_KingBattleRankView(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"KingBattleRankView");
    tolua_cclass(tolua_S,"KingBattleRankView","KingBattleRankView","PopupBaseView",nullptr);

    tolua_beginmodule(tolua_S,"KingBattleRankView");
        tolua_function(tolua_S,"create", lua_cocos2dx_if_KingBattleRankView_create);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(KingBattleRankView).name();
    g_luaType[typeName] = "KingBattleRankView";
    g_typeCast["KingBattleRankView"] = "KingBattleRankView";
    return 1;
}
TOLUA_API int register_all_cocos2dx_if(lua_State* tolua_S)
{
	tolua_open(tolua_S);
	
	tolua_module(tolua_S,nullptr,0);
	tolua_beginmodule(tolua_S,nullptr);

	lua_register_cocos2dx_if_WorldController(tolua_S);
	lua_register_cocos2dx_if_FunBuildInfo(tolua_S);
	lua_register_cocos2dx_if_CCIFTouchNode(tolua_S);
	lua_register_cocos2dx_if_CCAniNode(tolua_S);
	lua_register_cocos2dx_if_ToolInfo(tolua_S);
	lua_register_cocos2dx_if_MarchInfo(tolua_S);
	lua_register_cocos2dx_if_PlayerInfo(tolua_S);
	lua_register_cocos2dx_if_AllianceInfo(tolua_S);
	lua_register_cocos2dx_if_PopupBaseView(tolua_S);
	lua_register_cocos2dx_if_WaitInterface(tolua_S);
	lua_register_cocos2dx_if_TipsView(tolua_S);
	lua_register_cocos2dx_if_GeneralInfo(tolua_S);
	lua_register_cocos2dx_if_YesNoDialog(tolua_S);
	lua_register_cocos2dx_if_TipsGuideView(tolua_S);
	lua_register_cocos2dx_if_CCSafeNotificationCenter(tolua_S);
	lua_register_cocos2dx_if_WorldCityInfo(tolua_S);
	lua_register_cocos2dx_if_CCLabelIFTTF(tolua_S);
	lua_register_cocos2dx_if_PlayerInfoBtnPopUpView(tolua_S);
	lua_register_cocos2dx_if_NewBaseTileLuaInfo(tolua_S);
	lua_register_cocos2dx_if_CCFloatingText(tolua_S);
	lua_register_cocos2dx_if_UserPlatformInfo(tolua_S);
	lua_register_cocos2dx_if_PortActController(tolua_S);
	lua_register_cocos2dx_if_KingBattleRankView(tolua_S);
	lua_register_cocos2dx_if_CCINIParser(tolua_S);
	lua_register_cocos2dx_if_TipsWithPicView(tolua_S);
	lua_register_cocos2dx_if_TipsVipView(tolua_S);
	lua_register_cocos2dx_if_ImperialScene(tolua_S);
	lua_register_cocos2dx_if_FunBuildController(tolua_S);
	lua_register_cocos2dx_if_CCModelLayerColor(tolua_S);
	lua_register_cocos2dx_if_AttributeInfo(tolua_S);
	lua_register_cocos2dx_if_CCTableViewTouchIFCell(tolua_S);
	lua_register_cocos2dx_if_Act2RefrshInfo(tolua_S);
	lua_register_cocos2dx_if_RewardClass(tolua_S);
	lua_register_cocos2dx_if_GeneralSkillInfo(tolua_S);
	lua_register_cocos2dx_if_LuaController(tolua_S);
	lua_register_cocos2dx_if_CCLoadSprite(tolua_S);
	lua_register_cocos2dx_if_ActivityController(tolua_S);
	lua_register_cocos2dx_if_CCLabelBatchNode(tolua_S);
	lua_register_cocos2dx_if_LuaActivityInfo(tolua_S);
	lua_register_cocos2dx_if_HFHeadImgNode(tolua_S);
	lua_register_cocos2dx_if_CCCommonUtilsForLua(tolua_S);
	lua_register_cocos2dx_if_CCLabelIF(tolua_S);
	lua_register_cocos2dx_if_EquipInfo(tolua_S);
	lua_register_cocos2dx_if_IFAllianceHelpReportInfo(tolua_S);
	lua_register_cocos2dx_if_CCProgressAppear(tolua_S);
	lua_register_cocos2dx_if_WorldMapView(tolua_S);
	lua_register_cocos2dx_if_GlobalData(tolua_S);
	lua_register_cocos2dx_if_CCModelLayer(tolua_S);
	lua_register_cocos2dx_if_ActivityEventObj(tolua_S);
	lua_register_cocos2dx_if_CCRapidXMLParser(tolua_S);
	lua_register_cocos2dx_if_TipsNewView(tolua_S);
	lua_register_cocos2dx_if_ToolController(tolua_S);
	lua_register_cocos2dx_if_Act1Data(tolua_S);
	lua_register_cocos2dx_if_PopupViewController(tolua_S);
	lua_register_cocos2dx_if_Act1ExcItem(tolua_S);
	lua_register_cocos2dx_if_GuideController(tolua_S);
	lua_register_cocos2dx_if_LocalController(tolua_S);
	lua_register_cocos2dx_if_CCClipSprite(tolua_S);
	lua_register_cocos2dx_if_SkillCDInfo(tolua_S);
	lua_register_cocos2dx_if_ConfirmCoinView(tolua_S);
	lua_register_cocos2dx_if_CCClipNode(tolua_S);
	lua_register_cocos2dx_if_CCLabelBatch(tolua_S);
	lua_register_cocos2dx_if_SceneController(tolua_S);

	tolua_endmodule(tolua_S);
	return 1;
}

